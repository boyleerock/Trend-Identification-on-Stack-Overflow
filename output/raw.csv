,id,title,body,accepted_answer_id,answer_count,comment_count,community_owned_date,creation_date,favorite_count,last_activity_date,last_edit_date,last_editor_display_name,last_editor_user_id,owner_display_name,owner_user_id,parent_id,post_type_id,score,tags,view_count
0,48270127,Can (a== 1 && a ==2 && a==3) ever evaluate to true?,"<blockquote>
  <p><strong>Moderator note:</strong> Please resist the urge to edit the code or remove this notice. The pattern of whitespace may be part of the question and therefore should not be tampered with unnecessarily. If you are in the ""whitespace is insignificant"" camp, you should be able to accept the code as is.</p>
</blockquote>

<p>Is it ever possible that <code>(a== 1 &amp;&amp; a ==2 &amp;&amp; a==3)</code> could evaluate to <code>true</code> in JavaScript?</p>

<p>This is an interview question asked by a major tech company. It happened two weeks back, but I'm still trying to find the answer. I know we never write such code in our day-to-day job, but I'm curious.</p>",48270314.0,26,17,,2018-01-15 20:20:47.787000+00:00,905,2020-10-25 13:30:34.890000+00:00,2018-11-26 16:21:37.623000+00:00,,19679.0,,1165332.0,,1,2540,javascript|ecmascript-6,377446
1,37937984,Git refusing to merge unrelated histories on rebase,"<p>During <code>git rebase origin/development</code> the following error message is shown from Git:</p>

<pre><code>fatal: refusing to merge unrelated histories
Error redoing merge 1234deadbeef1234deadbeef
</code></pre>

<p>My Git version is 2.9.0. It used to work fine in the previous version. </p>

<p>How can I continue this rebase allowing unrelated histories with the forced flag introduced in the new release?</p>",,23,7,,2016-06-21 07:23:00.370000+00:00,675,2020-12-19 04:52:15.350000+00:00,2019-06-05 11:27:42.847000+00:00,,63550.0,,2670370.0,,1,2510,git|rebase,1615514
2,52522565,Git is not working after macOS Update (xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools),"<p>I updated to macOS Mojave (this happens on Catalina update too, and seems to potentially occur on every major update thereafter)</p>
<p>This morning I navigated to my work's codebase in the Command Line on my MacBook pro, typed in &quot;git status&quot; in the repository and received the error:</p>
<pre><code>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</code></pre>
<p>How do i fix git, and command line tools?</p>",52522566.0,28,5,,2018-09-26 16:43:18.797000+00:00,267,2021-02-13 18:55:42.903000+00:00,2021-02-10 20:03:23.703000+00:00,,8221725.0,,8221725.0,,1,2070,xcode|git|macos|command-line|terminal,663038
3,44206782,Do I commit the package-lock.json file created by npm 5?,"<p><a href=""http://blog.npmjs.org/post/161081169345/v500"" rel=""noreferrer"">npm 5 was released today</a> and one of the new features include deterministic installs with the creation of a <code>package-lock.json</code> file.</p>

<p>Is this file supposed to be kept in source control?</p>

<p>I'm assuming it's similar to <a href=""https://stackoverflow.com/questions/39990017/should-i-commit-the-yarn-lock-file-and-what-is-it-for""><code>yarn.lock</code></a> and <a href=""https://stackoverflow.com/questions/12896780/should-composer-lock-be-committed-to-version-control""><code>composer.lock</code></a>, both of which are supposed to be kept in source control. </p>",44210813.0,12,5,,2017-05-26 17:03:32.577000+00:00,248,2021-02-23 18:22:43.633000+00:00,,,,,404623.0,,1,1701,node.js|git|npm|version-control|lockfile,586406
4,38892771,Can't bind to 'ngModel' since it isn't a known property of 'input',"<p>I've got the following error when launching my Angular app, even if the component is not displayed.</p>

<p>I have to comment out the <code>&lt;input&gt;</code> so that my app works.</p>

<pre class=""lang-none prettyprint-override""><code>zone.js:461 Unhandled Promise rejection: Template parse errors:
Can't bind to 'ngModel' since it isn't a known property of 'input'. (""
   &lt;div&gt;
      &lt;label&gt;Created:&lt;/label&gt;
      &lt;input  type=""text"" [ERROR -&gt;][(ngModel)]=""test"" placeholder=""foo"" /&gt;
   &lt;/div&gt;
&lt;/div&gt;""): InterventionDetails@4:28 ; Zone: &lt;root&gt; ; Task: Promise.then ; Value: 
</code></pre>

<p>I'm looking at the Hero plunker, but I don't see any difference from my code.</p>

<p>Here is the component file:</p>

<pre><code>import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { Intervention } from '../../model/intervention';

@Component({
   selector: 'intervention-details',
   templateUrl: 'app/intervention/details/intervention.details.html',
   styleUrls: ['app/intervention/details/intervention.details.css']
})

export class InterventionDetails
{
   @Input() intervention: Intervention;

   public test : string = ""toto"";
}
</code></pre>",38896469.0,42,9,,2016-08-11 09:44:32.477000+00:00,154,2021-01-26 05:02:44.133000+00:00,2020-03-27 17:43:53.967000+00:00,,12820864.0,,3433751.0,,1,1589,javascript|angular|typescript|input,1006309
5,37576685,Using async/await with a forEach loop,"<p>Are there any issues with using <code>async</code>/<code>await</code> in a <code>forEach</code> loop? I'm trying to loop through an array of files and <code>await</code> on the contents of each file. </p>

<pre><code>import fs from 'fs-promise'

async function printFiles () {
  const files = await getFilePaths() // Assume this works fine

  files.forEach(async (file) =&gt; {
    const contents = await fs.readFile(file, 'utf8')
    console.log(contents)
  })
}

printFiles()
</code></pre>

<p>This code does work, but could something go wrong with this? I had someone tell me that you're not supposed to use <code>async</code>/<code>await</code> in a higher order function like this, so I just wanted to ask if there was any issue with this.</p>",37576787.0,24,2,,2016-06-01 18:55:58.750000+00:00,551,2021-02-11 01:45:56.730000+00:00,2020-01-29 01:58:41.257000+00:00,,3533365.0,,3533365.0,,1,1574,javascript|node.js|promise|async-await|ecmascript-2017,762358
6,37364973,What is the difference between Promises and Observables?,"<p>What is the difference between <code>Promise</code> and <code>Observable</code> in Angular?</p>

<p>An example on each would be helpful in understanding both the cases. In what scenario can we use each case?</p>",37365955.0,30,7,,2016-05-21 15:43:27.463000+00:00,528,2020-11-03 18:00:37.750000+00:00,2020-01-11 02:11:23.453000+00:00,,63550.0,,6364715.0,,1,1532,angular|promise|rxjs|angular-promise|angular-observable,540952
7,38713405,Open files always in a new tab,"<p>I am using Visual Studio Code 1.3.1 with the newly introduced tabs.</p>

<p>When I click on files, the first file will open in a tab. If I do not make any changes to this file, the second clicked file will open in the same tab.</p>

<p>How can I avoid this and make Visual Studio Code always open a new tab?</p>",38723094.0,26,2,,2016-08-02 06:43:01.913000+00:00,266,2021-01-03 16:48:04.923000+00:00,2019-07-19 16:36:45.167000+00:00,,3345644.0,,2629219.0,,1,1520,visual-studio-code,404462
8,36827659,Compiling an application for use in highly radioactive environments,"<p>We are compiling an embedded C++ application that is deployed in a shielded device in an environment bombarded with <a href=""https://en.wikipedia.org/wiki/Ionizing_radiation"" rel=""noreferrer"">ionizing radiation</a>. We are using GCC and cross-compiling for ARM. When deployed, our application generates some erroneous data and crashes more often than we would like. The hardware is designed for this environment, and our application has run on this platform for several years.</p>
<p>Are there changes we can make to our code, or compile-time improvements that can be made to identify/correct <a href=""https://en.wikipedia.org/wiki/Soft_error"" rel=""noreferrer"">soft errors</a> and memory-corruption caused by <a href=""https://en.wikipedia.org/wiki/Single_event_upset"" rel=""noreferrer"">single event upsets</a>? Have any other developers had success in reducing the harmful effects of soft errors on a long-running application?</p>",36831344.0,23,7,,2016-04-24 19:09:40.713000+00:00,539,2020-11-24 14:07:15.703000+00:00,2020-11-24 14:07:15.703000+00:00,,7076153.0,,183528.0,,1,1498,c++|c|gcc|embedded|fault-tolerance,121634
9,41573587,"What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?","<p>Python 3.3 includes in its standard library the new package <code>venv</code>. What does it do, and how does it differ from all the other packages that seem to match the regex <code>(py)?(v|virtual|pip)?env</code>?</p>",41573588.0,6,8,,2017-01-10 16:27:43.207000+00:00,662,2021-02-28 01:04:19.930000+00:00,2017-01-24 14:35:49.700000+00:00,,247696.0,,247696.0,,1,1296,python|virtualenv|virtualenvwrapper|pyenv|python-venv,298506
10,45940861,Android 8: Cleartext HTTP traffic not permitted,"<p>I had reports from users with Android 8 that my app (that uses back-end feed) does not show content. After investigation I found following Exception happening on Android 8:</p>

<pre><code>08-29 12:03:11.246 11285-11285/ E/: [12:03:11.245, main]: Exception: IOException java.io.IOException: Cleartext HTTP traffic to * not permitted
at com.android.okhttp.HttpHandler$CleartextURLFilter.checkURLPermitted(HttpHandler.java:115)
at com.android.okhttp.internal.huc.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:458)
at com.android.okhttp.internal.huc.HttpURLConnectionImpl.connect(HttpURLConnectionImpl.java:127)
at com.deiw.android.generic.tasks.AbstractHttpAsyncTask.doConnection(AbstractHttpAsyncTask.java:207)
at com.deiw.android.generic.tasks.AbstractHttpAsyncTask.extendedDoInBackground(AbstractHttpAsyncTask.java:102)
at com.deiw.android.generic.tasks.AbstractAsyncTask.doInBackground(AbstractAsyncTask.java:88)
at android.os.AsyncTask$2.call(AsyncTask.java:333)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:245)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)
at java.lang.Thread.run(Thread.java:764)
</code></pre>

<p>(I've removed package name, URL and other possible identifiers)</p>

<p>On Android 7 and lower everything works, I do not set <code>android:usesCleartextTraffic</code> in Manifest (and setting it to <code>true</code> does not help, that is the default value anyway), neither do I use Network Security Information. If I call <code>NetworkSecurityPolicy.getInstance().isCleartextTrafficPermitted()</code>, it returns <code>false</code> for Android 8, <code>true</code> for older version, using the same apk file.
I tried to find some mention of this on Google info about Android O, but without success.</p>",50834600.0,33,2,,2017-08-29 13:48:06.670000+00:00,341,2021-02-24 16:31:06.957000+00:00,,,,,2881509.0,,1,1273,android|http|https,874084
11,38138100,"AddTransient, AddScoped and AddSingleton Services Differences","<p>I want to implement <a href=""https://en.wikipedia.org/wiki/Dependency_injection"" rel=""noreferrer"">dependency injection</a> (DI) in ASP.NET Core. So after adding this code to <strong><em><code>ConfigureServices</code></em></strong> method, both ways work.</p>

<p>What is the difference between the <code>services.AddTransient</code> and <code>service.AddScoped</code> methods in ASP.NET Core?</p>

<pre><code>public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.

    // Add application services.
    services.AddTransient&lt;IEmailSender, AuthMessageSender&gt;();
    services.AddScoped&lt;IEmailSender, AuthMessageSender&gt;();
}
</code></pre>",38139500.0,8,10,,2016-07-01 06:03:02.523000+00:00,419,2020-11-17 06:26:16.150000+00:00,2020-03-07 21:21:56.440000+00:00,,63550.0,,1368240.0,,1,1209,c#|asp.net-core|.net-core,551321
12,44493378,What's the difference between implementation and compile in Gradle?,"<p>After updating to Android Studio 3.0 and creating a new project, I noticed that in <code>build.gradle</code> there is a new way to add new dependencies instead of <code>compile</code> there is <code>implementation</code> and instead of <code>testCompile</code> there is <code>testImplementation</code>.</p>

<p>Example:</p>

<pre><code> implementation 'com.android.support:appcompat-v7:25.0.0'
 testImplementation 'junit:junit:4.12'
</code></pre>

<p>instead of</p>

<pre><code> compile 'com.android.support:appcompat-v7:25.0.0'
 testCompile 'junit:junit:4.12'
</code></pre>

<p>What's the difference between them and what should I be using?</p>",44493379.0,10,0,,2017-06-12 07:13:13.100000+00:00,276,2021-02-21 09:38:45.517000+00:00,2018-11-22 06:15:09.057000+00:00,,3990767.0,,3998402.0,,1,1143,gradle|build.gradle|dependency-management|gradle-plugin|transitive-dependency,382367
13,37233735,TypeScript: Interfaces vs Types,"<p>What is the difference between these statements (interface vs type)?</p>

<pre><code>interface X {
    a: number
    b: string
}

type X = {
    a: number
    b: string
};
</code></pre>",37233777.0,16,3,,2016-05-15 01:53:52.903000+00:00,241,2021-02-21 01:18:32.197000+00:00,2020-02-27 14:49:30.457000+00:00,user6101582,271200.0,user6101582,,,1,1055,typescript,222004
14,38060436,What are the new features in C++17?,"<p>C++17 is now feature complete, so unlikely to experience large changes. Hundreds of proposals were put forward for C++17.</p>

<p>Which of those features were added to C++ in C++17?</p>

<p>When using a C++ compiler that supports ""C++1z"", which of those features are going to be available when the compiler updates to C++17?</p>",38060437.0,1,5,2020-07-31 07:59:12.857000+00:00,2016-06-27 18:06:32.597000+00:00,551,2020-04-03 07:53:21.373000+00:00,2018-01-16 18:41:01.417000+00:00,,5377495.0,,1774667.0,,1,1006,c++|standards|c++-faq|c++17,229479
15,43574426,Java: How to resolve java.lang.NoClassDefFoundError: javax/xml/bind/JAXBException,"<p>I have some code that uses JAXB API classes which have been provided as a part of the JDK in Java 6/7/8.  When I run the same code with Java 9, at runtime I get errors indicating that JAXB classes can not be found.</p>

<p>The JAXB classes have been provided as a part of the JDK since Java 6, so why can Java 9 no longer find these classes?</p>",43574427.0,35,4,,2017-04-23 17:40:23.460000+00:00,270,2021-02-11 03:21:53.283000+00:00,2020-10-06 08:46:46.710000+00:00,,10907864.0,,3814029.0,,1,945,java|jaxb|java-9|java-11|java-10,759925
16,39152071,Can't bind to 'formGroup' since it isn't a known property of 'form',"<p><strong>THE SITUATION:</strong></p>

<p>Please help! I am trying to make what should be a very simple form in my Angular2 app but no matter what it never works.</p>

<p><strong>ANGULAR VERSION:</strong></p>

<p>Angular 2.0.0 Rc5</p>

<p><strong>THE ERROR:</strong></p>

<pre class=""lang-none prettyprint-override""><code>Can't bind to 'formGroup' since it isn't a known property of 'form'
</code></pre>

<p><a href=""https://i.stack.imgur.com/7elmg.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/7elmg.png"" alt=""enter image description here""></a></p>

<p><strong>THE CODE:</strong></p>

<p><strong>The view:</strong></p>

<pre class=""lang-html prettyprint-override""><code>&lt;form [formGroup]=""newTaskForm"" (submit)=""createNewTask()""&gt;
   &lt;div class=""form-group""&gt;
      &lt;label for=""name""&gt;Name&lt;/label&gt;
      &lt;input type=""text"" name=""name"" required&gt;
   &lt;/div&gt;
   &lt;button type=""submit"" class=""btn btn-default""&gt;Submit&lt;/button&gt;
&lt;/form&gt;
</code></pre>

<p><strong>The controller:</strong></p>

<pre><code>import { Component } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder }  from '@angular/forms';
import {FormsModule,ReactiveFormsModule} from '@angular/forms';
import { Task } from './task';

@Component({
    selector: 'task-add',
    templateUrl: 'app/task-add.component.html'

})
export class TaskAddComponent {

    newTaskForm: FormGroup;

    constructor(fb: FormBuilder) 
    {
        this.newTaskForm = fb.group({
            name: ["""", Validators.required]
        });
    }

    createNewTask()
    {
        console.log(this.newTaskForm.value)
    } 
}
</code></pre>

<p><strong>The ngModule:</strong></p>

<pre><code>import { NgModule }      from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule }   from '@angular/forms';

import { routing }        from './app.routing';
import { AppComponent }  from './app.component';
import { TaskService } from './task.service'

@NgModule({
    imports: [ 
        BrowserModule,
        routing,
        FormsModule
    ],
    declarations: [ AppComponent ],
    providers: [
        TaskService
    ],
    bootstrap: [ AppComponent ]
})
export class AppModule { }
</code></pre>

<p><strong>THE QUESTION:</strong></p>

<p>Why am I getting that error?</p>

<p>Am I missing something?</p>",39152110.0,32,1,,2016-08-25 18:09:06.380000+00:00,101,2021-01-09 13:40:56.357000+00:00,2020-05-30 08:06:23.567000+00:00,,5377805.0,,2433664.0,,1,942,angular|typescript|angular2-forms,785495
17,42939454,What is the difference between .NET Core and .NET Standard Class Library project types?,"<p>In Visual Studio, there are at least three different types of class libraries you can create:</p>
<ul>
<li>Class Library (.NET Framework)</li>
<li>Class Library (.NET Standard)</li>
<li>Class Library (.NET Core)</li>
</ul>
<p>While the first is what we've been using for years, a major point of confusion I've been having is when to use the .NET Standard and .NET Core class library types. I've been bitten by this recently when attempting to <a href=""https://stackoverflow.com/a/42748869/983064"">multi-target different framework versions</a>, and <a href=""https://stackoverflow.com/questions/42938879/cant-get-xunit-tests-to-run-with-net-core"">creating a unit test project</a>.</p>
<p>So, what is the difference between <em>Class Library (.NET Standard)</em> and <em>Class Library (.NET Core)</em>, why do both exist, and when should we use one over the other?</p>",42940138.0,11,9,,2017-03-21 22:34:24.367000+00:00,258,2020-08-07 04:42:42.263000+00:00,2020-08-06 14:48:30.867000+00:00,,63550.0,,983064.0,,1,894,.net|.net-core|class-library|.net-standard,197211
18,53452713,Why is 2 * (i * i) faster than 2 * i * i in Java?,"<p>The following Java program takes on average between 0.50 secs and 0.55 secs to run:</p>

<pre><code>public static void main(String[] args) {
    long startTime = System.nanoTime();
    int n = 0;
    for (int i = 0; i &lt; 1000000000; i++) {
        n += 2 * (i * i);
    }
    System.out.println((double) (System.nanoTime() - startTime) / 1000000000 + "" s"");
    System.out.println(""n = "" + n);
}
</code></pre>

<p>If I replace <code>2 * (i * i)</code> with <code>2 * i * i</code>, it takes between 0.60 and 0.65 secs to run. How come?</p>

<p>I ran each version of the program 15 times, alternating between the two. Here are the results:</p>

<pre><code> 2*(i*i)  |  2*i*i
----------+----------
0.5183738 | 0.6246434
0.5298337 | 0.6049722
0.5308647 | 0.6603363
0.5133458 | 0.6243328
0.5003011 | 0.6541802
0.5366181 | 0.6312638
0.515149  | 0.6241105
0.5237389 | 0.627815
0.5249942 | 0.6114252
0.5641624 | 0.6781033
0.538412  | 0.6393969
0.5466744 | 0.6608845
0.531159  | 0.6201077
0.5048032 | 0.6511559
0.5232789 | 0.6544526
</code></pre>

<p>The fastest run of <code>2 * i * i</code> took longer than the slowest run of <code>2 * (i * i)</code>. If they had the same efficiency, the probability of this happening would be less than <code>1/2^15 * 100% = 0.00305%</code>.</p>",53453588.0,10,15,,2018-11-23 20:40:10.073000+00:00,293,2020-07-03 08:22:14.607000+00:00,2019-12-25 04:47:51.850000+00:00,,9194639.0,,10339589.0,,1,869,java|performance|benchmarking|bytecode|jit,248035
19,36795819,When should I use curly braces for ES6 import?,"<p>It seems to be obvious, but I found myself a bit confused about when to use curly braces for importing a single module in ES6. For example, in the React-Native project I am working on, I have the following file and its content:</p>
<h3>File <em>initialState.js</em></h3>
<pre><code>var initialState = {
    todo: {
        todos: [
            {id: 1, task: 'Finish Coding', completed: false},
            {id: 2, task: 'Do Laundry', completed: false},
            {id: 2, task: 'Shopping Groceries', completed: false},
        ]
    }
};

export default initialState;
</code></pre>
<p>In the TodoReducer.js, I have to import it without curly braces:</p>
<pre><code>import initialState from './todoInitialState';
</code></pre>
<p>If I enclose the <code>initialState</code> in curly braces, I get the following error for the following line of code:</p>
<blockquote>
<p>Cannot read property todo of undefined</p>
</blockquote>
<h3>File <em>TodoReducer.js</em>:</h3>
<pre><code>export default function todos(state = initialState.todo, action) {
    // ...
}
</code></pre>
<p>Similar errors also happen to my components with the curly braces. I was wondering when I should use curly braces for a single import, because obviously, when importing multiple component/modules, you have to enclose them in curly braces, which I know.</p>
<p>The Stack Overflow post at <a href=""https://stackoverflow.com/questions/31096597/using-brackets-with-javascript-import-syntax"">here</a> does not answer my question, instead I am asking <em>when</em> I should or should not use curly braces for importing a <strong>single</strong> module, or I should never use curly braces for importing a single module in ES6 (this is apparently not the case, as I have seen single import with curly braces required).</p>",36796281.0,11,3,,2016-04-22 13:58:14.347000+00:00,529,2020-12-31 03:48:30.603000+00:00,2020-12-31 02:00:16.490000+00:00,,63550.0,,2228325.0,,1,868,javascript|import|ecmascript-6,218703
20,40354978,Why does C++ code for testing the Collatz conjecture run faster than hand-written assembly?,"<p>I wrote these two solutions for <a href=""https://projecteuler.net/problem=14"" rel=""noreferrer"">Project Euler Q14</a>, in assembly and in C++. They implement identical brute force approach for testing the <a href=""https://en.wikipedia.org/wiki/Collatz_conjecture"" rel=""noreferrer"">Collatz conjecture</a>. The assembly solution was assembled with:</p>
<pre class=""lang-none prettyprint-override""><code>nasm -felf64 p14.asm &amp;&amp; gcc p14.o -o p14
</code></pre>
<p>The C++ was compiled with:</p>
<pre class=""lang-none prettyprint-override""><code>g++ p14.cpp -o p14
</code></pre>
<p>Assembly, <code>p14.asm</code>:</p>
<pre class=""lang-asm prettyprint-override""><code>section .data
    fmt db &quot;%d&quot;, 10, 0

global main
extern printf

section .text

main:
    mov rcx, 1000000
    xor rdi, rdi        ; max i
    xor rsi, rsi        ; i

l1:
    dec rcx
    xor r10, r10        ; count
    mov rax, rcx

l2:
    test rax, 1
    jpe even

    mov rbx, 3
    mul rbx
    inc rax
    jmp c1

even:
    mov rbx, 2
    xor rdx, rdx
    div rbx

c1:
    inc r10
    cmp rax, 1
    jne l2

    cmp rdi, r10
    cmovl rdi, r10
    cmovl rsi, rcx

    cmp rcx, 2
    jne l1

    mov rdi, fmt
    xor rax, rax
    call printf
    ret
</code></pre>
<p>C++, <code>p14.cpp</code>:</p>
<pre class=""lang-cc prettyprint-override""><code>#include &lt;iostream&gt;

int sequence(long n) {
    int count = 1;
    while (n != 1) {
        if (n % 2 == 0)
            n /= 2;
        else
            n = 3*n + 1;
        ++count;
    }
    return count;
}

int main() {
    int max = 0, maxi;
    for (int i = 999999; i &gt; 0; --i) {
        int s = sequence(i);
        if (s &gt; max) {
            max = s;
            maxi = i;
        }
    }
    std::cout &lt;&lt; maxi &lt;&lt; std::endl;
}
</code></pre>
<p>I know about the compiler optimizations to improve speed and everything, but I don’t see many ways to further optimize my assembly solution (speaking programmatically, not mathematically).</p>
<p>The C++ code uses modulus every term and division every other term, while the assembly code only uses a single division every other term.</p>
<p>But the assembly is taking on average 1 second longer than the C++ solution. Why is this? I am asking mainly out of curiosity.</p>
<h3>Execution times</h3>
<p>My system: 64-bit Linux on 1.4 GHz Intel Celeron 2955U (Haswell microarchitecture).</p>
<ul>
<li><code>g++</code> (unoptimized): avg 1272 ms.</li>
<li><code>g++ -O3</code>: avg 578 ms.</li>
<li><code>asm (div)</code> (original): avg 2650 ms.</li>
<li><code>asm (shr)</code>: avg 679 ms.</li>
<li><a href=""https://stackoverflow.com/a/40356449/4322363"">@johnfound asm</a> (assembled with NASM): avg 501 ms.</li>
<li><a href=""https://stackoverflow.com/a/40367384/4322363"">@hidefromkgb asm</a>: avg 200 ms.</li>
<li><a href=""http://gcc.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZTUAHAvVAOwGdK0AbVAV2J4OmAIIcAtiADkABmmk0Exnh6YA8mwDCCAIZtgmGfICUpDgOLIj0gKQAmAMx42yHvywBqW460cC%2BKgAdAg%2B2Layog7Oru5ePn4BLgQhYRFRTi5uHpjevskEAJ6MmBypjuGR6fzJAGwALAD6BJ4iAI78mK6YEDVsBA3NrXgAXpiknn0DTS0AVIy6BAgm3gDsAELpntuTdTOeEroAHnh5ACKeshOHR8jnlz6bVZE7ngBmJJ69e0OnPhcQDijXIAWk8tBWtlWWnBj22fwqnnscM8pxB/yRkI2W1eOymgxabHueEe6WieDeDxeuO2%2BP2dwxyMcT1ENO2AHcEKpclAiRjed57LVPI4TD4AGJfPkVMLgyH2daePkK8GeEBSvLhRH2Ey6zWYnFsnYMhWM0lVJyYHgiQ24ulDBmOC6yc2stnoVBrFlG14Ael9Is8s08GHQ91DE30YYc61oB10AGtSqiWpgAG5dILbADKnqWmGImDA0g4nl0PHZukKpcWnjUun8IbYuTSFTjRE8HrLbwIBbLIrYMdotqNJs2TqRrp9O39ngIyk8ad0xFLFjnCFyShUamInmQ%2BnjBGQCDLkk87MIJ4sgmsBxIuX4Ije/B4PEKI7Z9tTGbYjXTXXuCBpS1bADWZD8ZwDLduVLDsAFl1AANUFRVswACQAJRQzwABlsCialpy/Tx/1/UNAOA2UIWw5VFWHZltlncs13ZEgE1LD5d3zEN0HQP8fz3BtMAgnYRMYqDUGUGC509PDWRjTx0KwoDPQQ5Dm0wLB0DMVo8y5UsJHvEEtzUI4SKORhCw4IF2FRUtj0wXQSi4z103LfhFmEwi2VnAAjfgWnzIluOgnclUwTSayJTAjgIYhdE8NSZNaXQM3XXISDwYAXHLJUJjXQhPF88t9GsUsBAIdJZ2nXZ%2BgJHi%2BNIwCgLyLQEjlGjsJ1TUqJREif0aciMVDfiuinI1Z0Kj1k1QDNiDePh2V09gCwmJYBGABAs08ABVVxJIkLpAs9R8vLdadpQBZVhVFCV%2Bq6QbeLVe7f1I8aaShC5OW5DV9R1V1oi6fA3g/ESKQ1f5GTFbzRxjOHwJhnZwYgR1QJuZAsW9GqbgRC4SQR86fXR%2B5kHe3FPttCnvPmRYTwxdGycLAhBCJHGAdWM4yUiZJ4xcCBMdtYiceuY5SYJ20cfudpOm6CBaFkBXFYmBxanRsUCdeSzkjeCAHGRewAFY9c8AAFDCAEl%2BAaQV7GVw3jbNy3rb12wDa0Qd7Ft%2BMThF251ax7YmZZh5xY5rnRF9WYtjcfRgEcIIAE5i1LPgmHSIIcPWdZZEaRx1RqgujWiHYTeXI7cNQJhPCznP7E8M5MGYUInWHRHtkMtNcWIeWJisI4RI4BBd1eburiRQvi8HGUKmRZ5Cdeesu/QI5lYN9Y%2B662YN4U5EDc5tvWiHpf%2B7no1e0bY0eAmRwRI7rvkBXzxiGXkTkA73JA4f3v5fDo1dCekeCcJiz3nsaBcI8v6TgPlQBKngM411ziJdIxAE7/DQPwfo/wXQMSfg/f4U8zgkkiEEVOjBHpYB/PnQUjgmxvibLkNS20tACB4GGDgqVchLFrBeJY/YFq6GAGoayIJB4UhaBAJSAANc8l49wCH6KiIkCVCzZX8AWaGoDtiLxHsvVe68H6b23iqXe%2B9NGH2HjsZ%2BZk2TFxGm9F4t9Zq4kco/TABjtjF3YWlTK2U2C5SJCxTcB5z6BQ3HWVAS1fKEFLC4dKcjGCFC%2BEsYQdk4lxTwMgBMZZXyBlCgWAywgRDaQHkfCBj866vEnq2LUZw66xMYDwXQ1hf5shCbics19X4dzYCMT%2Bj8rGiScHWTyrg8DJjeMQSSnhLLphTAWdUVj1QmRio0OSMYlJ9PVBs7Y/DgBcESkhGMAAVbA2YjktJpP/MMgDgFdMYPfcpIkYHbBIZXMhoZ7EES%2BSgtB8jKpOmwYqXB/cnQEKIaIV5TBRpsFDCARxncdH9LwQfcmThtGWJ7t4NeRi6KuwuIMmh5ZezED8SwNKHZCzoH4LeRpvZXCJM4k/Ze6oIByWHNCJSYoFRspKRYwOL8D7ov5Y/V2%2BizIKQGQpYce8CVKhotUuMUqLm4jvq8FxEw3EnzMYPPlwLbkHzaa8DpIoumzR6X03uy9ZW0q6MgMZHFJkSGmYWTuhB5lMqOOqNS6zMIxmWUcVZ%2BFtp9y2Zhbauz9neoVCcs5yqjUAMsUAqBZi373LKfqsxzy4GkOhaGcOPynToMwQClEfd8H/HBZ4jh/Ykq%2BUSVuAKLhgBKmqXXCZUyp4gTjICLIuRCDJyVKgFotkQpCBYPuHg0zaYaOLsxPMiZkzcSSqgN4lJR2EAyblBYvDGXlknVoE2O0OD5V7SmJ%2BGCYlEgWPFV8VoZG8O4m8PAK4WhKXTjm0iI1CynUaKInscKD6qssccXuyKzEfTRY5Y%2BeicWwhlbK4gF7FFTpvWoSdPCTzcT/ZVA%2BOqHliVRY4K50HgXTlnTwYlpK8Dks9JS6luQbX0veJ8RZXweUcswly9YogzgXEZMgfKuhDqnkUr6hUSkJgenZESdtTr6ik0FVBxFMGDESuONhaV%2BLZWdrCIqlUtFYSnzZHhsphcfRVOntgL2HpmzIYIKxVovZGCli%2BIx5A74nT/SMzSQ1OxjU3wPm/M1vS9UeutSMu14zHXOtmW64gCzmVvoVP6wNUQnT1GDQ/UNGEfUYXDY0vZXrDnRtOecmGxciAEFyqQ4yy4hCaU7I3PcegXDqnNv0O9aFswAHV1TDgVDfBUdcMS1GQNtdQu5%2BuxhjMNic8myyhM3KgRsK6yzRVivFRRHA2DbXWGcbrvpswAGkcLqgNncT4jgxsjmLmZguog4IXHWC%2BVhqAxjxdhENoc9xzvjcm0Ob7GIrtfELB0Z9yYNlRlwvhZKiGiSxMfc%2Bxs7m3C5F0D2PsG9fJuMksmQs/9CgTAwxVA5yE1HlibZ4bAkjZCt3nrdu7jOmeM5NtydAQg5qHd7EJyZt7dz7iJF2Lh4i4dsEp3fYgDRSCS/qE2TwogADiO1ZC%2BghBMfyLRnuvg9O9wSbBiwpA0YRxSeAJCqGXG%2BCY7XeyTpmSCc2aZCjrzwOgQwXwkpVaTKWWgdwocHhim4xttlGAkAICsQ4iTUDIH3DZPxr5EnY8a40woDW61P1KJYW8aA2ALQyQQY9RUAqHxYWGRPhl/B0KBGbxpLlPBde68Mbo6VEl6DSjQ0QOEj1xr8wmwOSaQGjnAZYyBA%2B2RZshWQz9vFGjfpEL%2BrkPZw5L7ngWs4Rb/lnEBcPkFZwwVkiGVIkUIImAFih7soRq4F8tC8cmJKLh/CIeQCwdgpYIAa/CpFORGCWixOUZgVRxKJg20aEDY7IVok6cOMSP%2BRItA/ATAEwPuwydK7mQQyCtA9EZw9AT8tATItS76byua0%2B6wcE5s9gAG2qQ81iwqoG/S6BEGNCkqE4OmbYBG9BQq2BY8oqsGmmlSQyAu568OV6y4e6d6GGcS2GrBhGxGymHBZGQyRKBYVGNG6eVKNKEWDKLGzKbG%2BE7KWgUiXGPGpiRo7BViMGVqEqqmKoPBHiQyzB2AemioBmdOIkvm2wbgnSuGlB6aoW3cFSvBDBqmTBraROl4JO6ObwbiLABg7wBWHApqaY5qPhVqchNCbm9q7w0WMyrqxK%2BcrGUifqkkDSKyck2%2B2W0iMRAi%2ByMaZW4GzORcQylW1WbytWxA9WYYWA9yx4ugrWng1unWPW6o9QM29wo2f2k4X26Wvui2ciK2lI/uG2CU9%2BO22we2B2x2p2ng52IYu4V2qB3m7SveT8/edyDyGaRo4%2BH6P4I0xBpBy%2Bbo6AyAxUBK0QLxTgrxNCcEVYieYBeukwIgFReyrQmALQaeeGphW23OYYq21REo3eRovICQCQ1ECkThkIlmhmboEoyACsOwg41I2JOJ2wU8bUvgzhKoiscY2wzhTokMNJdJnM9JOIkiNOlJRyG4lEbYQJ%2BengWg4oLSWJvklJcqNhNC5EpEWYvkX%2BrCRUuQsg2xGJHijg4ogpcpRJiJpJ%2B%2BioFJOw1JDJeptJ%2BpNJ1IkiRwvkqpbJAECqe49YK4PJfJRmWJ8suJsqTUea%2BJ8sqpLavgSJmplwCsQpupBpQZjJxpWgdBngFpHJ9hXJpYvJrwAAcifpJqgKUPrtIC0BuDwIwHcf6LmXmfmbma8EBAqvKI4RpjiFiYSS2tSLCUqdibiQqr6dqVSWSIyW2YaUYZ4MycgM4TWXWYKc6SKQ1C9BKVKaXrKfKXToqXyf2Q2ZZmSVqf6Tqa2R2cGfqcaSab5PyXWU6USS6QJKGNtJKRII%2BCCbkN2kOhuMQBeP8YVKxC%2BOOS9C9EbnkDOeKD2XOV2k2UuS2VUO2WuZDBuVoJ6biImSUMmamQbp4JmYwBMALlBVQKeXOKUNMYtEVIVKtskuVLuBYIdMkgYDmQWURQGFyFgLJgmMAL5AOnoGwOgCCOyGOnSqeBIFVMRSsZMkmESNjvuKdKJhhBcPWBmKWOoJKBgmRS4A1mIdhl/golRHsbUYpEJrkIyhhOoFhJ4PxebMAjsBAN9MeJ2CmbBGEuwsJvhc2u/m8A2IAfJekAAAKHCtZMlqUaXZhaUuXmzjQlGaV6IYRaDSJKp7wAzUi2WkLkGvCGHuW3LizeReVnCSI%2BVnDmzYSaWzDDbGJ4pkwbL8XxWwg4KM7FwDJuYMrRbPynA2q7hxZLKFGmSpbYQbIYgZbbAQATbjHTZOjA62QPZnAzreRKQXDeUaWJVRVAopG9EdY8DqjA5FX5TAkcSxHbSJnDrBRhLIBjqbq260yN63hDEVDxzbBdXqjChwTH7ObXx3BFVfCWSoDFS%2BR0K%2BRDoEBqDNiZLlTLWTL8CbSMABQvnbBaBqQ4SDVuXZV9Q1TFwmyFggirHqj2DnXqHyWvB/VITZiA0TDA15Wg1DLg2YCQ37bQ2w3IHvgop1HG6NGTo1b7itFjLtFNZdGxJPXABLBtbjXVz7aHYnaHVjbbB9GTr17qgAAcnN8uj2k1AOCoiqE4WxEAV1N1d1D1T1biCYlOI6Q8G0CAX1LQAYVkme2N2eueT%2BHAPVhMf1JsKNk4GsngAAUqyCFW8kFV8rML6DmbMM7S7a7W7cGCwPgA1vwPcnNLHiGJSKRZgORZRQOpyKgGoHIlgCEQ%2BkPBFJ2BSBEYWAoi4M2LuKQqWO7Vna7cqqSAxEcqbk2g6lMglMwoWPYGcHAVTrULUDiRAPYEEPUArmhCMDpHBAWFMmbqtagMuMeG6k/oIJgNtCjNVTFCCCURiIgdNTyd6hOHXHAc5veieDDUgbaoUIbZUuBAxG1KaCqCwGbgYK/mIRIPWvWM2HRT7YuPkqwESJhWEjCMLmWAPXuvWoUdJNjgQIAVzKglvYqFoI0gYPHHzZ4CCOoDQiCIcFYM3LvosNRkYJ4PUHzXXBIKWDGL6GCLIEEINgbMxruDg4WM5t/XnYqMANHgbEEBUqA%2BA5A8ePgrAxmGdo4HzSgyhOg5cEELIEMYbDsp8Pg43HEfscQzKY2DRXRczOfcxVfSuDfeqKpVhFDm0txFyJtOPFEvnoMY4Dgyw4ynw4Q3PN/YItdblL%2BlVsQDhqICY8uAQOQREAnBLrQI4OgAgekPvU2jPo3I5NY%2BkElJgH5QgYrIrHbbY1gHcJqt/VDpqhMCCCArY0cJ8JgL5LBSRIk9/XE7uAk64r5Fqt/fYwbE4yas8AnIPBAbQAbBMLUH4XCN3DgxiLIIKR6Zg0EFmLU7cIrE0zZb/R3ubArvGeCMKIqeOIqDBUZS2J7GhUVcbKQnLu3Y6ttNmAgCXmmRmYIEtWtoUGZXZQ5WwDY7IAnJIs5aUHgBqkCN/SUZgENViusL5f5VYRlX%2BYM/LjhN0707QMKFeX2qWKxCuJwjRYOmZbg4lB3SxRaAbODC6MQpcV0F%2BpgD%2BthlQkI2XZgHXDM1MvXY3c3a3dsPUBUwcK/jo%2Bns5j9Sqk4iPCBkyuCmZo8CYbopc6VeWfBgMwIZeihiIehrIlhlfrykvEcwqRPMyNIZYjS3S%2BZgxAoSSvQ5wrRppPRqvUxoyqxqyjoVCHoZxjGBFfxoJsJg2HxblsmdJhkVMvJiJNSyKtivgNhPFOKrcwy4y3YQ4XKkqvsa8CZoKzy0KflQxHYdZitHZg5moova5uof8F5l8mfChe0lfAUymt0iFqVZalQXCGkVFlMlkXMh9osklusClmsulsGvgNlrlvlpUUVohMcqVjdgxKTeEkwC0W0Y1p0S1ts2NTbnXgMZ9usINusLNhcKMdsC1VNlNt2wg1MXEmgLMWtuZHFIsZwMsSzWsezZsRdjsdduVujcTTsF1dXC9jru6oO4DhLYLf26LbGPcMDhAKDjUFZHxWtmGCURShgnZmEk%2Bi%2BnuIUKjt2MSuSzKUoHjo5OgITkvSTklOTjwJTtTrThWyNeu9B8TazmoOznA8QFzo5BILzmFPwULnoCLhgmLtERLlLjLnLorsrqrjpO/lrq9rrvBemUEES3kKhIXTXpbs23enbg7k7kIK7jyB7gut7r7rRROwHsgEHleqHuHlWCGNHg2DfS/TKUnlWKnoklrTeEtjnqB/rerkXoPCXnJ%2BXo9YklXubrXvXltT85gC3tWu3p3gI6G2yAK9sIc2cWyKmty05zSBcQQVPnxLPpgPPmIvvgbFaODL2WloM3CNmGwOsCCBMmMrRXQnrItCCBM57PnIq6ILoZymq7xvCJwJCQHdDhY/6nVb6hC551cdPotLSvnEI5oDyfeMi0C4MbUAbCw2IRTsABI1s9W4wNtIg7ICwxAPiwQwbUvYOtkllGwIdAorpbIg0CCGo%2BnoCYyv%2BMQOs1yAYHBctlEc2jFFOxpdTjFk%2BkcKUHRzsEBoHGS6VQRia2YX8Na1pvR0y8hteqy6Nxy/554bqnG7y3/IceCcK0XKKxRooRK7DtK2oQTQCwq%2BxiqxhAYdlxqylFq6WJmxJgZfq7JsO0gsyDd7S%2Ba2pla7ija3CHa51I67ZzSC6/ym63UST8EQZbZgjn605i5hABM55hva0uG0apGwFtG8FtT/G3CWWIcY58moPmmq6257iB51Cl540JV4sEvobFaDaC8DbUwDswnGsrs9lQlUlQpClWlYqCYt/W%2Brr3Fc4/cyDX1abQNUyECnCCJZMLRcHRJeOTxf8evrpnM5KBiHGRiI0o2At9hg1hVL6C4NtAbI4A3diwbJ7MAwN0N/wysGIW0tU9/ZMnyt97PKgrs49872JW7xIyPd/rpisD6PUI4BlgnA47UKsKsLi18Mn4S29%2BGxn4U75t9x318sQ7Yx3LY%2BqiROa4D3/fV0iOiy3Vi6sOQ7QHzbUHzbQAnE34N7wwSwba2WF7szqrYzn5v%2BaAnCErY/5svgnEFgkb0t3wKr3%2BjYjYhADQNWjVByKw8xaf8TZlBV8wmOqC4E%2BmLr2N122gmxlsQIW6oknzCJIv%2BcuBKMDCTrlwu6kyXulyF7AD1Cw54LkPpT0CMASgnAZKCIBaDO9YBBYcuJjxRYSAOmUHO/sjUf5xUQaL/OEO/iwqpJxK//K0IkhhQtBLKjYRlNzR5KHoyg39QwrY1ORuUYmuzY2rY3t7f0ratjDXtmRBZAwKQLSCers2wCW9LmGEVyvS07J39QIIgiYGoMkQtJja3gXZpgHWAmwDBrlHEHf0VDmDLBVOawdSFsEkR1gOVXxkYKMzZgdoioQfn42TRW1PA9lboniVDYhNsCjjLYFQHNSuMDA7jEoEr30YMQy0AKBbOuBSQh5kg8NTwGk0H74ANU%2BAWxo8CSiSCLm1zHEFckH6QIf4%2BjXZgPzMFksEmkvR4NnjmgtBJYz7fwKfwlxAhe4HAeQQRCKb8BJSK4JJg0HDi2VCAPdeIZ4y153wuCJzPeHBUnSPdmw7IUDs2G/rhDpGdlKYboEaBdF4sOINJsP1cTX9tg%2BATuGE2pDEZ0AkbYsLIGLA4h5h2KRYWcEkw8AcQ2wk5tSDaRD8XE6QC2vGVAiTCiA%2Bww4S0kXhD8uCWTbQYywIaeM4kUzRlFhkwAdBbUDGLoAzVCC/Dw2GTDVFk2eEkt8Rw/IhMv1EgMQ74JI8FqICBEgi9hMwxIbZyyA7BNIZIoobszhBsj/glJBim6neDoAcQ6KTSKa3Xj9CYw4wwKpyM5EMQRRPIjkGOlyB1oUBfyHEBwGGGsiaWhzDkT/UVDsA6E3ENCjH3Qrck76uQIgcnVvApJCwagJcP0HyiegfiH/dMh/jDCaCHBmgjykZiyC78fhXyWyhVEYBhU7wVwslq3Dz4RjwuAATWzCNA%2BRvYNUdWAnSfC54UIsllwXx4qgDYqCKUaIBOFsiCh4KDgEmL3Thxs62dX0NIDMATVpABsBQNs2kC0AFAqAGQDvU2AqhrwVgUZo4CbGkBrGcgKsWYG/61BaAHDBOPYCQb1BPYDQBoKsCAQ1j6gCgKQB6VIANj5ADAGQAoC4BXB%2BxpgUgHAFgBIA8kZACgCPSkg7gUAADOOAnCuBPpgeK4SgL5GMAKAlAU3AgJoDfDPjSA%2BAQsE/jgZcABx5Acas%2BLMBMBn8nAGQCCFuAgNuse6GCbt02zRc5o91EQCCAbBOoqGIDGhtA3YS0VCgvkTjoYCrGkAaxdY1cV%2BJbF2AnAcYMQkcHn4ghrYMcaIvHATgcMFAu44iRACPFv0dw5AbgDxPmTAAKmpAO8cSi4Bv4vxr4o6B%2BMKBfifxkRf8V%2BOSBWgQJDAZgDfQAlQS7gIiAIP8A678AE4y/EELBJyTGSEJCUJCQWBQnY10JIDMBsRNIn1iKJMgaIDRNkR0TagDE2XKQzuC1AKG7E1SVxJQACSTx/E88fMgyQ9lVgIk1QGJMfGSSDo0ktgJ%2BMAnyS/xQlJScBIHGgT1JL%2BSCdBOMlwSzJCxEBm8BhQghkJy2GyWeEwkQMkB/wXCf%2BwIku4iJ1YmQGRLXHNiXJ1E0bh5K8moho84IVYAFOylDiQATDROLIFWC0AZ%2BDfTRpo09gkSZAi40gMuIVjkTAJlErcSAFtgcTdQS06QPYCcmbTNxfYkCWYD9oyN6gQAA"" rel=""noreferrer"">@hidefromkgb asm, optimized by @Peter Cordes</a>: avg 145 ms.</li>
<li><a href=""https://godbolt.org/g/1N70Ib"" rel=""noreferrer"">@Veedrac C++</a>: avg 81 ms with <code>-O3</code>, 305 ms with <code>-O0</code>.</li>
</ul>",40355466.0,11,47,,2016-11-01 06:12:06.097000+00:00,504,2020-12-29 12:59:34.793000+00:00,2020-09-26 02:35:42.687000+00:00,,254635.0,,4322363.0,,1,860,c++|performance|assembly|optimization|x86,153904
21,38200282,android.os.FileUriExposedException: file:///storage/emulated/0/test.txt exposed beyond app through Intent.getData(),"<p>The app is crashing when I'm trying to open a file. It works below Android Nougat, but on Android Nougat it crashes. It only crashes when I try to open a file from the SD card, not from the system partition. Some permission problem?</p>

<p>Sample code:</p>

<pre><code>File file = new File(""/storage/emulated/0/test.txt"");
Intent intent = new Intent(Intent.ACTION_VIEW);
intent.setDataAndType(Uri.fromFile(file), ""text/*"");
intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
startActivity(intent); // Crashes on this line
</code></pre>

<p>Log: </p>

<blockquote>
  <p>android.os.FileUriExposedException:
  file:///storage/emulated/0/test.txt exposed beyond app through
  Intent.getData()</p>
</blockquote>

<p><strong>Edit:</strong></p>

<p>When targeting Android Nougat, <code>file://</code> URIs are not allowed anymore. We should use <code>content://</code> URIs instead. However, my app needs to open files in root directories. Any ideas?</p>",38858040.0,28,3,,2016-07-05 09:51:40.530000+00:00,292,2020-12-06 23:55:05.433000+00:00,2018-02-02 17:32:47.750000+00:00,,4583267.0,,4583267.0,,1,802,android|android-file|android-7.0-nougat,489272
22,38008334,Angular/RxJs When should I unsubscribe from `Subscription`,"<p>When should I store the <code>Subscription</code> instances and invoke <code>unsubscribe()</code> during the NgOnDestroy life cycle and when can I simply ignore them?</p>
<p>Saving all subscriptions introduces a lot of mess into component code.</p>
<p><a href=""https://angular.io/docs/ts/latest/guide/server-communication.html"" rel=""noreferrer"">HTTP Client Guide</a> ignore subscriptions like this:</p>
<pre class=""lang-js prettyprint-override""><code>getHeroes() {
  this.heroService.getHeroes()
                  .subscribe(
                     heroes =&gt; this.heroes = heroes,
                     error =&gt;  this.errorMessage = &lt;any&gt;error);
}
</code></pre>
<p>In the same time <a href=""https://angular.io/docs/ts/latest/guide/router.html"" rel=""noreferrer"">Route &amp; Navigation Guide</a> says that:</p>
<blockquote>
<p>Eventually, we'll navigate somewhere else. The router will remove this component from the DOM and destroy it. We need to clean up after ourselves before that happens. Specifically, we must unsubscribe before Angular destroys the component. Failure to do so could create a memory leak.</p>
<p>We unsubscribe from our <code>Observable</code> in the <code>ngOnDestroy</code> method.</p>
</blockquote>
<pre class=""lang-js prettyprint-override""><code>private sub: any;

ngOnInit() {
  this.sub = this.route.params.subscribe(params =&gt; {
     let id = +params['id']; // (+) converts string 'id' to a number
     this.service.getHero(id).then(hero =&gt; this.hero = hero);
   });
}

ngOnDestroy() {
  this.sub.unsubscribe();
}
</code></pre>",41177163.0,24,2,,2016-06-24 07:52:45.577000+00:00,448,2021-02-25 18:49:41.730000+00:00,2020-09-15 08:09:01.187000+00:00,,5377805.0,,1429493.0,,1,797,angular|rxjs|observable|subscription|angular-component-life-cycle,209951
23,42374151,All com.android.support libraries must use the exact same version specification,"<p>After updating to android studio 2.3 I got this error message.
I know it's just a hint as the app run normally but it's really strange.</p>

<blockquote>
  <p>All com.android.support libraries must use the exact same version specification (mixing versions can lead to runtime crashes). Found versions 25.1.1, 24.0.0. Examples include com.android.support:animated-vector-drawable:25.1.1 and com.android.support:mediarouter-v7:24.0.0</p>
</blockquote>

<p><a href=""https://i.stack.imgur.com/trji5.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/trji5.png"" alt=""enter image description here""></a></p>

<p>my gradle:</p>

<pre><code>dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.android.support:support-v4:25.1.1'
    compile 'com.android.support:design:25.1.1'
    compile 'com.android.support:recyclerview-v7:25.1.1'
    compile 'com.android.support:cardview-v7:25.1.1'
    compile 'com.google.android.gms:play-services-maps:10.2.0'
    compile 'com.google.android.gms:play-services:10.2.0'

    compile 'io.reactivex.rxjava2:rxjava:2.0.1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.blankj:utilcode:1.3.6'
    compile 'com.orhanobut:logger:1.15'
    compile 'com.facebook.stetho:stetho:1.4.2'

    provided 'com.google.auto.value:auto-value:1.2'
    annotationProcessor 'com.google.auto.value:auto-value:1.2'
    annotationProcessor 'com.ryanharter.auto.value:auto-value-parcel:0.2.5'

    compile 'com.mikepenz:iconics-core:2.8.2@aar'
    compile('com.mikepenz:materialdrawer:5.8.1@aar') { transitive = true }
    compile 'com.mikepenz:google-material-typeface:2.2.0.3.original@aar'
    compile 'me.zhanghai.android.materialprogressbar:library:1.3.0'
    compile 'com.github.GrenderG:Toasty:1.1.1'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.8.0'
    compile 'com.github.MAXDeliveryNG:slideview:1.0.0'

    compile 'com.facebook.fresco:fresco:1.0.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'

    compile 'com.google.maps.android:android-maps-utils:0.4.4'
    compile 'com.github.jd-alexander:library:1.1.0'
}
</code></pre>",42374426.0,54,1,,2017-02-21 17:35:02.123000+00:00,232,2020-02-17 16:23:47.370000+00:00,2019-06-22 10:16:05.217000+00:00,,6296561.0,,3998402.0,,1,795,android|build.gradle,377596
24,38004148,Another git process seems to be running in this repository,"<p>I'm trying to learn how to use Git and have created a small project with an HTML, CSS, and Javascript file. I made a branch from my basically empty project and then made some changes to my code. I tried staging the changes but I get the following error message:</p>

<pre><code>Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
</code></pre>

<p>Granted, I did run into problems trying to commit my empty project earlier and just quit git bash since I didn't know how to get out of where I somehow had gotten. </p>

<p>Is there any way for me to fix this or should I just start a new repository?</p>",38004193.0,29,3,,2016-06-24 00:59:24.897000+00:00,168,2021-01-28 00:15:13.603000+00:00,2018-04-20 20:01:57.783000+00:00,,9132582.0,,6242376.0,,1,795,git,463961
25,39494058,BehaviorSubject vs Observable?,"<p>I'm looking into Angular RxJs patterns and I don't understand the difference between a <code>BehaviorSubject</code> and an <code>Observable</code>.</p>

<p>From my understanding, a <code>BehaviorSubject</code> is a value that can change over time (can be subscribed to and subscribers can receive updated results). This seems to be the exact same purpose of an <code>Observable</code>.  </p>

<p>When would you use an <code>Observable</code> vs a <code>BehaviorSubject</code>? Are there benefits to using a <code>BehaviorSubject</code> over an <code>Observable</code> or vice versa?</p>",40231605.0,10,0,,2016-09-14 15:14:44.443000+00:00,283,2020-07-23 10:16:16.090000+00:00,2020-02-26 10:38:08.293000+00:00,,5377805.0,,6620551.0,,1,789,angular|rxjs|behaviorsubject|rxjs-observables,417903
26,50683786,"Why does array[idx++]+=""a"" increase idx once in Java 8 but twice in Java 9 and 10?","<p>For a challenge, <a href=""https://stackoverflow.com/users/1682559/kevin-cruijssen"">a fellow code golfer</a> <a href=""https://codegolf.stackexchange.com/questions/166012/exchange-capitalization/166081?noredirect=1#comment401670_166081"">wrote the following code</a>:</p>

<pre><code>import java.util.*;
public class Main {
  public static void main(String[] args) {
    int size = 3;
    String[] array = new String[size];
    Arrays.fill(array, """");
    for(int i = 0; i &lt;= 100; ) {
      array[i++%size] += i + "" "";
    }
    for(String element: array) {
      System.out.println(element);
    }
  }
}
</code></pre>

<p><a href=""https://tio.run/##TY3BTsMwEETv@YpRJKSEgFXEjZADH8CpxyoH07rVps46sjdFFcq3BzduKafdnXkz2@mTfnaD4W53nGfqB@cFXRTVKGTVY51lw/hlaYut1SHgUxPjJwOuahAtcZwc7dBHr1iLJz5sWmh/COWCAsQCRoPXejn/MV6fo87m@yZym5iPixXUnqwtFuwJeV4mb@98camkGF3Vcbw3eFnF7fYPqXlDVfXALaomMhVy5Ck//bWkpzDW9IblLcXuLetzENMrN4oaIiiWiyta3pumbJrnXw"" rel=""noreferrer"">When running this code in Java 8, we get the following result:</a></p>

<pre><code>1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88 91 94 97 100 
2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62 65 68 71 74 77 80 83 86 89 92 95 98 101 
3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99 
</code></pre>

<p><a href=""https://tio.run/##TY3NboMwEITvPMUIqRKU1krUWymHPkBPOUYcnMSJlpgF2UuqqOLZiYPz09Puznwz2@iTfm92x2mitu@coAmCGoSsei2TpB82lrbYWu09fjQx/hLgpnrREsapox3a4GUrccSHdQ3tDj6fUYBYwKjwUc7nP8bpc9DZ/N5FriPzfbW82pO12Yy9IU3z6O07l10rKUQXZRhfFZaLsN3/ITavqSheuEZRBaZAijTmx0dLfApjTWtYPmPs2bI6ezGt6gZRfQDFcnZD82fTmIzTdAE"" rel=""noreferrer"">When running this code in Java 10, we get the following result:</a></p>

<pre><code>2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 
</code></pre>

<p>The numbering is entirely off using Java 10. So what is happening here? Is it a bug in Java 10?</p>

<h2>Follow ups from the comments:</h2>

<ul>
<li>The issue appears when compiled with Java 9 or later (we found it in Java 10). Compiling this code on Java 8, then running in Java 9 or any later version, including Java 11 early access, gives the expected result.</li>
<li>This kind of code is non-standard, but is valid according to the spec. It was found by <a href=""https://stackoverflow.com/users/1682559/kevin-cruijssen"">Kevin Cruijssen</a> in a <a href=""https://codegolf.stackexchange.com/questions/166012/exchange-capitalization/166081?noredirect=1#comment401670_166081"">discussion in a <strong>golfing challenge</strong></a>, hence the weird use case encountered.</li>
<li><p><a href=""https://stackoverflow.com/users/525036/didier-l"">Didier L</a> found out that the issue can be reproduced with the much smaller and more understandable code:</p>

<pre><code>class Main {
  public static void main(String[] args) {
    String[] array = { """" };
    array[test()] += ""a"";
  }
  static int test() {
    System.out.println(""evaluated"");
    return 0;
  }
}
</code></pre>

<p><a href=""https://tio.run/##TYxBCoMwFET3PcWQVaRUui8eoasuxcWvBomNUZIfQcSzp6lpoYthYN7wBlroMs3KDt0rxtaQ97iTtthOwByeRrfwTJxqmXSHMTH5YKdtXzcg1/viuAJ/o6MVFTYIgf12wGOrWXmWRYNzBUHiQ/aUr15bRj78hKtnNZZT4HJOajZWCrWQCcSqE0UWO8XBWVyzbI/xDQ"" rel=""noreferrer"">Result when compiled in Java 8:</a></p>

<pre><code>evaluated
</code></pre>

<p><a href=""https://tio.run/##TYxBCoMwFET3PcWQlaFUui8eoasuxcWvBomNUZIfQcSzp6lpoYthYN7wBlroMnSvGFtD3uNO2mI7AXN4Gt3CM3GqZdIdxsSKBztt@7oBud7L4wr8jY5WVNggBPbbAY@tZuW5kA3OFQSJD9lTvnptGfnwE66e1VhOgcs5qdnYQqiFTCBWnZBZ7BQHZ3HNsj3GNw"" rel=""noreferrer"">Result when compiled in Java 9 and 10:</a></p>

<pre><code>evaluated
evaluated
</code></pre></li>
<li><p>The issue seems to be limited to the string concatenation and assignment operator (<code>+=</code>) with an expression with side effect(s) as the left operand, like in <code>array[test()]+=""a""</code>, <code>array[ix++]+=""a""</code>, <code>test()[index]+=""a""</code>, or <code>test().field+=""a""</code>. To enable string concatenation, at least one of the sides must have type <code>String</code>. Trying to reproduce this on other types or constructs failed.</p></li>
</ul>",50686658.0,1,14,,2018-06-04 15:16:14.077000+00:00,159,2018-07-19 13:51:18.933000+00:00,2018-06-07 17:31:21.867000+00:00,,1779477.0,,180719.0,,1,763,java|java-8|javac|java-9|java-10,72062
27,44629890,What is a 'workspace' in Visual Studio Code?,"<p>I can't quite believe I am asking this question, but I have not been able to find a definition in the documentation. <em>In case it isn't painfully obvious, I am (very) new to Visual Studio Code.</em></p>

<p>For example, Visual Studio Code talks about <a href=""https://code.visualstudio.com/docs/getstarted/settings"" rel=""noreferrer"">applying settings at the user level vs the workspace level</a>.</p>

<p>On the one hand,</p>

<ul>
<li>(a) it could refer to a project directory that you have opened; or</li>
<li>(b) it could refer to everything you have opened in a particular window.</li>
</ul>

<p>The page referenced above says</p>

<blockquote>
<pre><code>""Workspace: These settings are stored inside your workspace
in a .vscode folder and only apply when the workspace is opened.""
</code></pre>
</blockquote>",57134632.0,16,8,,2017-06-19 11:53:36.503000+00:00,136,2021-02-02 23:24:07.990000+00:00,2020-03-16 23:11:01.980000+00:00,,63550.0,,1527750.0,,1,749,visual-studio-code,293634
28,50718018,Xcode 10 Error: Multiple commands produce,"<blockquote>
  <p>error: Multiple commands produce '/Users/uesr/Library/Developer/Xcode/DerivedData/OptimalLive-fxatvygbofczeyhjsawtebkimvwx/Build/Products/Debug-iphoneos/OptimalLive.app/Info.plist':
      1) Target 'OptimalLive' has copy command from '/Users/uesr/Desktop/workSpace/SEALIVE/SeaLive1.1/OptimalLive/Info.plist' to '/Users/uesr/Library/Developer/Xcode/DerivedData/OptimalLive-fxatvygbofczeyhjsawtebkimvwx/Build/Products/Debug-iphoneos/OptimalLive.app/Info.plist'
      2) Target 'OptimalLive' has copy command from '/Users/uesr/Desktop/workSpace/SEALIVE/SeaLive1.1/OptimalLive/Server/Masonry/Info.plist' to '/Users/uesr/Library/Developer/Xcode/DerivedData/OptimalLive-fxatvygbofczeyhjsawtebkimvwx/Build/Products/Debug-iphoneos/OptimalLive.app/Info.plist'
      3) Target 'OptimalLive' has process command with input '/Users/uesr/Desktop/workSpace/SEALIVE/SeaLive1.1/OptimalLive/Info.plist'</p>
</blockquote>

<p>Running the code in Xcode9 works, but there is a error in Xcode10.</p>",50719379.0,77,4,,2018-06-06 10:22:16.673000+00:00,146,2021-01-26 21:22:11.147000+00:00,2019-12-26 06:11:29.257000+00:00,,9194639.0,,9594997.0,,1,742,info.plist|xcode10,455971
29,44619165,GitHub satanically messing with Markdown - changes 666 to DCLXVI,"<p><a href=""https://github.com/aaronryank/Forked/tree/fa599eaee537e05657d6d73116ee8c177eeb2c50"" rel=""noreferrer"">My GitHub repository</a> has nothing but a readme in it. In this readme, locally I wrote this:</p>

<pre><code>Factoids:
 - There are about six different ways to do everything in Forked.
 - There are actually six different ways to enter loops.
 - There are six directionals and six I/O commands.
 - 666. ha.
</code></pre>

<p>Emphasis on the last line.
What GitHub decided to show was <em>not</em> <code>666</code>.</p>

<p><a href=""https://i.stack.imgur.com/AVSsT.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/AVSsT.png"" alt=""dclxvi""></a></p>

<p><code>DCLXVI</code> is the Roman Numeral number for <a href=""https://en.wikipedia.org/wiki/666_(number)"" rel=""noreferrer"">666</a>.</p>

<p>This really creeped me out. My local file and <a href=""https://raw.githubusercontent.com/aaronryank/Forked/fa599eaee537e05657d6d73116ee8c177eeb2c50/README.md"" rel=""noreferrer"">the raw file</a> both show <code>666</code>.</p>

<p>What is GitHub doing, and why is the indentation on the un-numbered list messed up? Is this an easter egg, or some satanic bug?</p>",44619272.0,3,16,,2017-06-18 20:18:00.613000+00:00,108,2017-07-10 15:46:07.857000+00:00,2017-07-10 15:46:07.857000+00:00,,7659995.0,,7659995.0,,1,741,github|markdown,82134
30,40352684,What is the equivalent of Java static methods in Kotlin?,"<p>There is no <code>static</code> keyword in Kotlin.</p>

<p>What is the best way to represent a <code>static</code> Java method in Kotlin?</p>",40352734.0,29,5,,2016-11-01 00:52:33.640000+00:00,74,2021-02-12 16:23:09.463000+00:00,2021-02-12 03:44:43.120000+00:00,,15181309.0,,14316.0,,1,726,java|kotlin|static,274100
31,43006550,How to use *ngIf else?,"<p>I'm using Angular and I want to use <code>*ngIf else</code> (available since version 4) in this example: </p>

<pre><code>&lt;div *ngIf=""isValid""&gt;
  content here ...
&lt;/div&gt;

&lt;div *ngIf=""!isValid""&gt;
 other content here...
&lt;/div&gt;
</code></pre>

<p>How can I acheive the same behavior with <code>ngIf else</code> ?</p>",43006589.0,18,1,,2017-03-24 18:18:26.513000+00:00,131,2021-02-14 12:39:24.003000+00:00,2018-10-08 21:15:17.890000+00:00,,3345644.0,,5486494.0,,1,726,angular|if-statement|angular-template,790568
32,37800790,Hide strange unwanted Xcode logs,"<p>When using the Xcode 8+ and creating a new blank project, the following logs appear when running the application:</p>

<pre><code>2016-06-13 16:33:34.406093 TestiOS10[8209:100611] bundleid: com.appc.TestiOS10, enable_level: 0, persist_level: 0, propagate_with_activity: 0
2016-06-13 16:33:34.406323 TestiOS10[8209:100607] Created DB, header sequence number = 248
2016-06-13 16:33:34.409564 TestiOS10[8209:100611] subsystem: com.apple.UIKit, category: HIDEvents, enable_level: 0, persist_level: 0, default_ttl: 0, info_ttl: 0, debug_ttl: 0, generate_symptoms: 0, enable_oversize: 0, privacy_setting: 0
2016-06-13 16:33:34.504117 TestiOS10[8209:100607] Created DB, header sequence number = 248
2016-06-13 16:33:34.548023 TestiOS10[8209:100607] subsystem: com.apple.BaseBoard, category: MachPort, enable_level: 0, persist_level: 0, default_ttl: 0, info_ttl: 0, debug_ttl: 0, generate_symptoms: 0, enable_oversize: 0, privacy_setting: 0
2016-06-13 16:33:34.568458 TestiOS10[8209:100608] subsystem: com.apple.FrontBoard, category: Common, enable_level: 0, persist_level: 0, default_ttl: 0, info_ttl: 0, debug_ttl: 0, generate_symptoms: 0, enable_oversize: 0, privacy_setting: 0
</code></pre>

<p>Maybe someone already found a configuration for this to handle?</p>",39461256.0,13,7,,2016-06-13 23:39:11.920000+00:00,274,2020-09-29 21:41:29.320000+00:00,2017-09-20 10:36:05.830000+00:00,,5537752.0,,5537752.0,,1,718,ios|xcode|logging|xcode8|ios10,200076
33,47068709,Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2,"<p>I am new to TensorFlow. I have recently installed it (Windows CPU version) and received the following message:</p>

<blockquote>
  <p>Successfully installed tensorflow-1.4.0 tensorflow-tensorboard-0.4.0rc2</p>
</blockquote>

<p>Then when I tried to run</p>

<pre class=""lang-py prettyprint-override""><code>import tensorflow as tf
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
sess.run(hello)
'Hello, TensorFlow!'
a = tf.constant(10)
b = tf.constant(32)
sess.run(a + b)
42
sess.close()
</code></pre>

<p>(which I found through <a href=""https://github.com/tensorflow/tensorflow"" rel=""noreferrer"">https://github.com/tensorflow/tensorflow</a>)</p>

<p>I received the following message:</p>

<blockquote>
  <p>2017-11-02 01:56:21.698935: I C:\tf_jenkins\home\workspace\rel-win\M\windows\PY\36\tensorflow\core\platform\cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX AVX2</p>
</blockquote>

<p>But when I ran </p>

<pre class=""lang-py prettyprint-override""><code>import tensorflow as tf
hello = tf.constant('Hello, TensorFlow!')
sess = tf.Session()
print(sess.run(hello))
</code></pre>

<p>it ran as it should and output <code>Hello, TensorFlow!</code>, which indicates that the installation was successful indeed but there is something else that is wrong.</p>

<p>Do you know what the problem is and how to fix it?</p>",47227886.0,9,6,,2017-11-02 06:10:46.210000+00:00,235,2021-01-26 19:44:53.353000+00:00,2019-11-07 11:03:06.973000+00:00,,996815.0,,8977639.0,,1,709,tensorflow|cpu|avx,561680
34,48988778,Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6,"<p>When trying to run the Example CorDapp (<a href=""https://github.com/corda/cordapp-example"" rel=""noreferrer"">GitHub CorDapp</a>) via IntelliJ, I receive the following error:</p>
<blockquote>
<p>Cannot inline bytecode built with JVM target 1.8 into bytecode that is
being built with JVM target 1.6</p>
</blockquote>
<p>How can I modify the IntelliJ settings so that all the bytecode is built with the same JVM target?</p>",48988779.0,33,3,,2018-02-26 12:41:42.127000+00:00,82,2020-12-21 14:09:12.187000+00:00,2020-07-23 15:37:01.470000+00:00,,13363205.0,,4620025.0,,1,690,android|intellij-idea|kotlin|jvm|corda,165400
35,43871637,No 'Access-Control-Allow-Origin' header is present on the requested resource—when trying to get data from a REST API,"<p>I'm trying to fetch some data from the REST API of HP Alm. It works pretty well with a small curl script - I get my data.</p>

<p>Now doing that with JavaScript, fetch and ES6 (more or less) seems to be a bigger issue. I keep getting this error message:</p>

<blockquote>
  <p>Fetch API cannot load . Response to preflight request doesn't
  pass access control check: No 'Access-Control-Allow-Origin' header is
  present on the requested resource. Origin '<a href=""http://127.0.0.1:3000"" rel=""noreferrer"">http://127.0.0.1:3000</a>' is
  therefore not allowed access. The response had HTTP status code 501.
  If an opaque response serves your needs, set the request's mode to
  'no-cors' to fetch the resource with CORS disabled.</p>
</blockquote>

<p>I understand that this is because I am trying to fetch that data from within my localhost and the solution should be using CORS. Now I thought I actually did that, but somehow it either ignores what I write in the header or the problem is something else? </p>

<p>So, is there an implementation issue? Am I doing it wrong? I can't check the server logs unfortunately. I'm really a bit stuck here.</p>

<pre><code>function performSignIn() {

  let headers = new Headers();

  headers.append('Content-Type', 'application/json');
  headers.append('Accept', 'application/json');

  headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');
  headers.append('Access-Control-Allow-Credentials', 'true');

  headers.append('GET', 'POST', 'OPTIONS');

  headers.append('Authorization', 'Basic ' + base64.encode(username + "":"" + password));

  fetch(sign_in, {
      //mode: 'no-cors',
      credentials: 'include',
      method: 'POST',
      headers: headers
    })
    .then(response =&gt; response.json())
    .then(json =&gt; console.log(json))
    .catch(error =&gt; console.log('Authorization failed : ' + error.message));
}
</code></pre>

<p>I am using Chrome. I also tried using that Chrome CORS Plugin, but then I am getting another error message:</p>

<blockquote>
  <p>The value of the 'Access-Control-Allow-Origin' header in the response
  must not be the wildcard '*' when the request's credentials mode is
  'include'. Origin '<a href=""http://127.0.0.1:3000"" rel=""noreferrer"">http://127.0.0.1:3000</a>' is therefore not allowed
  access. The credentials mode of requests initiated by the
  XMLHttpRequest is controlled by the withCredentials attribute.</p>
</blockquote>",43881141.0,14,0,,2017-05-09 13:47:47.647000+00:00,411,2021-02-07 23:03:13.910000+00:00,2021-01-01 01:33:14.380000+00:00,,213269.0,,1331465.0,,1,679,javascript|cors|fetch-api|preflight|access-control-allow-origin,1643292
36,45022048,"Why does ""npm install"" rewrite package-lock.json?","<p>I just recently upgraded to <em>npm@5</em>.  I now have a <em>package-lock.json</em> file with everything from <em>package.json</em>.  I would expect that, when I run <code>npm install</code> that the dependency versions would be pulled from the lock file to determine what should be installed in my <em>node_modules</em> directory.  What's strange is that it actually ends up modifying and rewriting my <em>package-lock.json</em> file.</p>

<p>For example, the lock file had typescript specified to be at version <em>2.1.6</em>.  Then, after the <code>npm install</code> command, the version was changed to <em>2.4.1</em>.  That seems to defeat the whole purpose of a lock file.</p>

<p>What am I missing?  How do I get npm to actually respect my lock file?</p>",45566871.0,11,7,,2017-07-10 21:38:49.340000+00:00,128,2020-08-23 10:54:25.483000+00:00,2020-04-01 20:43:32.563000+00:00,,617950.0,,1141343.0,,1,672,node.js|npm|npm-install|package-lock.json,233742
37,42796887,Switch focus between editor and integrated terminal in Visual Studio Code,<p>Does anyone know the keyboard shortcut (Mac and Linux) to switch the focus between editor and integrated terminal in Visual Studio Code?</p>,43012779.0,18,5,,2017-03-14 21:29:52.673000+00:00,209,2021-02-13 17:42:47.500000+00:00,2020-04-08 06:22:25.307000+00:00,,711006.0,,859961.0,,1,670,visual-studio-code,152078
38,39632667,How do I kill the process currently using a port on localhost in Windows?,"<p>How can I remove the current process/application which is already assigned to a port?</p>

<p>For example: <code>localhost:8080</code></p>",39633428.0,20,1,,2016-09-22 07:19:51.100000+00:00,400,2021-02-06 18:43:48.247000+00:00,2020-01-20 09:21:58.440000+00:00,,63550.0,,3626371.0,,1,665,windows|cmd|localhost|port|command-prompt,1319616
39,50605219,Difference between npx and npm?,"<p>I have just started learning React, and Facebook helps in simplifying the initial setup by providing the <a href=""https://github.com/facebook/create-react-app"" rel=""noreferrer"">following ready-made project</a>.  </p>

<p>If I have to install the skeleton project I have to type <code>npx create-react-app my-app</code> in command-line.</p>

<p>I was wondering why does the Facebook in Github have <code>npx create-react-app my-app</code> rather than <code>npm create-react-app my-app</code>?</p>",52018825.0,7,3,,2018-05-30 12:51:54.103000+00:00,183,2020-12-12 01:35:13.300000+00:00,2020-05-15 20:34:57.163000+00:00,,2874896.0,,9279156.0,,1,660,javascript|npm|npx,231149
40,37300811,Android Studio: /dev/kvm device permission denied,"<p>When I try to run my Android app on an emulator I get this error: </p>

<blockquote>
  <p>/dev/kvm permission denied. </p>
</blockquote>

<p>I checked the permissions and added the user I am currently logged in with to the kvm group. What is wrong?</p>",,27,1,,2016-05-18 13:16:50.097000+00:00,177,2020-10-14 18:10:58.057000+00:00,2018-05-22 20:55:28.323000+00:00,,1788806.0,,6351152.0,,1,629,64-bit|ubuntu-14.04|kvm|android-studio-2.0|ubuntu-18.04,397088
41,42273853,"In Typescript, what is the ! (exclamation mark / bang) operator when dereferencing a member?","<p>When looking at the sourcecode for a tslint rule, I came across the following statement:</p>

<pre><code>if (node.parent!.kind === ts.SyntaxKind.ObjectLiteralExpression) {
    return;
}
</code></pre>

<p>Notice the <code>!</code> operator after <code>node.parent</code>. Interesting!</p>

<p>I first tried compiling the file locally with my currently installed version of TS (1.5.3). The resulting error pointed to the exact location of the bang:</p>

<pre><code>$ tsc --noImplicitAny memberAccessRule.ts 
noPublicModifierRule.ts(57,24): error TS1005: ')' expected.
</code></pre>

<p>Next I upgraded to the latest TS (2.1.6), which compiled it without issue. So it seems to be feature of TS 2.x. <strong>But</strong> the transpilation ignored the bang completely, resulting in the following JS:</p>

<pre><code>if (node.parent.kind === ts.SyntaxKind.ObjectLiteralExpression) {
    return;
}
</code></pre>

<p>My Google fu has thus far failed me. </p>

<p><strong><em>What is TS's exclamation mark operator, and how does it work?</em></strong></p>",42274019.0,3,0,,2017-02-16 12:22:26.833000+00:00,104,2020-10-14 08:42:03.650000+00:00,2017-05-10 11:21:38.580000+00:00,,289319.0,,289319.0,,1,622,typescript|tslint,188307
42,42964102,Syntax for async arrow function,"<p>I can mark a javascript function as ""async"" (i.e. returning a promise) with the <code>async</code> keyword.  Like this:</p>

<pre><code>async function foo() {
  // do something
}
</code></pre>

<p>What is the equivalent syntax for arrow functions?</p>",42964310.0,7,12,,2017-03-22 22:50:39.383000+00:00,105,2020-09-05 16:59:51.463000+00:00,2019-01-08 02:07:40.697000+00:00,,38765.0,,3769905.0,,1,617,javascript|promise|async-await|arrow-functions,315391
43,38718690,Huge number of files generated for every Angular project,"<p>I wanted to start a simple hello world app for Angular.</p>

<p>When I followed the instructions in the official <a href=""https://angular.io/docs/js/latest/quickstart.html"" rel=""noreferrer"">quickstart</a> the installation created 32,000 files in my project.</p>

<p>I figured this is some mistake or I missed something, so I decided to use <a href=""https://cli.angular.io/"" rel=""noreferrer"">angular-cli</a>, but after setting up the project I counted 41,000 files.</p>

<p>Where did I go wrong? Am I missing something really really obvious?</p>",38719154.0,14,25,,2016-08-02 11:04:31.423000+00:00,69,2019-08-22 02:12:04.950000+00:00,2017-03-08 16:14:57.277000+00:00,,577167.0,,998318.0,,1,616,javascript|angular,57870
44,38896424,TensorFlow not found using pip,"<p>I'm trying to install TensorFlow using pip:</p>
 <pre class=""lang-none prettyprint-override""><code>$ pip install tensorflow --user
Collecting tensorflow
Could not find a version that satisfies the requirement tensorflow (from versions: )
No matching distribution found for tensorflow
</code></pre>
<p>What am I doing wrong? So far I've used Python and pip with no issues.</p>",,53,14,,2016-08-11 12:28:24.660000+00:00,148,2021-02-05 04:16:12.300000+00:00,2021-01-30 02:51:04.447000+00:00,,3750257.0,user6574649,,,1,613,python|tensorflow|pip,753846
45,50333003,"Could not find module ""@angular-devkit/build-angular""","<p>After updating to Angular 6.0.1, I get the following error on <code>ng serve</code>:</p>

<pre><code>Could not find module ""@angular-devkit/build-angular"" from ""/home/Projects/myProjectName"".
Error: Could not find module ""@angular-devkit/build-angular"" from ""/home/Projects/myProjectName"".
    at Object.resolve (/home/Projects/myProjectName/node_modules/@angular-devkit/core/node/resolve.js:141:11)
    at Observable.rxjs_1.Observable [as _subscribe] (/home/Projects/myProjectName/node_modules/@angular-devkit/architect/src/architect.js:132:40)
</code></pre>

<p><code>ng update</code> says everything is in order. Deleting <code>node_modules</code> folder and a fresh <code>npm install</code> install did not help either. </p>

<p>My project is based on <a href=""https://github.com/akveo/ngx-admin"" rel=""noreferrer"">ng2-admin(Angular4 version)</a>. Here is my package.json dependecies:</p>

<pre><code> ""dependencies"": {
    ""@angular/animations"": ""^6.0.1"",
    ""@angular/common"": ""^6.0.1"",
    ""@angular/compiler"": ""^6.0.1"",
    ""@angular/core"": ""^6.0.1"",
    ""@angular/forms"": ""^6.0.1"",
    ""@angular/http"": ""^6.0.1"",
    ""@angular/platform-browser"": ""^6.0.1"",
    ""@angular/platform-browser-dynamic"": ""^6.0.1"",
    ""@angular/platform-server"": ""^6.0.1"",
    ""@angular/router"": ""^6.0.1"",
    ""@ng-bootstrap/ng-bootstrap"": ""1.0.0-alpha.26"",
    ""@ngx-translate/core"": ""^10.0.1"",
    ""@ngx-translate/http-loader"": ""^3.0.1"",
    ""amcharts3"": ""github:amcharts/amcharts3"",
    ""ammap3"": ""github:amcharts/ammap3"",
    ""angular-table"": ""^1.0.4"",
    ""angular2-csv"": ""^0.2.5"",
    ""angular2-datatable"": ""0.6.0"",
    ""animate.css"": ""3.5.2"",
    ""bootstrap"": ""4.0.0-alpha.6"",
    ""bower"": ""^1.8.4"",
    ""chart.js"": ""1.1.1"",
    ""chartist"": ""0.10.1"",
    ""chroma-js"": ""1.3.3"",
    ""ckeditor"": ""4.6.2"",
    ""core-js"": ""2.4.1"",
    ""easy-pie-chart"": ""2.1.7"",
    ""font-awesome"": ""4.7.0"",
    ""fullcalendar"": ""3.3.1"",
    ""google-maps"": ""3.2.1"",
    ""ionicons"": ""2.0.1"",
    ""jquery"": ""3.2.1"",
    ""jquery-slimscroll"": ""1.3.8"",
    ""leaflet"": ""0.7.7"",
    ""leaflet-map"": ""0.2.1"",
    ""lodash"": ""4.17.4"",
    ""ng2-ckeditor"": ""1.1.6"",
    ""ng2-completer"": ""^1.6.3"",
    ""ng2-handsontable"": ""^2.1.0-rc.3"",
    ""ng2-slim-loading-bar"": ""^4.0.0"",
    ""ng2-smart-table"": ""^1.0.3"",
    ""ng2-tree"": ""2.0.0-alpha.5"",
    ""ngx-uploader"": ""4.2.4"",
    ""normalize.css"": ""6.0.0"",
    ""roboto-fontface"": ""0.7.0"",
    ""rxjs"": ""^6.1.0"",
    ""rxjs-compat"": ""^6.1.0"",
    ""zone.js"": ""0.8.26""
  },
  ""devDependencies"": {
    ""@angular/cli"": ""^6.0.1"",
    ""@angular/compiler-cli"": ""^6.0.1"",
    ""@types/fullcalendar"": ""2.7.40"",
    ""@types/jasmine"": ""2.5.38"",
    ""@types/jquery"": ""2.0.41"",
    ""@types/jquery.slimscroll"": ""1.3.30"",
    ""@types/lodash"": ""4.14.61"",
    ""@types/node"": ""6.0.69"",
    ""codelyzer"": ""3.0.1"",
    ""gh-pages"": ""0.12.0"",
    ""jasmine-core"": ""2.5.2"",
    ""jasmine-spec-reporter"": ""3.2.0"",
    ""karma"": ""1.4.1"",
    ""karma-chrome-launcher"": ""2.0.0"",
    ""karma-cli"": ""1.0.1"",
    ""karma-coverage-istanbul-reporter"": ""0.2.0"",
    ""karma-jasmine"": ""1.1.0"",
    ""karma-jasmine-html-reporter"": ""0.2.2"",
    ""npm-run-all"": ""4.0.2"",
    ""protractor"": ""5.1.0"",
    ""rimraf"": ""2.6.1"",
    ""standard-changelog"": ""1.0.1"",
    ""stylelint"": ""7.10.1"",
    ""ts-node"": ""2.1.2"",
    ""tslint"": ""5.2.0"",
    ""tslint-eslint-rules"": ""4.0.0"",
    ""tslint-language-service"": ""0.9.6"",
    ""typescript"": ""^2.7.2"",
    ""typogr"": ""0.6.6"",
    ""underscore"": ""1.8.3"",
    ""wintersmith"": ""2.2.5"",
    ""wintersmith-sassy"": ""1.1.0""
  }
</code></pre>

<p>and my angular.json:</p>

<pre><code>{
  ""$schema"": ""./node_modules/@angular/cli/lib/config/schema.json"",
  ""version"": 1,
  ""newProjectRoot"": ""projects"",
  ""projects"": {
    ""ng2-admin"": {
      ""root"": """",
      ""sourceRoot"": ""src"",
      ""projectType"": ""application"",
      ""architect"": {
        ""build"": {
          ""builder"": ""@angular-devkit/build-angular:browser"",
          ""options"": {
            ""outputPath"": ""dist"",
            ""index"": ""src/index.html"",
            ""main"": ""src/main.ts"",
            ""tsConfig"": ""src/tsconfig.app.json"",
            ""polyfills"": ""src/polyfills.ts"",
            ""assets"": [
              ""src/assets"",
              ""src/favicon.ico""
            ],
            ""styles"": [
              ""node_modules/roboto-fontface/css/roboto/sass/roboto-fontface.scss"",
              ""node_modules/normalize.css/normalize.css"",
              ""node_modules/font-awesome/scss/font-awesome.scss"",
              ""node_modules/ionicons/scss/ionicons.scss"",
              ""node_modules/bootstrap/scss/bootstrap.scss"",
              ""node_modules/leaflet/dist/leaflet.css"",
              ""node_modules/chartist/dist/chartist.css"",
              ""node_modules/fullcalendar/dist/fullcalendar.css"",
              ""node_modules/handsontable/dist/handsontable.full.css"",
              ""node_modules/ng2-slim-loading-bar/style.css"",
              ""src/app/theme/theme.scss"",
              ""src/styles.scss""
            ],
            ""scripts"": [
              ""node_modules/jquery/dist/jquery.js"",
              ""node_modules/easy-pie-chart/dist/jquery.easypiechart.js"",
              ""node_modules/jquery-slimscroll/jquery.slimscroll.js"",
              ""node_modules/tether/dist/js/tether.js"",
              ""node_modules/bootstrap/dist/js/bootstrap.js"",
              ""node_modules/handsontable/dist/handsontable.full.js"",
              ""node_modules/chroma-js/chroma.js""
            ]
          },
          ""configurations"": {
            ""production"": {
              ""optimization"": true,
              ""outputHashing"": ""all"",
              ""sourceMap"": false,
              ""extractCss"": true,
              ""namedChunks"": false,
              ""aot"": true,
              ""extractLicenses"": true,
              ""vendorChunk"": false,
              ""buildOptimizer"": true,
              ""fileReplacements"": [
                {
                  ""replace"": ""src/environments/environment.ts"",
                  ""with"": ""src/environments/environment.prod.ts""
                }
              ]
            }
          }
        },
        ""serve"": {
          ""builder"": ""@angular-devkit/build-angular:dev-server"",
          ""options"": {
            ""browserTarget"": ""ng2-admin:build""
          },
          ""configurations"": {
            ""production"": {
              ""browserTarget"": ""ng2-admin:build:production""
            }
          }
        },
        ""extract-i18n"": {
          ""builder"": ""@angular-devkit/build-angular:extract-i18n"",
          ""options"": {
            ""browserTarget"": ""ng2-admin:build""
          }
        },
        ""test"": {
          ""builder"": ""@angular-devkit/build-angular:karma"",
          ""options"": {
            ""main"": ""src/test.ts"",
            ""karmaConfig"": ""./karma.conf.js"",
            ""polyfills"": ""src/polyfills.ts"",
            ""tsConfig"": ""src/tsconfig.spec.json"",
            ""scripts"": [
              ""node_modules/jquery/dist/jquery.js"",
              ""node_modules/easy-pie-chart/dist/jquery.easypiechart.js"",
              ""node_modules/jquery-slimscroll/jquery.slimscroll.js"",
              ""node_modules/tether/dist/js/tether.js"",
              ""node_modules/bootstrap/dist/js/bootstrap.js"",
              ""node_modules/handsontable/dist/handsontable.full.js"",
              ""node_modules/chroma-js/chroma.js""
            ],
            ""styles"": [
              ""node_modules/roboto-fontface/css/roboto/sass/roboto-fontface.scss"",
              ""node_modules/normalize.css/normalize.css"",
              ""node_modules/font-awesome/scss/font-awesome.scss"",
              ""node_modules/ionicons/scss/ionicons.scss"",
              ""node_modules/bootstrap/scss/bootstrap.scss"",
              ""node_modules/leaflet/dist/leaflet.css"",
              ""node_modules/chartist/dist/chartist.css"",
              ""node_modules/fullcalendar/dist/fullcalendar.css"",
              ""node_modules/handsontable/dist/handsontable.full.css"",
              ""node_modules/ng2-slim-loading-bar/style.css"",
              ""src/app/theme/theme.scss"",
              ""src/styles.scss""
            ],
            ""assets"": [
              ""src/assets"",
              ""src/favicon.ico""
            ]
          }
        },
        ""lint"": {
          ""builder"": ""@angular-devkit/build-angular:tslint"",
          ""options"": {
            ""tsConfig"": [
              ""src/tsconfig.app.json"",
              ""src/tsconfig.spec.json""
            ],
            ""exclude"": []
          }
        }
      }
    },
    ""ng2-admin-e2e"": {
      ""root"": """",
      ""sourceRoot"": """",
      ""projectType"": ""application"",
      ""architect"": {
        ""e2e"": {
          ""builder"": ""@angular-devkit/build-angular:protractor"",
          ""options"": {
            ""protractorConfig"": ""./protractor.conf.js"",
            ""devServerTarget"": ""ng2-admin:serve""
          }
        },
        ""lint"": {
          ""builder"": ""@angular-devkit/build-angular:tslint"",
          ""options"": {
            ""tsConfig"": [
              ""e2e/tsconfig.e2e.json""
            ],
            ""exclude"": []
          }
        }
      }
    }
  },
  ""defaultProject"": ""ng2-admin"",
  ""schematics"": {
    ""@schematics/angular:component"": {
      ""prefix"": ""app"",
      ""styleext"": ""scss""
    },
    ""@schematics/angular:directive"": {
      ""prefix"": ""app""
    }
  }
}
</code></pre>",50333128.0,47,1,,2018-05-14 14:38:46.117000+00:00,137,2021-02-04 17:12:03.867000+00:00,2020-04-13 16:35:44.663000+00:00,,3486691.0,,3486691.0,,1,612,angular|angular-cli|angular6|angular-cli-v6,1015655
46,37949981,Call child method from parent,"<p>I have two components:</p>
<ol>
<li>Parent component</li>
<li>Child component</li>
</ol>
<p>I was trying to call Child's method from Parent, I tried this way but couldn't get a result:</p>
<pre><code>class Parent extends Component {
  render() {
    return (
      &lt;Child&gt;
        &lt;button onClick={Child.getAlert()}&gt;Click&lt;/button&gt;
      &lt;/Child&gt;
      );
    }
  }

class Child extends Component {
  getAlert() {
    alert('clicked');
  }
 
  render() {
    return (
      &lt;h1 ref=&quot;hello&quot;&gt;Hello&lt;/h1&gt;
    );
  }
}
</code></pre>
<p>Is there a way to call Child's method from Parent?</p>
<p>Note: Child and Parent components are in two different files.</p>",37950970.0,18,3,,2016-06-21 16:34:48.777000+00:00,187,2021-01-27 10:41:26.307000+00:00,2020-12-17 17:50:18.920000+00:00,,468632.0,,2299167.0,,1,608,javascript|reactjs,426021
47,43027980,"Purpose of ""%matplotlib inline""",<p>Could someone explain to me what exactly is the use of <code>%matplotlib inline</code>? </p>,,10,3,,2017-03-26 11:11:36.967000+00:00,167,2020-04-18 12:28:05.290000+00:00,2020-03-25 20:04:07.667000+00:00,,2142994.0,,7659166.0,,1,608,python|matplotlib|jupyter-notebook|ipython,537544
48,57456188,Why is the result of ('b'+'a'+ + 'a' + 'a').toLowerCase() 'banana'?,"<p>I was practicing some JavaScript when one of my friends came across this JavaScript code:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.write(('b' + 'a' + + 'a' + 'a').toLowerCase());</code></pre>
</div>
</div>
</p>

<p>The above code answers <code>""banana""</code>!
Can anyone explain why?</p>",57456236.0,8,7,,2019-08-12 05:50:43.860000+00:00,104,2020-12-30 03:42:42.890000+00:00,2019-08-24 23:24:31.470000+00:00,,4076315.0,,6271167.0,,1,606,javascript|type-conversion,85204
49,35979642,"What is git tag, How to create tags & How to checkout git remote tag(s)","<p>when I checkout remote git tag use command like this:</p>

<pre><code>git checkout -b local_branch_name origin/remote_tag_name
</code></pre>

<p>I got error like this:</p>

<pre><code>error: pathspec `origin/remote_tag_name` did not match any file(s) known to git.
</code></pre>

<p>I can find remote_tag_name when I use git tag command.</p>",35979751.0,5,1,,2016-03-14 04:38:50.963000+00:00,245,2021-01-15 09:48:13.890000+00:00,2018-11-09 22:52:43.760000+00:00,,1755598.0,,4591230.0,,1,591,git|git-checkout|git-tag,702044
50,52522566,,"<p>The problem is that Xcode Command-line Tools needs to be updated.</p>
<p><strong>Solution #1</strong></p>
<p>Go back to your terminal and enter:</p>
<pre><code>xcode-select --install
</code></pre>
<p>You'll then receive the following output:</p>
<pre><code>xcode-select: note: install requested for command line developer tools
</code></pre>
<p>You will then be prompted in a window to update Xcode Command Line tools. (which may take a while)</p>
<p>Open a new terminal window and your development tools should be returned.</p>
<p><strong>Addition:</strong> With any major or semi-major update you'll need to update the command line tools in order to get them functioning properly again. Check Xcode with any update. This goes beyond Mojave...</p>
<p><strong>After that restart your terminal</strong></p>
<p>Alternatively, <strong>IF that fails,</strong> and it very well might.... you'll get a pop-up box saying &quot;Software not found on server&quot;, see below!</p>
<p><strong>Solution #2</strong></p>
<p>and you hit <code>xcode-select --install</code> and it doesn't find the software, log into Apple Developer, and install it via webpage.</p>
<p>Login or sign up here:</p>
<p><a href=""https://developer.apple.com/download/more/"" rel=""noreferrer"">https://developer.apple.com/download/more/</a></p>
<p>Look for: <strong>&quot;Command Line Tools for Xcode 12.x&quot;</strong> in the list of downloads
Then click the dmg and download.</p>
<p><a href=""https://i.stack.imgur.com/WwAlF.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/WwAlF.png"" alt=""image of apple developer page and dmg for DL"" /></a></p>",,,35,,2018-09-26 16:43:18.797000+00:00,,2020-12-16 15:16:46.140000+00:00,2020-12-16 15:16:46.140000+00:00,,8221725.0,,8221725.0,52522565,2,3437,,
51,48270314,,"<p>If you take advantage of <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using"" rel=""noreferrer"">how <code>==</code> works</a>, you could simply create an object with a custom <code>toString</code> (or <code>valueOf</code>) function that changes what it returns each time it is used such that it satisfies all three conditions.</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const a = {
  i: 1,
  toString: function () {
    return a.i++;
  }
}

if(a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3) {
  console.log('Hello World!');
}</code></pre>
</div>
</div>
</p>

<hr>

<p>The reason this works is due to the use of the loose equality operator. When using loose equality, if one of the operands is of a different type than the other, the engine will attempt to convert one to the other. In the case of an object on the left and a number on the right, it will attempt to convert the object to a number by first calling <code>valueOf</code> if it is callable, and failing that, it will call <code>toString</code>. I used <code>toString</code> in this case simply because it's what came to mind, <code>valueOf</code> would make more sense. If I instead returned a string from <code>toString</code>, the engine would have then attempted to convert the string to a number giving us the same end result, though with a slightly longer path.</p>",,,19,,2018-01-15 20:35:15.337000+00:00,,2018-01-18 23:07:07.953000+00:00,2018-01-18 23:07:07.953000+00:00,,4020527.0,,400654.0,48270127,2,3374,,
52,39914235,,"<h2>2017 — 2021 update</h2>
<p>Since 2009 when this question was asked, JavaScript has evolved significantly. All other answers are now obsolete or overly complicated. Here is the current best practice:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function sleep(ms) {
  return new Promise(resolve =&gt; setTimeout(resolve, ms));
}

async function demo() {
  console.log('Taking a break...');
  await sleep(2000);
  console.log('Two seconds later, showing sleep in a loop...');

  // Sleep in loop
  for (let i = 0; i &lt; 5; i++) {
    if (i === 3)
      await sleep(2000);
    console.log(i);
  }
}

demo();</code></pre>
</div>
</div>
</p>
<h3>This is it. <code>await sleep(&lt;duration&gt;)</code>.</h3>
<p>Or as a one-liner:</p>
<pre><code>await new Promise(r =&gt; setTimeout(r, 2000));
</code></pre>
<p>Note that,</p>
<ol>
<li><code>await</code> can only be executed in functions prefixed with the <code>async</code> keyword, or at the top level of your script in <a href=""https://stackoverflow.com/questions/46515764/how-can-i-use-async-await-at-the-top-level/56590390#56590390"">an increasing number of environments</a>.</li>
<li><code>await</code> only pauses the current <code>async</code> function. This means it's not blocking the execution of the rest of the script, which is what you want in the vast majority of the cases. If you do want a blocking construct, see <a href=""https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep/56406126#56406126"">this answer</a> using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics"" rel=""noreferrer""><code>Atomics</code></a><code>.wait</code>, but note that most browsers will not allow it on the browser's main thread.</li>
</ol>
<p>Two new JavaScript features (as of 2017) helped write this &quot;sleep&quot; function:</p>
<ul>
<li><a href=""https://ponyfoo.com/articles/es6-promises-in-depth"" rel=""noreferrer"">Promises, a native feature of ES2015</a> (aka ES6). We also use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"" rel=""noreferrer"">arrow functions</a> in the definition of the sleep function.</li>
<li>The <a href=""https://ponyfoo.com/articles/understanding-javascript-async-await"" rel=""noreferrer""><code>async/await</code></a> feature lets the code explicitly wait for a promise to settle (resolve or reject).</li>
</ul>
<h2>Compatibility</h2>
<ul>
<li>promises are supported <a href=""http://node.green/#Promise"" rel=""noreferrer"">in Node v0.12+</a> and <a href=""http://caniuse.com/#feat=promises"" rel=""noreferrer"">widely supported in browsers</a>, except IE</li>
<li><code>async</code>/<code>await</code> landed in V8 and has been <a href=""https://developers.google.com/web/fundamentals/getting-started/primers/async-functions"" rel=""noreferrer"">enabled by default since Chrome 55</a> (released in Dec 2016)
<ul>
<li>it landed <a href=""https://blog.risingstack.com/async-await-node-js-7-nightly/"" rel=""noreferrer"">in Node 7 in October 2016</a></li>
<li>and also landed <a href=""https://blog.nightly.mozilla.org/2016/11/01/async-await-support-in-firefox/"" rel=""noreferrer"">in Firefox Nightly in November 2016</a></li>
</ul>
</li>
</ul>
<p>If for some weird reason you're using Node older than 7 (which has reached <a href=""https://github.com/nodejs/Release"" rel=""noreferrer"">end of life</a>), or are targeting old browsers, <code>async</code>/<code>await</code> can still be used via <a href=""https://babeljs.io/"" rel=""noreferrer"">Babel</a> (a tool that will <a href=""https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/"" rel=""noreferrer"">transpile</a> JavaScript + new features into plain old JavaScript), with the <a href=""https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator"" rel=""noreferrer""><code>transform-async-to-generator</code></a> plugin.</p>",,,27,,2016-10-07 09:44:56.400000+00:00,,2021-02-08 05:53:42.463000+00:00,2021-02-08 05:53:42.463000+00:00,,1269037.0,,1269037.0,951021,2,3246,,
53,37576787,,"<p>Sure the code does work, but I'm pretty sure it doesn't do what you expect it to do. It just fires off multiple asynchronous calls, but the <code>printFiles</code> function does immediately return after that.</p>

<h3>Reading in sequence</h3>

<p>If you want to read the files in sequence, <strong>you cannot use <code>forEach</code></strong> indeed. Just use a modern <code>for … of</code> loop instead, in which <code>await</code> will work as expected:</p>

<pre><code>async function printFiles () {
  const files = await getFilePaths();

  for (const file of files) {
    const contents = await fs.readFile(file, 'utf8');
    console.log(contents);
  }
}
</code></pre>

<h3>Reading in parallel</h3>

<p>If you want to read the files in parallel, <strong>you cannot use <code>forEach</code></strong> indeed. Each of the <code>async</code> callback function calls does return a promise, but you're throwing them away instead of awaiting them. Just use <code>map</code> instead, and you can await the array of promises that you'll get with <code>Promise.all</code>:</p>

<pre><code>async function printFiles () {
  const files = await getFilePaths();

  await Promise.all(files.map(async (file) =&gt; {
    const contents = await fs.readFile(file, 'utf8')
    console.log(contents)
  }));
}
</code></pre>",,,32,,2016-06-01 19:02:09.033000+00:00,,2020-02-08 23:30:30.070000+00:00,2020-02-08 23:30:30.070000+00:00,,2697506.0,,1048572.0,37576685,2,3017,,
54,37938036,,"<p>The default behavior has changed since Git 2.9:</p>

<blockquote>
  <p>""git merge"" used to allow merging two branches that have no common
     base by default, which led to a brand new history of an existing
     project created and then get pulled by an unsuspecting maintainer,
     which allowed an unnecessary parallel history merged into the
     existing project. The command has been taught <strong>not to allow this by
     default</strong>, with an escape hatch <code>--allow-unrelated-histories</code> option
     to be used in a rare event that merges histories of two projects
     that started their lives independently.</p>
</blockquote>

<p>See the <a href=""https://github.com/git/git/blob/master/Documentation/RelNotes/2.9.0.txt#L58-L68"" rel=""noreferrer"">Git release changelog</a> for more information.</p>

<p>You can use <code>--allow-unrelated-histories</code> to force the merge to happen.</p>",,,9,,2016-06-21 07:26:25.087000+00:00,,2019-06-05 11:29:02.397000+00:00,2019-06-05 11:29:02.397000+00:00,,63550.0,,440564.0,37937984,2,2959,,
55,38723094,,"<p>When you [single-]click a file in the left sidebar's file browser or open it from the quick open menu (<kbd>Ctrl</kbd>-<kbd>P</kbd>, type the file name, <kbd>Enter</kbd>), Visual Studio Code opens it in what's called ""Preview Mode"", which allows you to quickly <strong>view</strong> files.</p>

<p>Preview Mode tabs are not kept open. As soon as you go to open another file from the sidebar, the existing Preview Mode tab (if one exists) is used. You can determine if a tab is in Preview Mode, by looking at its title in the tab bar. If the title is <em>italic</em>, the tab is in preview mode.</p>

<p>To open a file for editing (i.e. don't open in Preview Mode), double-click on the file in the sidebar, or single-click it in the sidebar then double click the title of its Preview Mode tab.</p>

<p>If you want to disable Preview Mode all together, you can do so by setting <code>""workbench.editor.enablePreview"": false</code> in your settings file. You can also use the <code>""workbench.editor.enablePreviewFromQuickOpen""</code> option to disable it only from the quick open menu.</p>

<p>Before you can disable Preview Mode, you'll need to open your <a href=""https://code.visualstudio.com/docs/customization/userandworkspace#_settings-file-locations"" rel=""noreferrer"">Settings File</a>.</p>

<p><strong>Pro Tip</strong>: You can use the <a href=""https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette"" rel=""noreferrer"">Command Palette</a>(shortcut Ctrl+Shift+P) to open your settings file, just enter ""<code>Preferences: Open User Settings</code>""!</p>

<p>Once you've opened your settings file (<em>your</em> settings file should be located on the right), add the <code>""workbench.editor.enablePreview""</code> property, and set its value to <code>false</code>.</p>

<p>You can learn more about Visual Studio Code's ""Preview Mode"", <a href=""https://code.visualstudio.com/docs/editor/tabs#_preview-mode"" rel=""noreferrer"">here</a>.</p>",,,10,,2016-08-02 14:22:10.533000+00:00,,2020-05-21 00:50:53.947000+00:00,2020-05-21 00:50:53.947000+00:00,,52277.0,,6052290.0,38713405,2,2823,,
56,50834600,,"<p>According to <a href=""https://developer.android.com/training/articles/security-config#CleartextTrafficPermitted"" rel=""noreferrer"">Network security configuration</a> - </p>

<blockquote>
  <p>Starting with Android 9 (API level 28), cleartext support is disabled
  by default.</p>
</blockquote>

<p>Also have a look at - <a href=""https://koz.io/android-m-and-the-war-on-cleartext-traffic/"" rel=""noreferrer"">https://koz.io/android-m-and-the-war-on-cleartext-traffic/</a></p>

<p>Codelabs explanation - <a href=""https://codelabs.developers.google.com/codelabs/android-network-security-config/index.html"" rel=""noreferrer"">https://codelabs.developers.google.com/codelabs/android-network-security-config/index.html</a></p>

<p><strong>Option 1 -</strong></p>

<p>First try hitting the URL with ""https://"" instead of ""http://""</p>

<p><strong>Option 2 -</strong> </p>

<p>Create file res/xml/network_security_config.xml - </p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;network-security-config&gt;
    &lt;domain-config cleartextTrafficPermitted=""true""&gt;
        &lt;domain includeSubdomains=""true""&gt;api.example.com(to be adjusted)&lt;/domain&gt;
    &lt;/domain-config&gt;
&lt;/network-security-config&gt;
</code></pre>

<p>AndroidManifest.xml - </p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest ...&gt;
    &lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
    &lt;application
        ...
        android:networkSecurityConfig=""@xml/network_security_config""
        ...&gt;
        ...
    &lt;/application&gt;
&lt;/manifest&gt;
</code></pre>

<p><strong>Option 3 -</strong> </p>

<p><a href=""https://developer.android.com/guide/topics/manifest/application-element#usesCleartextTraffic"" rel=""noreferrer"">android:usesCleartextTraffic Doc</a></p>

<p>AndroidManifest.xml - </p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest ...&gt;
    &lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
    &lt;application
        ...
        android:usesCleartextTraffic=""true""
        ...&gt;
        ...
    &lt;/application&gt;
&lt;/manifest&gt;
</code></pre>

<p>Also as <a href=""https://stackoverflow.com/a/45955297/7599300"">@david.s' answer</a> pointed out <code>android:targetSandboxVersion</code> can be a problem too -</p>

<p>According to <a href=""https://developer.android.com/guide/topics/manifest/manifest-element#targetSandboxVersion"" rel=""noreferrer"">Manifest Docs</a> - </p>

<blockquote>
  <p><code>android:targetSandboxVersion</code></p>
  
  <p>The target sandbox for this app to use. The higher the sandbox version
  number, the higher the level of security. Its default value is 1; you
  can also set it to 2. Setting this attribute to 2 switches the app to
  a different SELinux sandbox. The following restrictions apply to a
  level 2 sandbox:</p>
  
  <ul>
  <li>The default value of <code>usesCleartextTraffic</code> in the Network Security    Config is false.</li>
  <li>Uid sharing is not permitted.</li>
  </ul>
</blockquote>

<p><strong>So Option 4 -</strong> </p>

<p>If you have <code>android:targetSandboxVersion</code> in <code>&lt;manifest&gt;</code> then reduce it to <code>1</code></p>

<p>AndroidManifest.xml - </p>

<pre><code>&lt;?xml version=""1.0"" encoding=""utf-8""?&gt;
&lt;manifest android:targetSandboxVersion=""1""&gt;
    &lt;uses-permission android:name=""android.permission.INTERNET"" /&gt;
    ...
&lt;/manifest&gt;
</code></pre>",,,41,,2018-06-13 10:11:09.213000+00:00,,2020-01-13 15:17:22.233000+00:00,2020-01-13 15:17:22.233000+00:00,,3302026.0,,3302026.0,45940861,2,2644,,
57,36796281,,"<p>This is a <strong>default import</strong>:</p>

<pre><code>// B.js
import A from './A'
</code></pre>

<p>It only works if <code>A</code> has the <strong>default export</strong>:</p>

<pre><code>// A.js
export default 42
</code></pre>

<p>In this case it doesn’t matter what name you assign to it when importing:</p>

<pre><code>// B.js
import A from './A'
import MyA from './A'
import Something from './A'
</code></pre>

<p>Because it will always resolve to whatever is the <strong>default export</strong> of <code>A</code>.</p>

<hr>

<p>This is a <strong>named import called <code>A</code></strong>:</p>

<pre><code>import { A } from './A'
</code></pre>

<p>It only works if <code>A</code> contains a <strong>named export called <code>A</code></strong>:</p>

<pre><code>export const A = 42
</code></pre>

<p>In this case the name matters because you’re importing <strong>a specific thing by its export name</strong>:</p>

<pre><code>// B.js
import { A } from './A'
import { myA } from './A' // Doesn't work!
import { Something } from './A' // Doesn't work!
</code></pre>

<p>To make these work, you would add a <strong>corresponding named export</strong> to <code>A</code>:</p>

<pre><code>// A.js
export const A = 42
export const myA = 43
export const Something = 44
</code></pre>

<hr>

<p>A module can only have <strong>one default export</strong>, but <strong>as many named exports as you'd like</strong> (zero, one, two, or many). You can import them all together:</p>

<pre><code>// B.js
import A, { myA, Something } from './A'
</code></pre>

<p>Here, we import the default export as <code>A</code>, and named exports called <code>myA</code> and <code>Something</code>, respectively.</p>

<pre><code>// A.js
export default 42
export const myA = 43
export const Something = 44
</code></pre>

<p>We can also assign them all different names when importing:</p>

<pre><code>// B.js
import X, { myA as myX, Something as XSomething } from './A'
</code></pre>

<hr>

<p>The default exports tend to be used for whatever you normally expect to get from the module. The named exports tend to be used for utilities that might be handy, but aren’t always necessary. However it is up to you to choose how to export things: for example, a module might have no default export at all.</p>

<p><a href=""http://www.2ality.com/2014/09/es6-modules-final.html"" rel=""noreferrer"">This is a great guide to ES modules, explaining the difference between default and named exports.</a></p>",,,18,,2016-04-22 14:19:01.617000+00:00,,2017-06-30 15:08:59.273000+00:00,2017-06-30 15:08:59.273000+00:00,,5423108.0,,458193.0,36795819,2,2595,,
58,38896469,,"<p>Yes, that's it. In the <em>app.module.ts</em> file, I just added:</p>
<pre><code>import { FormsModule } from '@angular/forms';

[...]

@NgModule({
  imports: [
    [...]
    FormsModule
  ],
  [...]
})
</code></pre>",,,12,,2016-08-11 12:30:09.227000+00:00,,2020-12-17 09:04:22.860000+00:00,2020-12-17 09:04:22.860000+00:00,,63550.0,,3433751.0,38892771,2,2181,,
59,38139500,,"<p><strong>TL;DR</strong></p>
<blockquote>
<p>Transient objects are always different; a new instance is provided to
every controller and every service.</p>
<p>Scoped objects are the same within a request, but different across
different requests.</p>
<p>Singleton objects are the same for every object and every request.</p>
</blockquote>
<p>For more clarification, this example from <a href=""https://docs.microsoft.com/dotnet/core/extensions/dependency-injection-usage"" rel=""noreferrer"">.NET documentation</a> shows the difference:</p>
<p>To demonstrate the difference between these lifetime and registration options, consider a simple interface that represents one or more tasks as an operation with a unique identifier, <code>OperationId</code>. Depending on how we configure the lifetime for this service, the container will provide either the same or different instances of the service to the requesting class. To make it clear which lifetime is being requested, we will create one type per lifetime option:</p>
<pre><code>using System;

namespace DependencyInjectionSample.Interfaces
{
    public interface IOperation
    {
        Guid OperationId { get; }
    }

    public interface IOperationTransient : IOperation
    {
    }

    public interface IOperationScoped : IOperation
    {
    }

    public interface IOperationSingleton : IOperation
    {
    }

    public interface IOperationSingletonInstance : IOperation
    {
    }
}
</code></pre>
<p>We implement these interfaces using a single class, <code>Operation</code>, that accepts a GUID in its constructor, or uses a new GUID if none is provided:</p>
<pre><code>using System;
using DependencyInjectionSample.Interfaces;
namespace DependencyInjectionSample.Classes
{
    public class Operation : IOperationTransient, IOperationScoped, IOperationSingleton, IOperationSingletonInstance
    {
        Guid _guid;
        public Operation() : this(Guid.NewGuid())
        {

        }

        public Operation(Guid guid)
        {
            _guid = guid;
        }

        public Guid OperationId =&gt; _guid;
    }
}
</code></pre>
<p>Next, in <code>ConfigureServices</code>, each type is added to the container according to its named lifetime:</p>
<pre><code>services.AddTransient&lt;IOperationTransient, Operation&gt;();
services.AddScoped&lt;IOperationScoped, Operation&gt;();
services.AddSingleton&lt;IOperationSingleton, Operation&gt;();
services.AddSingleton&lt;IOperationSingletonInstance&gt;(new Operation(Guid.Empty));
services.AddTransient&lt;OperationService, OperationService&gt;();
</code></pre>
<p>Note that the <code>IOperationSingletonInstance</code> service is using a specific instance with a known ID of <code>Guid.Empty</code>, so it will be clear when this type is in use. We have also registered an <code>OperationService</code> that depends on each of the other <code>Operation</code> types, so that it will be clear within a request whether this service is getting the same instance as the controller, or a new one, for each operation type. All this service does is expose its dependencies as properties, so they can be displayed in the view.</p>
<pre><code>using DependencyInjectionSample.Interfaces;

namespace DependencyInjectionSample.Services
{
    public class OperationService
    {
        public IOperationTransient TransientOperation { get; }
        public IOperationScoped ScopedOperation { get; }
        public IOperationSingleton SingletonOperation { get; }
        public IOperationSingletonInstance SingletonInstanceOperation { get; }

        public OperationService(IOperationTransient transientOperation,
            IOperationScoped scopedOperation,
            IOperationSingleton singletonOperation,
            IOperationSingletonInstance instanceOperation)
        {
            TransientOperation = transientOperation;
            ScopedOperation = scopedOperation;
            SingletonOperation = singletonOperation;
            SingletonInstanceOperation = instanceOperation;
        }
    }
}
</code></pre>
<p>To demonstrate the object lifetimes within and between separate individual requests to the application, the sample includes an <code>OperationsController</code> that requests each kind of <code>IOperation</code> type as well as an <code>OperationService</code>. The <code>Index</code> action then displays all of the controller’s and service’s <code>OperationId</code> values.</p>
<pre><code>using DependencyInjectionSample.Interfaces;
using DependencyInjectionSample.Services;
using Microsoft.AspNetCore.Mvc;

namespace DependencyInjectionSample.Controllers
{
    public class OperationsController : Controller
    {
        private readonly OperationService _operationService;
        private readonly IOperationTransient _transientOperation;
        private readonly IOperationScoped _scopedOperation;
        private readonly IOperationSingleton _singletonOperation;
        private readonly IOperationSingletonInstance _singletonInstanceOperation;

        public OperationsController(OperationService operationService,
            IOperationTransient transientOperation,
            IOperationScoped scopedOperation,
            IOperationSingleton singletonOperation,
            IOperationSingletonInstance singletonInstanceOperation)
        {
            _operationService = operationService;
            _transientOperation = transientOperation;
            _scopedOperation = scopedOperation;
            _singletonOperation = singletonOperation;
            _singletonInstanceOperation = singletonInstanceOperation;
        }

        public IActionResult Index()
        {
            // ViewBag contains controller-requested services
            ViewBag.Transient = _transientOperation;
            ViewBag.Scoped = _scopedOperation;
            ViewBag.Singleton = _singletonOperation;
            ViewBag.SingletonInstance = _singletonInstanceOperation;

            // Operation service has its own requested services
            ViewBag.Service = _operationService;
            return View();
        }
    }
}
</code></pre>
<p>Now two separate requests are made to this controller action:</p>
<p><a href=""https://i.stack.imgur.com/ilUB6.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/ilUB6.png"" alt=""First Request"" /></a></p>
<p><a href=""https://i.stack.imgur.com/X2QCd.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/X2QCd.png"" alt=""Second Request"" /></a></p>
<p>Observe which of the <code>OperationId</code> values varies within a request, and between requests.</p>
<ul>
<li><p>Transient objects are always different; a new instance is provided to every controller and every service.</p>
</li>
<li><p>Scoped objects are the same within a request, but different across different requests</p>
</li>
<li><p>Singleton objects are the same for every object and every request (regardless of whether an instance is provided in <code>ConfigureServices</code>)</p>
</li>
</ul>",,,9,,2016-07-01 07:27:11.177000+00:00,,2020-10-29 15:03:09.950000+00:00,2020-10-29 15:03:09.950000+00:00,,2410379.0,,3795379.0,38138100,2,2102,,
60,48274520,,"<p>I couldn't resist - the other answers are undoubtedly true, but you really can't walk past the following code:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var aﾠ = 1;
var a = 2;
var ﾠa = 3;
if(aﾠ==1 &amp;&amp; a== 2 &amp;&amp;ﾠa==3) {
    console.log(""Why hello there!"")
}</code></pre>
</div>
</div>
</p>

<p>Note the weird spacing in the <code>if</code> statement (that I copied from your question). It is the half-width Hangul (that's Korean for those not familiar) which is an Unicode space character that is not interpreted by ECMA script as a space character - this means that it is a valid character for an identifier. Therefore there are three completely different variables, one with the Hangul after the a, one with it before and the last one with just a. Replacing the space with <code>_</code> for readability, the same code would look like this:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var a_ = 1;
var a = 2;
var _a = 3;
if(a_==1 &amp;&amp; a== 2 &amp;&amp;_a==3) {
    console.log(""Why hello there!"")
}</code></pre>
</div>
</div>
</p>

<p>Check out <a href=""https://mothereff.in/js-variables#%EF%BE%A0%E1%85%A0%E1%85%9F"" rel=""noreferrer"">the validation on Mathias' variable name validator</a>. If that weird spacing was actually included in their question, I feel sure that it's a hint for this kind of answer.</p>

<p>Don't do this. Seriously.</p>

<p>Edit: It has come to my attention that (although not allowed to start a variable) the <a href=""https://en.wikipedia.org/wiki/Zero-width_joiner"" rel=""noreferrer"">Zero-width joiner</a> and <a href=""https://en.wikipedia.org/wiki/Zero-width_non-joiner"" rel=""noreferrer"">Zero-width non-joiner</a> characters are also permitted in variable names - see <a href=""https://reverseengineering.stackexchange.com/q/53"">Obfuscating JavaScript with zero-width characters - pros and cons?</a>.</p>

<p>This would look like the following:</p>

<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var a= 1;
var a‍= 2; //one zero-width character
var a‍‍= 3; //two zero-width characters (or you can use the other one)
if(a==1&amp;&amp;a‍==2&amp;&amp;a‍‍==3) {
    console.log(""Why hello there!"")
}</code></pre>
</div>
</div>
</p>",,,13,,2018-01-16 05:14:54.330000+00:00,,2018-01-25 19:47:49.657000+00:00,2018-01-25 19:47:49.657000+00:00,,781965.0,,781965.0,48270127,2,2076,,
61,40356815,,"<p>I go to <code>build.gradle</code> and click <strong>sync now</strong>. Then it worked.</p>

<p><strong>Update</strong> :  </p>

<p><code>File</code> -> <code>Sync Project with Gradle Files</code> <strong>(Android Studio 3.1.1)</strong></p>

<p><code>Tools</code> -> <code>Android</code> -> <code>Sync Project with Gradle Files</code> <strong>(Android Studio 3.0.1)</strong></p>

<p>Or You can click on the icon from the toolbar.</p>

<p><a href=""https://i.stack.imgur.com/YLBLE.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/YLBLE.png"" alt=""Sync Project Icon""></a></p>

<blockquote>
  <p>This answer may not help works for later version as Android studio Team work on making the tool more better, the way to sync may be different in the next version of Android Studio.</p>
</blockquote>

<p><strong>COMMON WAY</strong> that may helps is try to <strong>sync project</strong> and then <strong>Invalidate Caches</strong> and <strong>Restart</strong> Android Studio.</p>

<p>Solution for <code>Android Studio 3.1.2</code> <a href=""https://stackoverflow.com/a/50000408/5241603"">[See below answer]</a></p>

<p>See <a href=""https://developer.android.com/studio/preview/"" rel=""noreferrer"">Latest Android Studio version</a></p>",,,2,,2016-11-01 08:57:53.203000+00:00,,2018-11-24 18:28:19.730000+00:00,2018-11-24 18:28:19.730000+00:00,,973919.0,,5241603.0,34353220,2,2056,,
62,50198499,,"<p>After hours of struggling, I solved it by including the following within <strong>app/build.gradle</strong>:</p>

<pre><code>android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
</code></pre>

<p><a href=""https://github.com/mapbox/mapbox-gl-native/issues/11378"" rel=""noreferrer"">https://github.com/mapbox/mapbox-gl-native/issues/11378</a></p>",,,17,,2018-05-06 10:08:13.733000+00:00,,2019-01-11 12:47:09.827000+00:00,2019-01-11 12:47:09.827000+00:00,,6444297.0,,2106697.0,49891730,2,2052,,
63,40355466,,"<p>If you think a 64-bit DIV instruction is a good way to divide by two, then no wonder the compiler's asm output beat your hand-written code, even with <code>-O0</code> (compile fast, no extra optimization, and store/reload to memory after/before every C statement so a debugger can modify variables).</p>
<p>See <a href=""http://agner.org/optimize/"" rel=""noreferrer"">Agner Fog's Optimizing Assembly guide</a> to learn how to write efficient asm.  He also has instruction tables and a microarch guide for specific details for specific CPUs.  See also the <a href=""/questions/tagged/x86"" class=""post-tag"" title=""show questions tagged &#39;x86&#39;"" rel=""tag"">x86</a> tag wiki for more perf links.</p>
<p>See also this more general question about beating the compiler with hand-written asm: <a href=""https://stackoverflow.com/questions/9601427"">Is inline assembly language slower than native C++ code?</a>.  TL:DR: yes if you do it wrong (like this question).</p>
<p>Usually you're fine letting the compiler do its thing, especially if you <strong>try to write C++ that can compile efficiently</strong>.  Also see <a href=""https://stackoverflow.com/questions/1866316/assembly-language-compiled-languages"">is assembly faster than compiled languages?</a>.  One of the answers links to <a href=""http://www.linux-kongress.org/2009/slides/compiler_survey_felix_von_leitner.pdf"" rel=""noreferrer"">these neat slides</a> showing how various C compilers optimize some really simple functions with cool tricks.  <strong>Matt Godbolt's CppCon2017 talk “<a href=""https://youtu.be/bSkpMdDe4g4"" rel=""noreferrer"">What Has My Compiler Done for Me Lately? Unbolting the Compiler's Lid</a>” is in a similar vein.</strong></p>
<hr />
<pre><code>even:
    mov rbx, 2
    xor rdx, rdx
    div rbx
</code></pre>
<p>On Intel Haswell, <strong><code>div r64</code></strong> is 36 uops, with a <strong>latency of 32-96 cycles</strong>, and a throughput of one per 21-74 cycles.  (Plus the 2 uops to set up RBX and zero RDX, but out-of-order execution can run those early).  <a href=""https://stackoverflow.com/q/26907523/224132"">High-uop-count instructions like DIV are microcoded, which can also cause front-end bottlenecks.</a> In this case, latency is the most relevant factor because it's part of a loop-carried dependency chain.</p>
<p><strong><code>shr rax, 1</code> does the same unsigned division: It's 1 uop, with 1c latency</strong>, and can run 2 per clock cycle.</p>
<p>For comparison, 32-bit division is faster, but still horrible vs. shifts. <code>idiv r32</code> is 9 uops, 22-29c latency, and one per 8-11c throughput on Haswell.</p>
<hr />
<p><strong>As you can see from looking at gcc's <code>-O0</code> asm output (<a href=""http://gcc.godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,options:(colouriseAsm:%270%27,compileOnChange:%270%27),source:%27%23include+%3Ciostream%3E%0A%23include+%3Cstdint.h%3E%0Ausing+namespace+std%3B%0A%0A//+unsigned+types+give+better+asm+output+for+divides+by+2.%0A//+Even+with+-O3,+%60long%60+sucks+(try+it:+godbolt+recompiles+automatically+after+edits)%0A//+I+used+this+version+as+a+starting+point+for+hand-optimizing.%0Aint+sequence(uint64_t+n)+%7B%0A++//+CHANGED+FROM+THE+QUESTION!%27S+CODE:+long+-%3E+uint64_t+%0A++++int+count+%3D+1%3B%0A++++while+(n+!!%3D+1)+%7B%0A++++++++if+(n+%25+2+%3D%3D+0)%0A++++++++++++n+/%3D+2%3B%0A++++++++else%0A++++++++++++n+%3D+n*3+%2B+1%3B%0A%0A++++++++%2B%2Bcount%3B%0A++++%7D%0A++++return+count%3B%0A%7D%0A%0Aint+main()+%7B%0A++++int+max+%3D+0,+maxi%3B%0A++++for+(int+i+%3D+999999%3B+i+%3E+0%3B+--i)+%7B%0A++++++++int+s+%3D+sequence(i)%3B%0A++++++++if+(s+%3E+max)+%7B%0A++++++++++++max+%3D+s%3B%0A++++++++++++maxi+%3D+i%3B%0A++++++++%7D%0A++++%7D%0A++++cout+%3C%3C+maxi+%3C%3C+endl%3B%0A%7D%0A%0A//+as+discussed,+gcc+-O0+still+uses+a+multiplicative+inverse%0A//+for+non-power-of-2+constants%0Aunsigned+long+div_by_13(unsigned+long+a)+%7B%0A++return+a/13%3B%0A%7D%0A%27),l:%275%27,n:%271%27,o:%27C%2B%2B+source+%231%27,t:%270%27)),k:40.81295963439001,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27),(g:!((h:compiler,i:(compiler:g540,filters:(b:%270%27,commentOnly:%270%27,directives:%270%27,intel:%270%27),options:%27-O0+-std%3Dgnu%2B%2B11+-Wall+-Wextra+-fverbose-asm%27),l:%275%27,n:%270%27,o:%27%231+with+x86-64+gcc+5.4%27,t:%270%27)),k:31.237103409492676,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27),(g:!((h:compiler,i:(compiler:g540,filters:(b:%270%27,commentOnly:%270%27,directives:%270%27,intel:%270%27),options:%27-O3+-std%3Dgnu%2B%2B11+-Wall+-Wextra+-fno-verbose-asm%27),l:%275%27,n:%270%27,o:%27%231+with+x86-64+gcc+5.4%27,t:%270%27)),k:27.94993695611732,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27)),l:%272%27,n:%270%27,o:%27%27,t:%270%27)),version:4"" rel=""noreferrer"">Godbolt compiler explorer</a>), it only uses shifts instructions</strong>. clang <code>-O0</code> does compile naively like you thought, even using 64-bit IDIV twice. (When optimizing, compilers do use both outputs of IDIV when the source does a division and modulus with the same operands, if they use IDIV at all)</p>
<p>GCC doesn't have a totally-naive mode; <a href=""https://stackoverflow.com/a/33284629/224132"">it always transforms through GIMPLE, which means some &quot;optimizations&quot; can't be disabled</a>.  This includes recognizing division-by-constant and using shifts (power of 2) or <a href=""https://stackoverflow.com/questions/41183935/why-does-gcc-use-multiplication-by-a-strange-number-in-implementing-integer-divi"">a fixed-point multiplicative inverse</a> (non power of 2) to avoid IDIV (see <code>div_by_13</code> in the above godbolt link).</p>
<p><code>gcc -Os</code> (optimize for size) <em>does</em> use IDIV for non-power-of-2 division,
unfortunately even in cases where the multiplicative inverse code is only slightly larger but much faster.</p>
<hr />
<h1>Helping the compiler</h1>
<p>(summary for this case: use <code>uint64_t n</code>)</p>
<p>First of all, it's only interesting to look at optimized compiler output.  (<code>-O3</code>).  <strong><a href=""https://stackoverflow.com/a/32001196/224132""><code>-O0</code> speed is basically meaningless.</a></strong></p>
<p>Look at your asm output (on Godbolt, or see <a href=""https://stackoverflow.com/q/38552116/224132"">How to remove &quot;noise&quot; from GCC/clang assembly output?</a>).  When the compiler doesn't make optimal code in the first place: <strong>Writing your C/C++ source in a way that guides the compiler into making better code is usually the best approach</strong>.  You have to know asm, and know what's efficient, but you apply this knowledge indirectly.  Compilers are also a good source of ideas: sometimes clang will do something cool, and you can hand-hold gcc into doing the same thing: see <a href=""https://stackoverflow.com/a/34410357/224132"">this answer</a> and what I did with the non-unrolled loop in @Veedrac's code below.)</p>
<p>This approach is portable, and in 20 years some future compiler can compile it to whatever is efficient on future hardware (x86 or not), maybe using new ISA extension or auto-vectorizing.  Hand-written x86-64 asm from 15 years ago would usually not be optimally tuned for Skylake.  e.g. compare&amp;branch macro-fusion didn't exist back then.  <strong>What's optimal now for hand-crafted asm for one microarchitecture might not be optimal for other current and future CPUs.</strong>  <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-my-hand-written-assembly-for-testing-the-collat#comment67966852_40356449"">Comments on @johnfound's answer</a> discuss major differences between AMD Bulldozer and Intel Haswell, which have a big effect on this code.  But in theory, <code>g++ -O3 -march=bdver3</code> and <code>g++ -O3 -march=skylake</code> will do the right thing.  (Or <code>-march=native</code>.)   Or <code>-mtune=...</code> to just tune, without using instructions that other CPUs might not support.</p>
<p>My feeling is that guiding the compiler to asm that's good for a current CPU you care about shouldn't be a problem for future compilers.  They're hopefully better than current compilers at finding ways to transform code, and can find a way that works for future CPUs.  Regardless, future x86 probably won't be terrible at anything that's good on current x86, and the future compiler will avoid any asm-specific pitfalls while implementing something like the data movement from your C source, if it doesn't see something better.</p>
<p>Hand-written asm is a black-box for the optimizer, so constant-propagation doesn't work when inlining makes an input a compile-time constant.  Other optimizations are also affected.  Read <a href=""https://gcc.gnu.org/wiki/DontUseInlineAsm"" rel=""noreferrer"">https://gcc.gnu.org/wiki/DontUseInlineAsm</a> before using asm.  (And avoid MSVC-style inline asm: inputs/outputs have to go through memory <a href=""https://stackoverflow.com/a/35959859/224132"">which adds overhead</a>.)</p>
<p><strong>In this case</strong>: your <code>n</code> has a signed type, and gcc uses the SAR/SHR/ADD sequence that gives the correct rounding.  (IDIV and arithmetic-shift &quot;round&quot; differently for negative inputs, see the <a href=""http://www.felixcloutier.com/x86/SAL:SAR:SHL:SHR.html"" rel=""noreferrer"">SAR insn set ref manual entry</a>).  (IDK if gcc tried and failed to prove that <code>n</code> can't be negative, or what.  Signed-overflow is undefined behaviour, so it should have been able to.)</p>
<p>You should have used <code>uint64_t n</code>, so it can just SHR.  And so it's portable to systems where <code>long</code> is only 32-bit (e.g. x86-64 Windows).</p>
<hr />
<p>BTW, <strong>gcc's <em>optimized</em> asm output looks pretty good (using <code>unsigned long n</code>)</strong>: the inner loop it inlines into <code>main()</code> does this:</p>
<pre><code> # from gcc5.4 -O3  plus my comments

 # edx= count=1
 # rax= uint64_t n

.L9:                   # do{
    lea    rcx, [rax+1+rax*2]   # rcx = 3*n + 1
    mov    rdi, rax
    shr    rdi         # rdi = n&gt;&gt;1;
    test   al, 1       # set flags based on n%2 (aka n&amp;1)
    mov    rax, rcx
    cmove  rax, rdi    # n= (n%2) ? 3*n+1 : n/2;
    add    edx, 1      # ++count;
    cmp    rax, 1
    jne   .L9          #}while(n!=1)

  cmp/branch to update max and maxi, and then do the next n
</code></pre>
<p>The inner loop is branchless, and the critical path of the loop-carried dependency chain is:</p>
<ul>
<li>3-component LEA (3 cycles)</li>
<li>cmov (2 cycles on Haswell, 1c on Broadwell or later).</li>
</ul>
<p><strong>Total: 5 cycle per iteration, latency bottleneck</strong>.  Out-of-order execution takes care of everything else in parallel with this (in theory: I haven't tested with perf counters to see if it really runs at 5c/iter).</p>
<p>The FLAGS input of <code>cmov</code> (produced by TEST) is faster to produce than the RAX input (from LEA-&gt;MOV), so it's not on the critical path.</p>
<p>Similarly, the MOV-&gt;SHR that produces CMOV's RDI input is off the critical path, because it's also faster than the LEA.  MOV on IvyBridge and later has zero latency (handled at register-rename time).  (It still takes a uop, and a slot in the pipeline, so it's not free, just zero latency).  The extra MOV in the LEA dep chain is part of the bottleneck on other CPUs.</p>
<p>The cmp/jne is also not part of the critical path: it's not loop-carried, because control dependencies are handled with branch prediction + speculative execution, unlike data dependencies on the critical path.</p>
<hr />
<h1>Beating the compiler</h1>
<p>GCC did a pretty good job here.  It could save one code byte by using <a href=""https://stackoverflow.com/a/36510865/224132""><code>inc edx</code> instead of <code>add edx, 1</code></a>, because nobody cares about P4 and its false-dependencies for partial-flag-modifying instructions.</p>
<p>It could also save all the MOV instructions, and the TEST:  SHR sets CF= the bit shifted out, so we can use <code>cmovc</code> instead of <code>test</code> / <code>cmovz</code>.</p>
<pre><code> ### Hand-optimized version of what gcc does
.L9:                       #do{
    lea     rcx, [rax+1+rax*2] # rcx = 3*n + 1
    shr     rax, 1         # n&gt;&gt;=1;    CF = n&amp;1 = n%2
    cmovc   rax, rcx       # n= (n&amp;1) ? 3*n+1 : n/2;
    inc     edx            # ++count;
    cmp     rax, 1
    jne     .L9            #}while(n!=1)
</code></pre>
<p>See @johnfound's answer for another clever trick: remove the CMP by branching on SHR's flag result as well as using it for CMOV:  zero only if n was 1 (or 0) to start with.  (Fun fact: <a href=""https://stackoverflow.com/a/36510865/224132"">SHR with count != 1 on Nehalem or earlier causes a stall if you read the flag results</a>.  That's how they made it single-uop.  The shift-by-1 special encoding is fine, though.)</p>
<p>Avoiding MOV doesn't help with the latency at all on Haswell (<a href=""https://stackoverflow.com/q/44169342"">Can x86&#39;s MOV really be &quot;free&quot;? Why can&#39;t I reproduce this at all?</a>).  It does help <em>significantly</em> on CPUs like Intel pre-IvB, and AMD Bulldozer-family, where MOV is not zero-latency.  The compiler's wasted MOV instructions do affect the critical path.  BD's complex-LEA and CMOV are both lower latency (2c and 1c respectively), so it's a bigger fraction of the latency.  Also, throughput bottlenecks become an issue, because it only has two integer ALU pipes.  <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-assembly/40356449#40356449"">See @johnfound's answer</a>, where he has timing results from an AMD CPU.</p>
<p>Even on Haswell, this version may help a bit by avoiding some occasional delays where a non-critical uop steals an execution port from one on the critical path, delaying execution by 1 cycle.  (This is called a resource conflict).  It also saves a register, which may help when doing multiple <code>n</code> values in parallel in an interleaved loop (see below).</p>
<p><strong>LEA's latency depends on the addressing mode</strong>, on Intel SnB-family CPUs.  3c for 3 components (<code>[base+idx+const]</code>, which takes two separate adds), but only 1c with 2 or fewer components (one add).  Some CPUs (like Core2) do even a 3-component LEA in a single cycle, but SnB-family doesn't.  Worse, <a href=""https://stackoverflow.com/a/40212446/224132"">Intel SnB-family standardizes latencies so there are no 2c uops</a>, otherwise 3-component LEA would be only 2c like Bulldozer.  (3-component LEA is slower on AMD as well, just not by as much).</p>
<p>So <code>lea  rcx, [rax + rax*2]</code> / <code>inc rcx</code> is only 2c latency, faster than <code>lea  rcx, [rax + rax*2 + 1]</code>, on Intel SnB-family CPUs like Haswell.  Break-even on BD, and worse on Core2.  It does cost an extra uop, which normally isn't worth it to save 1c latency, but latency is the major bottleneck here and Haswell has a wide enough pipeline to handle the extra uop throughput.</p>
<p><strong>Neither gcc, icc, nor clang (on godbolt) used SHR's CF output, always using an AND or TEST</strong>.  Silly compilers. :P  They're great pieces of complex machinery, but a clever human can often beat them on small-scale problems.  (Given thousands to millions of times longer to think about it, of course!  Compilers don't use exhaustive algorithms to search for every possible way to do things, because that would take too long when optimizing a lot of inlined code, which is what they do best.  They also don't model the pipeline in the target microarchitecture, at least not in the same detail as <a href=""https://stackoverflow.com/questions/26021337/what-is-iaca-and-how-do-i-use-it"">IACA</a> or other static-analysis tools; they just use some heuristics.)</p>
<hr />
<p><strong>Simple loop unrolling won't help</strong>; this loop bottlenecks on the latency of a loop-carried dependency chain, not on loop overhead / throughput.  This means it would do well with hyperthreading (or any other kind of SMT), since the CPU has lots of time to interleave instructions from two threads.  This would mean parallelizing the loop in <code>main</code>, but that's fine because each thread can just check a range of <code>n</code> values and produce a pair of integers as a result.</p>
<p><strong>Interleaving by hand within a single thread might be viable, too</strong>.  Maybe compute the sequence for a pair of numbers in parallel, since each one only takes a couple registers, and they can all update the same <code>max</code> / <code>maxi</code>.  This creates more <a href=""https://en.wikipedia.org/wiki/Instruction-level_parallelism"" rel=""noreferrer"">instruction-level parallelism</a>.</p>
<p>The trick is deciding whether to wait until all the <code>n</code> values have reached <code>1</code> before getting another pair of starting <code>n</code> values, or whether to break out and get a new start point for just one that reached the end condition, without touching the registers for the other sequence.  Probably it's best to keep each chain working on useful data, otherwise you'd have to conditionally increment its counter.</p>
<hr />
<p>You could maybe even do this with SSE packed-compare stuff to conditionally increment the counter for vector elements where <code>n</code> hadn't reached <code>1</code> yet.  And then to hide the even longer latency of a SIMD conditional-increment implementation, you'd need to keep more vectors of <code>n</code> values up in the air.  Maybe only worth with 256b vector (4x <code>uint64_t</code>).</p>
<p>I think the best strategy to make detection of a <code>1</code> &quot;sticky&quot; is to mask the vector of all-ones that you add to increment the counter.  So after you've seen a <code>1</code> in an element, the increment-vector will have a zero, and +=0 is a no-op.</p>
<h3>Untested idea for manual vectorization</h3>
<pre><code># starting with YMM0 = [ n_d, n_c, n_b, n_a ]  (64-bit elements)
# ymm4 = _mm256_set1_epi64x(1):  increment vector
# ymm5 = all-zeros:  count vector

.inner_loop:
    vpaddq    ymm1, ymm0, xmm0
    vpaddq    ymm1, ymm1, xmm0
    vpaddq    ymm1, ymm1, set1_epi64(1)     # ymm1= 3*n + 1.  Maybe could do this more efficiently?

    vprllq    ymm3, ymm0, 63                # shift bit 1 to the sign bit

    vpsrlq    ymm0, ymm0, 1                 # n /= 2

    # FP blend between integer insns may cost extra bypass latency, but integer blends don't have 1 bit controlling a whole qword.
    vpblendvpd ymm0, ymm0, ymm1, ymm3       # variable blend controlled by the sign bit of each 64-bit element.  I might have the source operands backwards, I always have to look this up.

    # ymm0 = updated n  in each element.

    vpcmpeqq ymm1, ymm0, set1_epi64(1)
    vpandn   ymm4, ymm1, ymm4         # zero out elements of ymm4 where the compare was true

    vpaddq   ymm5, ymm5, ymm4         # count++ in elements where n has never been == 1

    vptest   ymm4, ymm4
    jnz  .inner_loop
    # Fall through when all the n values have reached 1 at some point, and our increment vector is all-zero

    vextracti128 ymm0, ymm5, 1
    vpmaxq .... crap this doesn't exist
    # Actually just delay doing a horizontal max until the very very end.  But you need some way to record max and maxi.
</code></pre>
<p>You can and should implement this with intrinsics instead of hand-written asm.</p>
<hr />
<h2>Algorithmic / implementation improvement:</h2>
<p>Besides just implementing the same logic with more efficient asm, look for ways to simplify the logic, or avoid redundant work.  e.g. memoize to detect common endings to sequences. Or even better, look at 8 trailing bits at once (gnasher's answer)</p>
<p>@EOF points out that <code>tzcnt</code> (or <code>bsf</code>) could be used to do multiple <code>n/=2</code> iterations in one step. That's probably better than SIMD vectorizing; no SSE or AVX instruction can do that. It's still compatible with doing multiple scalar <code>n</code>s in parallel in different integer registers, though.</p>
<p>So the loop might look like this:</p>
<pre><code>goto loop_entry;  // C++ structured like the asm, for illustration only
do {
   n = n*3 + 1;
  loop_entry:
   shift = _tzcnt_u64(n);
   n &gt;&gt;= shift;
   count += shift;
} while(n != 1);
</code></pre>
<p>This may do significantly fewer iterations, but variable-count shifts are slow on Intel SnB-family CPUs without BMI2. 3 uops, 2c latency.  (They have an input dependency on the FLAGS because count=0 means the flags are unmodified. They handle this as a data dependency, and take multiple uops because a uop can only have 2 inputs (pre-HSW/BDW anyway)).  This is the kind that people complaining about x86's crazy-CISC design are referring to. It makes x86 CPUs slower than they would be if the ISA was designed from scratch today, even in a mostly-similar way.  (i.e. this is part of the &quot;x86 tax&quot; that costs speed / power.) SHRX/SHLX/SARX (BMI2) are a big win (1 uop / 1c latency).</p>
<p>It also puts tzcnt (3c on Haswell and later) on the critical path, so it significantly lengthens the total latency of the loop-carried dependency chain. It does remove any need for a CMOV, or for preparing a register holding <code>n&gt;&gt;1</code>, though. <strong>@Veedrac's answer overcomes all this by deferring the tzcnt/shift for multiple iterations, which is highly effective (see below).</strong></p>
<p>We can safely use <a href=""http://www.felixcloutier.com/x86/BSF.html"" rel=""noreferrer"">BSF</a> or <a href=""http://www.felixcloutier.com/x86/TZCNT.html"" rel=""noreferrer"">TZCNT</a> interchangeably, because <code>n</code> can never be zero at that point. TZCNT's machine-code decodes as BSF on CPUs that don't support BMI1. (Meaningless prefixes are ignored, so REP BSF runs as BSF).</p>
<p>TZCNT performs much better than BSF on AMD CPUs that support it,  so it can be a good idea to use <code>REP BSF</code>, even if you don't care about setting ZF if the input is zero rather than the output.  Some compilers do this when you use <code>__builtin_ctzll</code> even with <code>-mno-bmi</code>.</p>
<p>They perform the same on Intel CPUs, so just save the byte if that's all that matters. TZCNT on Intel (pre-Skylake) still has a false-dependency on the supposedly write-only output operand, just like BSF, to support the undocumented behaviour that BSF with input = 0 leaves its destination unmodified. So you need to work around that unless optimizing only for Skylake, so there's nothing to gain from the extra REP byte. (Intel often goes above and beyond what the x86 ISA manual requires, to avoid breaking widely-used code that depends on something it shouldn't, or that is retroactively disallowed. e.g. <a href=""http://blog.stuffedcow.net/2015/08/pagewalk-coherence/"" rel=""noreferrer"">Windows 9x's assumes no speculative prefetching of TLB entries</a>, which was safe when the code was written, <a href=""https://stackoverflow.com/questions/17395557/observing-stale-instruction-fetching-on-x86-with-self-modifying-code#comment68191467_18388700"">before Intel updated the TLB management rules</a>.)</p>
<p>Anyway, LZCNT/TZCNT on Haswell have the same false dep as POPCNT: see <a href=""https://stackoverflow.com/questions/25078285/replacing-a-32-bit-loop-count-variable-with-64-bit-introduces-crazy-performance"">this Q&amp;A</a>. This is why in gcc's asm output for @Veedrac's code, you see it <a href=""https://stackoverflow.com/a/33668295/224132"">breaking the dep chain with xor-zeroing</a> on the register it's about to use as TZCNT's destination when it doesn't use dst=src. Since TZCNT/LZCNT/POPCNT never leave their destination undefined or unmodified, this false dependency on the output on Intel CPUs is a performance bug / limitation. Presumably it's worth some transistors / power to have them behave like other uops that go to the same execution unit. The only perf upside is interaction with another uarch limitation: <a href=""https://stackoverflow.com/questions/26046634/micro-fusion-and-addressing-modes"">they can micro-fuse a memory operand with an indexed addressing mode</a> on Haswell, but on Skylake where Intel removed the false dep for LZCNT/TZCNT they &quot;un-laminate&quot; indexed addressing modes while POPCNT can still micro-fuse any addr mode.</p>
<hr />
<h1>Improvements to ideas / code from other answers:</h1>
<p><strong>@hidefromkgb's answer</strong> has a nice observation that you're guaranteed to be able to do one right shift after a 3n+1.  You can compute this more even more efficiently than just leaving out the checks between steps.  The asm implementation in that answer is broken, though (it depends on OF, which is undefined after SHRD with a count &gt; 1), and slow: <code>ROR rdi,2</code> is faster than <code>SHRD rdi,rdi,2</code>, and using two CMOV instructions on the critical path is slower than an extra TEST that can run in parallel.</p>
<p>I put tidied / improved C (which guides the compiler to produce better asm), and tested+working faster asm (in comments below the C) up on Godbolt: see the link in <a href=""https://stackoverflow.com/questions/40354978/why-is-this-c-code-faster-than-my-hand-written-assembly-for-testing-the-collat/40367384#40367384"">@hidefromkgb's answer</a>.  (This answer hit the 30k char limit from the large Godbolt URLs, but <a href=""https://meta.stackoverflow.com/questions/319549/how-are-we-supposed-to-post-godbolt-links-now-that-url-shortening-is-blocked/319594#319594"">shortlinks can rot</a> and were too long for goo.gl anyway.)</p>
<p>Also improved the output-printing to convert to a string and make one <code>write()</code> instead of writing one char at a time. This minimizes impact on timing the whole program with <code>perf stat ./collatz</code> (to record performance counters), and I de-obfuscated some of the non-critical asm.</p>
<hr />
<p><strong>@Veedrac's code</strong></p>
<p>I got a minor speedup from right-shifting as much as we <em>know</em> needs doing, and checking to continue the loop. From 7.5s for limit=1e8 down to 7.275s, on Core2Duo (Merom), with an unroll factor of 16.</p>
<p>code + comments <a href=""http://gcc.godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAKxAEZTUAHAvVAOwGdK0AbVAV2J4OmAIIcAtiADkABmmk0Exnh6YA8mwDCCAIZtgmGfICUpDgOLIj0gPS2A1BIx4AZnkzoHAN0zEOrGwOqK4OAGqYnsS6yGDSHA5oWCAApLKi9omCxJhsBD5%2BAeyJqMqqmAkA7pg8PA6VhAgOwMjIaRmOAMoAMuoA6g5a6gAi2A59AJIAKgASg92iAHIA4g4QmAAeBNEOAFIAsgAKCXhBBAiYDliufg58TCbt7ZnXt/eMV6gVwWyXAEZ4YAOITABAEAC0HAQbnyjFuwGIAkYpAc%2Bi87B4AE87phdL4qhcgsg%2BCIHERgr5iK4%2BJUAHRPdKZXQ8Cwo86XAIGNSQgiYD7vBz8EQJAAC0OuiIkAGtgH84glecgEGw8ABHfiYBmiFIAJgAzKdifwsA4UnqtMgOAR8HkzdgnvrDTxjZczVpWFacroJHatULTkC2N6KowYhzrWaAEJaq26FjIQWnAgANgALAB9fKc4BqND8PKmvXDByyKMOByZPMFkJkoSMBUIRH8UFki4ONjscGvYg5Lzvdqx%2BOJvJpzMOWOYzzp07pgVm4ulvWR8uZAVoNj4FjFSq6BXEDWo/Lshy5dGhY9YHi6SfoSHQ1z5fvpQd4BPrq0OP6oVB1U6e/gSLk%2BTzg4rjMiIUYxgQcavsOBB6jqY4iOquTWBA/BJghY4bCYpoAOzRukDoGq4G6YKEACqiwAErqN03TpkMVFTMR1ynJcVG0fRjHqMxDi0MmK6OPmiK1J%2B2ICQ4wigbuvJWiADh4bS%2BoJHCxD8ZgAAcTi6KcArQK0ACsykoloJCYDqwz8Kgaz7H4pS4TqtKpssMwAF6PER%2Bqnm47TluW775BheRYfkCJIumARua6RYOJxdEMUxiwsUufn%2BZkyyIpUCR/NiugycgRDqbQsi2HqawgXwwA6hAJVlbhKTYDqKSaQAnC12m0LSeGpp%2BhAcLhuJKsCAgbvS6T%2BRWjgTAQ8rjroNxSaEhCJPozRZSelLYoQfgwdujQCPkqCUtSqANAY42iJNgVwaOR0nTS6YAgQCQgcm5XgutEVRZcABU/E9RW/GyIuhFXf5N3BSmGb3X4p2VJFeDRYWxa0BR9GFloboUnDj3PRwkETeljj6NijBnbcNY6lJCT5VaTAlBuhCBApGJ5eOAZqH1WaYAQKIWPUlzIGtzI0lJ%2BRJjZx5PtqRPllDd3tijDgbIT4Py5hiH5FWwGxaDWqTZU0JcxA2wag1BFpZNUOhQ4UrK6DQmJFeBg6VK3yVCQpJJJcDTnA4abgs9dsOCAthW8TDjdLivjjveLCu%2BgZ1BK4JB3HGfiXZN5ZJ/hYNpK1GsjjD3NqwXRfwVrduGg7ZZTQ4Fw8GpoFpyJP48AG9SNFJWB5K%2BzIlCo3w1sefx8MgUparqepsb8DjTNg1HppGvRaAA0hADWGVjRGyIXFUEdzytBLqgngmwZa2P9Y8BA4v3h3vBfl9nKTbwy%2B/%2BW4azB/OIFsBby4damh1NGWKUpDRlj%2BF6SeS58LFmrmwNoIDdSgOXK/HessP7lhPrFII/1yooNLqlPCwxcL12WIsCigxxzQV5IBPI4JNiMByBwIoF9d77xeOwOI%2BRU7EEMEePQgjLhrjWmBMSh1Wz/FQAQIgEgURokFjQ1QdRfieDJDZfgjB0AZxKPmYROQ2Tfkus8Rw2cW7EAgEmKS85ZCFmXHgN04UtGI2RmWFBKC8BkMrKUFQah/CgX4LUTE4I25iXOMIFEfx%2BDaxdkCJO3wVp/F0OgLEpjzHmIXkvFe6h16bzrpkYAMibKHT8LOb8jB0ynnLH%2BXkKTgihCgbiSeHDyxZOXqvDejxUqtPnlMReHTcldLLnvNp/TsmdPyT0zBYyBk5Lyd0/OjpKI0QSjxPidoHCpnfrMiZQypn51GX0uZkzFk7OOXshZIz97tPmcM6Z08fKuGIl/eK3EkpTELGMTS5zbmnOubswZVyHlHL%2Bfss5vSwXAqWXqJ5LyVlcUSrxZKXz%2BLNUheMoF9zDk3MxXcg5vy8X/JBbik54Ky7eSZs83pL5kDpl3CIYgBAIBvKRRs80IEBIol1DqMJdQgFEBstCUEPKIXq3MZkWl9LWF%2BGZc4ypP0UYgXAYg7lOpeVsFEvy0a%2BQEkcDYDwnSBBhqBX0AQUVAKlprBVQmMAYAQLytcZgbxjhApMPUnqg10h8i5F0GPcMME6UMtlaHCA5zrp%2BHUm6bGPK%2BV6ILJ6w1Eg4zDXlRzaK6CL7qpGTMpWvo9T2lio6n6lqgEeNitTf6xakaalgfXKYIx1AKWJPoIEcJWF4AkDWhs0k/ZNE2NsfKBxjhSTOG2GWz83BWM4GbehwEdTJlPnmjlsVjq4zOk6zyubJoTinDOfsyDkHTPMSkEh9RjaYAgDgrGq6Hobp%2BmKg22dMjDBqNedRmBfBBCgfoJUFQs7ZxtlXKEMJlbpiehhHgCd0yFTcrUK9YrzE4MLYW4sIGHxq3MWWo9aH44FJJugG0QJ7bSSTnPU4UjPzQKnl5Ei/F674A4H6rmx4OyhM1e3O4FSzQADEI6TRfTZFa7Bwx8kPKiMknbfaEko2PVAE8fC6CEGapwgIwQ4ypDSADhsL1rGQxp%2BGm687nKnbU/cc7cLZlzDqjxR6YVf1oAxtwNwcgFk9BnYAHgEh8NbNJGWV8/LDBshAPUWbIy0G6ShxzacqBCnyGtC%2BBb83DC6n5ELYWIv5uwI53%2BsUr1ZYi8A5cJ8QH0bWJ0SIDc8ASlKDKOU8RUScGqGQc9r4mjMh3JiBIeqHDUytHyE4M7cRnno2nJyW6/IzDROCBAP4vDHiUH424ks3ad13BIT8u51HFBbQYOaKprBOF5rN9AqQJpCkuPlLQ%2Bx1BhA0YzTcgRRbYmioiCTOQgSzZ4ERvTKCIsok894TufAXoNPnt0Q4jWvB4lQNVzuepwSLZEwWbo2AroUa9QkZAQh4wD1DOcA2u3QDA2svWCxDgZidD6LSeNBAQB6mQBAVHohcJsBAKmBMTO0e1UeHhLQSxSEoOu7diAOpHggNEMMYYKCbthD8i0ZAClaC8qYN5tOlPqcQx1fTxnzPWfs858znnp7%2BeLEFyA4XYRRfi5XtzzLE1IzDD6LYToa9ugKQZ5%2BTAwsLuDFl8rWgpOUS0DaBNKY0ITg5QqBCYWpIry8kQZiFEHZgQVEsId9c1JXwvRpxT6blQccJ9RJIeoAhvuClJJ0GY1FwR2i0Dx8nluocOElxg%2B%2B5yFYlzYIwHLuCiv8UtZ3scbBIqNmPgVwfmsxw0h/nlrNyZMt1olY4ZNKqgQRISAhIOK01DzZsp7fwQtfHlHUodRgMTR0SeYZ%2B1gQoCj%2BECFEi/0l3Bzw7HSDvSZFYEGUMrGfK1eN2we9Q4SxLUcFiwR8oQo1Ssf9GBS0dUitOV%2B9/9zVpkAsJo%2BghF55WwBBQR8hPYgkvA/hLgmAWBk0eAUR9FVBnZW0rhqsvdZE/B5dWg0VSc1d1INcacdYdcucWdsEQBDIExZcUEq9qIUEjc9QbdLdrcZdbt%2BMMkh8fUv1x8ksC1aBMMMlrYv8S4MB0AqllCQJ8tVDssGpSsStlx1Dj1ND/JFCuNKhZ9ix8sF1F8wZrD/JwC7DZ8G9dD9DcgQDP1cgNC3DsNQFUZ%2B90Ip8CATAUD8MaDXZSMAI/hm8etA5g4UkvBCFXtUBGEthqkRBQxoheQsQUQ%2B0JN/cmNAJzBgxWw4x548gahBhDgKJutuFvUTwO4u0gxeR2h29aMagv5SxGQV9sQSBARTgB4qpXwSiDoL9YDFN/Bc8JB%2BBhoD9SR1t5DroEDy0wjCEnCF9ENrCPC9jCtACjCotTDit%2B9HMFJEsosKVYUWRNQhiOYuRMAeQxNdDgh1IAi2AUQIgogYg5pRjPMgweB0kNdm04lbAFcHBBCo5udJD%2B9pCxd%2B9ZcIBZAJsjkjiStBITi9QG8r074HACFStCsFJCSst%2BJH0jkQjOV7i4U5Z/JT1pc%2BiqUnYrMRFuNd5xUnY%2Bhvw7V5Cv4KSV1UYAETNQhhStAqTw0IZI1MYY11UPC7FXBJQDMxZSiNhlYeV5TzQVYdSpS4hM1DSSVywcgCBBAiQbMrDJpmSI5mSnYjZyhTZ9xnUngSEp5HREFnQTQ3QrRUk8A/haQEBfR0hrFk1Thp14t%2BFkAUQlQlNfpfolNgBvAxTGSgMxxk1NSQJ9Y0zIidINhHFrS4JbYOiADYpaAtIc1rZOBARfgvAchGBSzdZUYgirUIAky2hVDhgxcdkGymzlY4xYd2z%2BFvBX5wtX5Bciy%2BF0IazgA6zU84CixHYGzMYFz%2Bz3FD1IwGzeccUXicxvcti9YAVMgABNAQVaIIemD4Wops2wamYgn3UkIaJoEeWbUkPQAmVpJkRTZ0S4JOfgf1cWEo6EYaXsZY74ckQgExUZHzCIkKKuPAP/TtQgMsRCzZfsxwZqWBcEcELxYzXpLQ%2BCpCZWZCDURBS9LxS1SaIU16AtfM1MzBZ%2BfMki65JizMtC2KQs3cl%2Bd01pW0xk/i2WK6P0kAFASRaNXU9i/U4BambUiSqUzMzDUzGdczICLdLDcSldKUnldBLMTmN4tcK06XdVaSjkstLSmS3S3dLwCjcMtgfsIsOSiy6y6cEfBy1BPyPMXWG9A06QI0vyh5Xi0QaQMwHgGQQyBQNnaQWgBQVAGQLGTc8cdPV0fUGK0gOnOQEKswKUenJSVMVqTSPCVqVMNMAqvUWgPCPCUgMK6QVMBQKQEqWQUgKK%2BQBgGQBQLgJqjK0wUgOAWAJARbE/cgbgY/fxFAOJPUVqJq9wKDQoSgP4YwBQJQOdTQLERa0gfAHIQqPAfEdapMGoRaswUgwILgaQHkdAecOc/gWzcLRzcEYYVldZZKecSScEPoUWBwN6gdHYcEVwSkL8EQcEdbT69QD6ZNKwYMosNAHIHUEK6q8KyK9auKvy1Kruf2DYTSZMcENMOIoEPUWkVqWkVq7qrK0gHKnUTSZyQyVMWgVqEqEqZMVqAqnUeG2qxGzKtq6QDqkALqw63qmARAMSsofxYaiAQasa4AZMFmma3kfwea9a5aoCVazEdaza73FgXajm/amqnq469gU686y6tga6zc2gXqN6j6r6rYH6v6vwAGt44G8EUGz6iQHgNyZAAscECQP4LtamL2n2xCr28034ecDgKUTEK8d2OGmqiK5qpGmQaeRzDUzG7G3qGE5MZSBQEmkwbK%2BnVMIm1MPCWQM2vUSakqzSVMBdVmuq0gBqkGOOjm5G7m3mzKnO1m2Ghu1qpu9Kw6swSkNhdnIAA"" rel=""noreferrer"">on Godbolt</a>. Don't use this version with clang; it does something silly with the defer-loop. Using a tmp counter <code>k</code> and then adding it to <code>count</code> later changes what clang does, but that <em>slightly</em> hurts gcc.</p>
<p>See discussion in comments: Veedrac's code is <em>excellent</em> on CPUs with BMI1 (i.e. not Celeron/Pentium)</p>",,,71,,2016-11-01 07:04:26.303000+00:00,,2020-05-01 09:32:06.760000+00:00,2020-06-20 09:12:55.060000+00:00,,-1.0,,224132.0,40354978,2,1940,,
64,44210813,,"<p>Yes, <code>package-lock.json</code> is intended to be checked into source control. If you're using npm 5+, you may see this notice on the command line: <code>created a lockfile as package-lock.json. You should commit this file.</code> According to <a href=""https://github.com/npm/cli/blob/release-6.14.7/docs/content/configuring-npm/package-lock-json.md"" rel=""noreferrer""><code>npm help package-lock.json</code></a>:</p>
<blockquote>
<p><code>package-lock.json</code> is automatically generated for any operations where npm
modifies either the <code>node_modules</code> tree, or <code>package.json</code>. It describes the
exact tree that was generated, such that subsequent installs are able to
generate identical trees, regardless of intermediate dependency updates.</p>
<p><strong>This file is intended to be committed into source repositories</strong>, and serves
various purposes:</p>
<ul>
<li><p>Describe a single representation of a dependency tree such that teammates, deployments, and continuous integration are guaranteed to install exactly the same dependencies.</p>
</li>
<li><p>Provide a facility for users to &quot;time-travel&quot; to previous states of <code>node_modules</code> without having to commit the directory itself.</p>
</li>
<li><p>To facilitate greater visibility of tree changes through readable source control diffs.</p>
</li>
<li><p>And optimize the installation process by allowing npm to skip repeated metadata resolutions for previously-installed packages.</p>
</li>
</ul>
<p>One key detail about <code>package-lock.json</code> is that it cannot be published, and it
will be ignored if found in any place other than the toplevel package. It shares
a format with npm-shrinkwrap.json, which is essentially the same file, but
allows publication. This is not recommended unless deploying a CLI tool or
otherwise using the publication process for producing production packages.</p>
<p>If both <code>package-lock.json</code> and <code>npm-shrinkwrap.json</code> are present in the root of
a package, <code>package-lock.json</code> will be completely ignored.</p>
</blockquote>",,,25,,2017-05-26 22:16:32.407000+00:00,,2020-08-12 09:04:21.493000+00:00,2020-08-12 09:04:21.493000+00:00,,2321452.0,,2321452.0,44206782,2,1887,,
65,42121109,,"<blockquote>
  <p><strong>React Router v5.1.0 with hooks</strong></p>
</blockquote>

<p>There is a new <code>useHistory</code> hook in React Router >5.1.0 if you are using React >16.8.0 and functional components.</p>

<pre><code>import { useHistory } from ""react-router-dom"";

function HomeButton() {
  const history = useHistory();

  function handleClick() {
    history.push(""/home"");
  }

  return (
    &lt;button type=""button"" onClick={handleClick}&gt;
      Go home
    &lt;/button&gt;
  );
}
</code></pre>

<blockquote>
  <p><strong>React Router v4</strong></p>
</blockquote>

<p>With v4 of React Router, there are three approaches that you can take to programmatic routing within components.</p>

<ol>
<li>Use the <code>withRouter</code> higher-order component.</li>
<li>Use composition and render a <code>&lt;Route&gt;</code></li>
<li>Use the <code>context</code>.</li>
</ol>

<p>React Router is mostly a wrapper around the <a href=""https://github.com/ReactTraining/history"" rel=""noreferrer""><code>history</code></a> library. <code>history</code> handles interaction with the browser's <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/history"" rel=""noreferrer""><code>window.history</code></a> for you with its browser and hash histories. It also provides a memory history which is useful for environments that don't have a global history. This is particularly useful in mobile app development (<code>react-native</code>) and unit testing with Node.</p>

<p>A <code>history</code> instance has two methods for navigating: <code>push</code> and <code>replace</code>. If you think of the <code>history</code> as an array of visited locations, <code>push</code> will add a new location to the array and <code>replace</code> will replace the current location in the array with the new one. Typically you will want to use the <code>push</code> method when you are navigating.</p>

<p>In earlier versions of React Router, you had to create your own <code>history</code> instance, but in v4 the <code>&lt;BrowserRouter&gt;</code>, <code>&lt;HashRouter&gt;</code>, and <code>&lt;MemoryRouter&gt;</code> components will create a browser, hash, and memory instances for you. React Router makes the properties and methods of the <code>history</code> instance associated with your router available through the context, under the <code>router</code> object.</p>

<h3>1. Use the <code>withRouter</code> higher-order component</h3>

<p>The <code>withRouter</code> higher-order component will inject the <code>history</code> object as a prop of the component. This allows you to access the <code>push</code> and <code>replace</code> methods without having to deal with the <code>context</code>.</p>

<pre class=""lang-js prettyprint-override""><code>import { withRouter } from 'react-router-dom'
// this also works with react-router-native

const Button = withRouter(({ history }) =&gt; (
  &lt;button
    type='button'
    onClick={() =&gt; { history.push('/new-location') }}
  &gt;
    Click Me!
  &lt;/button&gt;
))
</code></pre>

<h3>2. Use composition and render a <code>&lt;Route&gt;</code></h3>

<p>The <code>&lt;Route&gt;</code> component isn't just for matching locations. You can render a pathless route and <strong>it will always match the current location</strong>. The <code>&lt;Route&gt;</code> component passes the same props as <code>withRouter</code>, so you will be able to access the <code>history</code> methods through the <code>history</code> prop.</p>

<pre class=""lang-js prettyprint-override""><code>import { Route } from 'react-router-dom'

const Button = () =&gt; (
  &lt;Route render={({ history}) =&gt; (
    &lt;button
      type='button'
      onClick={() =&gt; { history.push('/new-location') }}
    &gt;
      Click Me!
    &lt;/button&gt;
  )} /&gt;
)
</code></pre>

<h3>3. Use the context*</h3>

<p><strong>But you probably should not</strong></p>

<p>The last option is one that you should only use if you feel comfortable working with React's <a href=""https://facebook.github.io/react/docs/context.html"" rel=""noreferrer"">context</a> model (React's Context API is stable as of v16).</p>

<pre class=""lang-js prettyprint-override""><code>const Button = (props, context) =&gt; (
  &lt;button
    type='button'
    onClick={() =&gt; {
      // context.history.push === history.push
      context.history.push('/new-location')
    }}
  &gt;
    Click Me!
  &lt;/button&gt;
)

// you need to specify the context type so that it
// is available within the component
Button.contextTypes = {
  history: React.PropTypes.shape({
    push: React.PropTypes.func.isRequired
  })
}
</code></pre>

<p>1 and 2 are the simplest choices to implement, so for most use cases, they are your best bets.</p>",,,20,,2017-02-08 18:39:41.177000+00:00,,2020-04-26 21:27:37.350000+00:00,2020-04-26 21:27:37.350000+00:00,,541208.0,,444829.0,31079081,2,1835,,
66,46694321,,"<p>Here is a shorter way of achieving it:</p>

<pre><code>let result = objArray.map(a =&gt; a.foo);
</code></pre>

<p>OR</p>

<pre><code>let result = objArray.map(({ foo }) =&gt; foo)
</code></pre>

<p>You can also check <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""noreferrer""><code>Array.prototype.map()</code></a>.</p>",,,10,,2017-10-11 17:33:48.910000+00:00,,2020-04-19 13:50:51.927000+00:00,2020-04-19 13:50:51.927000+00:00,,806202.0,,3848424.0,19590865,2,1711,,
67,37365955,,"<p><strong>Promise</strong></p>
<p>A <code>Promise</code> handles a <strong>single event</strong> when an async operation completes or fails.</p>
<p>Note: There are <code>Promise</code> libraries out there that support cancellation, but ES6 <code>Promise</code> doesn't so far.</p>
<p><strong>Observable</strong></p>
<p>An <code>Observable</code> is like a <strong><code>Stream</code></strong> (in many languages) and allows to pass zero or more events where the callback is called for each event.</p>
<p>Often <code>Observable</code> is preferred over <code>Promise</code> because it provides the features of <code>Promise</code> and more. With <code>Observable</code> it doesn't matter if you want to handle 0, 1, or multiple events. You can utilize the same API in each case.</p>
<p><code>Observable</code> also has the advantage over <code>Promise</code> to be <strong>cancellable</strong>. If the result of an HTTP request to a server or some other expensive async operation isn't needed anymore, the <code>Subscription</code> of an <code>Observable</code> allows to cancel the subscription, while a <code>Promise</code> will eventually call the success or failed callback even when you don't need the notification or the result it provides anymore.</p>
<p>While a <code>Promise</code> starts immediately, an <code>Observable</code> only starts if you subscribe to it. This is why Observables are called lazy.</p>
<p>Observable provides <strong>operators</strong> like <code>map</code>, <code>forEach</code>, <code>reduce</code>, ... similar to an array</p>
<p>There are also powerful operators like <code>retry()</code>, or <code>replay()</code>, ... that are often quite handy.
<a href=""https://rxjs-dev.firebaseapp.com/guide/operators"" rel=""noreferrer"">A list of operators shipped with rxjs</a></p>
<p>Lazy execution allows to build up a chain of operators before the observable is executed by subscribing, to do a more declarative kind of programming.</p>",,,36,,2016-05-21 17:19:35.403000+00:00,,2020-11-03 18:00:37.750000+00:00,2020-11-03 18:00:37.750000+00:00,,217408.0,,217408.0,37364973,2,1705,,
68,41974490,,"<p>Angular version 2+ provides several ways to add classes conditionally:</p>
<p><strong>type one</strong></p>
<pre><code>[class.my-class]=&quot;step === 'step1'&quot;
</code></pre>
<p><strong>type two</strong></p>
<pre><code>[ngClass]=&quot;{'my-class': step === 'step1'}&quot;
</code></pre>
<p>and multiple option:</p>
<pre><code>[ngClass]=&quot;{'my-class': step === 'step1', 'my-class2':step === 'step2' }&quot;
</code></pre>
<p><strong>type three</strong></p>
<pre><code>[ngClass]=&quot;{1:'my-class1',2:'my-class2',3:'my-class4'}[step]&quot;
</code></pre>
<p><strong>type four</strong></p>
<pre><code>[ngClass]=&quot;(step=='step1')?'my-class1':'my-class2'&quot;
</code></pre>",,,10,,2017-02-01 07:50:31.080000+00:00,,2020-12-20 00:32:09.433000+00:00,2020-12-20 00:32:09.433000+00:00,,7795731.0,,5184681.0,35269179,2,1673,,
69,41573588,,"<h1>PyPI packages not in the standard library:</h1>

<ul>
<li><p><strong><a href=""https://pypi.python.org/pypi/virtualenv"" rel=""noreferrer""><code>virtualenv</code></a></strong> is a very popular tool that creates isolated Python environments for Python libraries. If you're not familiar with this tool, I highly recommend learning it, as it is a very useful tool, and I'll be making comparisons to it for the rest of this answer.</p>

<p>It works by installing a bunch of files in a directory (eg: <code>env/</code>), and then modifying the <code>PATH</code> environment variable to prefix it with a custom <code>bin</code> directory (eg: <code>env/bin/</code>). An exact copy of the <code>python</code> or <code>python3</code> binary is placed in this directory, but Python is programmed to look for libraries relative to its path first, in the environment directory. It's not part of Python's standard library, but is officially blessed by the PyPA (Python Packaging Authority). Once activated, you can install packages in the virtual environment using <code>pip</code>.</p></li>
<li><p><strong><a href=""https://github.com/yyuu/pyenv"" rel=""noreferrer""><code>pyenv</code></a></strong> is used to isolate Python versions. For example, you may want to test your code against Python 2.7, 3.6, 3.7 and 3.8, so you'll need a way to switch between them. Once activated, it prefixes the <code>PATH</code> environment variable with <code>~/.pyenv/shims</code>, where there are special files matching the Python commands (<code>python</code>, <code>pip</code>). These are not copies of the Python-shipped commands; they are special scripts that decide on the fly which version of Python to run based on the <code>PYENV_VERSION</code> environment variable, or the <code>.python-version</code> file, or the <code>~/.pyenv/version</code> file. <code>pyenv</code> also makes the process of downloading and installing multiple Python versions easier, using the command <code>pyenv install</code>.</p></li>
<li><p><strong><a href=""https://github.com/yyuu/pyenv-virtualenv"" rel=""noreferrer""><code>pyenv-virtualenv</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to allow you to use <code>pyenv</code> and <code>virtualenv</code> at the same time conveniently. However, if you're using Python 3.3 or later, <code>pyenv-virtualenv</code> will try to run <code>python -m venv</code> if it is available, instead of <code>virtualenv</code>. You can use <code>virtualenv</code> and <code>pyenv</code> together without <code>pyenv-virtualenv</code>, if you don't want the convenience features.</p></li>
<li><p><strong><a href=""https://pypi.python.org/pypi/virtualenvwrapper"" rel=""noreferrer""><code>virtualenvwrapper</code></a></strong> is a set of extensions to <code>virtualenv</code> (see <a href=""http://virtualenvwrapper.readthedocs.io/en/latest/"" rel=""noreferrer"">docs</a>). It gives you commands like <code>mkvirtualenv</code>, <code>lssitepackages</code>, and especially <code>workon</code> for switching between different <code>virtualenv</code> directories. This tool is especially useful if you want multiple <code>virtualenv</code> directories.</p></li>
<li><p><strong><a href=""https://github.com/yyuu/pyenv-virtualenvwrapper"" rel=""noreferrer""><code>pyenv-virtualenvwrapper</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to conveniently integrate <code>virtualenvwrapper</code> into <code>pyenv</code>.</p></li>
<li><p><strong><a href=""https://pypi.python.org/pypi/pipenv"" rel=""noreferrer""><code>pipenv</code></a></strong> aims to combine <code>Pipfile</code>, <code>pip</code> and <code>virtualenv</code> into one command on the command-line. The <code>virtualenv</code> directory typically gets placed in <code>~/.local/share/virtualenvs/XXX</code>, with <code>XXX</code> being a hash of the path of the project directory. This is different from <code>virtualenv</code>, where the directory is typically in the current working directory. <code>pipenv</code> is meant to be used when developing Python applications (as opposed to libraries). There are alternatives to <code>pipenv</code>, such as <code>poetry</code>, which I won't list here since this question is only about the packages that are similarly named.</p></li>
</ul>

<h1>Standard library:</h1>

<ul>
<li><p><strong><code>pyvenv</code></strong> is a script shipped with Python 3 but <a href=""https://docs.python.org/dev/whatsnew/3.6.html#id8"" rel=""noreferrer"">deprecated in Python 3.6</a> as it had problems (not to mention the confusing name). In Python 3.6+, the exact equivalent is <code>python3 -m venv</code>.</p></li>
<li><p><strong><a href=""https://docs.python.org/3/library/venv.html"" rel=""noreferrer""><code>venv</code></a></strong> is a package shipped with Python 3, which you can run using <code>python3 -m venv</code> (although for some reason some distros separate it out into a separate distro package, such as <code>python3-venv</code> on Ubuntu/Debian). It serves the same purpose as <code>virtualenv</code>, but only has a subset of its features (<a href=""https://virtualenv.pypa.io/en/latest/"" rel=""noreferrer"">see a comparison here</a>). <code>virtualenv</code> continues to be more popular than <code>venv</code>, especially since the former supports both Python 2 and 3.</p></li>
</ul>

<h1>Recommendation for beginners:</h1>

<p>This is my personal recommendation for beginners: start by learning <a href=""https://pypi.org/project/virtualenv/"" rel=""noreferrer""><code>virtualenv</code></a> and <a href=""https://pypi.org/project/pip/"" rel=""noreferrer""><code>pip</code></a>, tools which work with both Python 2 and 3 and in a variety of situations, and pick up other tools once you start needing them.</p>",,,26,,2017-01-10 16:27:43.207000+00:00,,2020-05-29 08:14:45.480000+00:00,2020-05-29 08:14:45.480000+00:00,,247696.0,,247696.0,41573587,2,1643,,
70,39152110,,"<p><strong>RC5 FIX</strong></p>

<p>You need to <code>import { REACTIVE_FORM_DIRECTIVES } from '@angular/forms'</code> in your controller and add it to <code>directives</code> in <code>@Component</code>. That will fix the problem.</p>

<p>After you fix that, you will probably get another error because you didn't add <code>formControlName=""name""</code> to your input in form.</p>

<p><strong>RC6/RC7/Final release FIX</strong></p>

<p>To fix this error, you just need to import <code>ReactiveFormsModule</code> from <code>@angular/forms</code> in your module. Here's the example of a basic module with <code>ReactiveFormsModule</code> import:</p>

<pre><code>import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AppComponent }  from './app.component';

@NgModule({
    imports: [
        BrowserModule,
        FormsModule,
        ReactiveFormsModule
    ],
    declarations: [
        AppComponent
    ],
    bootstrap: [AppComponent]
})

export class AppModule { }
</code></pre>

<p>To explain further, <code>formGroup</code> is a selector for directive named <code>FormGroupDirective</code> that is a part of <code>ReactiveFormsModule</code>, hence the need to import it. It is used to bind an existing <code>FormGroup</code> to a DOM element. You can read more about it on <a href=""https://angular.io/docs/ts/latest/api/forms/index/FormGroupDirective-directive.html"">Angular's official docs page</a>.</p>",,,13,,2016-08-25 18:11:27.123000+00:00,,2016-09-28 00:13:44+00:00,2016-09-28 00:13:44+00:00,,6677986.0,,6677986.0,39152071,2,1613,,
71,38004193,,"<p>Try deleting <code>index.lock</code> file in your <code>.git</code> directory.</p>

<p><code>rm -f .git/index.lock</code></p>

<p>Such problems generally occur when you execute two <code>git</code> commands simultaneously; maybe one from the command prompt and one from an IDE.</p>",,,18,,2016-06-24 01:05:37.173000+00:00,,2018-10-10 10:05:11.687000+00:00,2018-10-10 10:05:11.687000+00:00,,636987.0,,4498523.0,38004148,2,1594,,
72,44781228,,"<h3>Steps for deleting a branch:</h3>

<p>For deleting the <strong>remote branch:</strong></p>

<pre><code>git push origin --delete &lt;your_branch&gt;
</code></pre>

<p>For deleting the <strong>local branch</strong>, you have <strong>three ways</strong>:</p>

<pre><code>1: git branch -D &lt;branch_name&gt;

2: git branch --delete --force &lt;branch_name&gt;  # Same as -D

3: git branch --delete  &lt;branch_name&gt;         # Error on unmerge
</code></pre>

<p><strong>Explain:</strong> OK, just explain what's going on here!</p>

<p>Simply do <code>git push origin --delete</code> to <strong>delete your remote branch <em>only</em></strong>, add the name of the branch at the end and this will delete and <strong>push it to remote</strong> at the same time...</p>

<p>Also, <code>git branch -D</code>, which simply delete the local branch <strong><em>only</em></strong>!...</p>

<p><code>-D</code> stands for <code>--delete --force</code> which will delete the branch even it's not merged (force delete), but you can also use <code>-d</code> which stands for <code>--delete</code> which throw an error respective of the branch merge status...</p>

<p>I also create the <strong>image below</strong> to show the steps:</p>

<p><a href=""https://i.stack.imgur.com/AKWYx.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/AKWYx.jpg"" alt=""Delete a remote and local branch in git""></a></p>",,,4,,2017-06-27 13:13:15.943000+00:00,,2020-04-11 11:59:19.620000+00:00,2020-04-11 11:59:19.620000+00:00,,63550.0,,5423108.0,2003505,2,1580,,
73,39461256,,"<p>Try this:</p>

<p>1- From Xcode menu open: Product > Scheme > Edit Scheme </p>

<p>2- On your Environment Variables set <code>OS_ACTIVITY_MODE</code> = <code>disable</code></p>

<p><a href=""https://i.stack.imgur.com/p7BlV.png""><img src=""https://i.stack.imgur.com/p7BlV.png"" alt=""Screenshot""></a></p>",,,24,,2016-09-13 02:11:47.247000+00:00,,2016-11-01 14:38:00.780000+00:00,2016-11-01 14:38:00.780000+00:00,,1496935.0,,1496935.0,37800790,2,1543,,
74,36882426,,"<p>Try this one </p>

<p>Open Visual Studio Code and press <kbd>Command</kbd> + <kbd>Shift</kbd> + <kbd>P</kbd> or <kbd>F1</kbd> then type <code>Shell</code> in command palette now you are able to find this option like <code>Shell Command : Install code in PATH</code> from suggested list in command palette. Select that options.</p>

<p><a href=""https://i.stack.imgur.com/Ng886.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Ng886.png"" alt=""Open VSCode via Terminal/Command Prompt""></a></p>

<p>That's it.</p>

<p>Now open your terminal type.</p>

<pre><code>$ code .
</code></pre>",,,6,,2016-04-27 06:52:03.290000+00:00,,2020-05-26 07:32:17.400000+00:00,2020-05-26 07:32:17.400000+00:00,,8836784.0,,777147.0,30065227,2,1541,,
75,39633428,,"<p><strong>Step 1:</strong></p>
<p>Open up cmd.exe (note: you <em>may</em> need to run it as an administrator, but this isn't always necessary), then run the below command:</p>
<blockquote>
<p><code>netstat -ano | findstr :&lt;PORT&gt;</code></p>
</blockquote>
<p>(Replace <code>&lt;PORT&gt;</code> with the port number you want, but keep the colon)</p>
<p><img src=""https://i.stack.imgur.com/lEpCZ.png"" alt="""" /></p>
<p>The area circled in red shows the PID (process identifier). Locate the PID of the process that's using the port you want.</p>
<p><strong>Step 2:</strong></p>
<p>Next, run the following command:</p>
<blockquote>
<p><code>taskkill /PID &lt;PID&gt; /F</code></p>
</blockquote>
<p>(No colon this time)</p>
<p><img src=""https://i.stack.imgur.com/8k64x.png"" alt="""" /></p>
<p>Lastly, you can check whether the operation succeeded or not by re-running the command in &quot;Step 1&quot;. If it was successful you shouldn't see any more search results for that port number.</p>",,,11,,2016-09-22 07:59:14.253000+00:00,,2020-07-17 11:31:27.323000+00:00,2020-07-17 11:31:27.323000+00:00,,4008392.0,,3626371.0,39632667,2,1523,,
76,50719379,,"<p>The issue might be occurring because of multiple Plist or other files within App-</p>

<p><em>Solution -> Open target -> Build phases > Copy Bundle Resources</em> and remove <code>info.plist</code> from there.</p>

<p><a href=""https://i.stack.imgur.com/whT0P.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/whT0P.png"" alt=""enter image description here""></a> </p>

<p><strong>Note:</strong> If you have developed a watch app too then you will have to remove the plist from the watch and watch-extension too.</p>",,,34,,2018-06-06 11:32:11.030000+00:00,,2019-02-19 16:03:32.950000+00:00,2019-02-19 16:03:32.950000+00:00,,3024579.0,,3024579.0,50718018,2,1481,,
77,39604469,,"<h3>1. Make sure you drag Visual Studio Code app into the -Applications- folder</h3>
<p><em>Otherwise (as noted in the comments) you'll have to go through this process again after reboot</em></p>
<hr />
<h3>2. Next, open Visual Studio Code</h3>
<p>Open the <strong>Command Palette</strong> via <strong>(⇧⌘P)</strong> and type <code>shell command</code> to find the Shell Command:</p>
<h3>&gt; Install 'code' command in PATH** command.</h3>
<p><a href=""https://i.stack.imgur.com/3gYHb.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/3gYHb.png"" alt=""![Command Palette"" /></a></p>
<blockquote>
<p>After executing the command, restart the terminal for the new $PATH
value to take effect. You'll be able to simply type 'code .' in any
folder to start editing files in that folder. The &quot;.&quot; Simply means &quot;current directory&quot;</p>
</blockquote>
<p>(Source: <a href=""https://code.visualstudio.com/docs/setup/mac#_launching-from-the-command-line"" rel=""noreferrer"">VS Code documentation</a>)</p>
<hr />
<p><strong>NOTE:</strong> If you're running a build based off the OSS repository... You will need to run <code>code-oss .</code> <a href=""https://stackoverflow.com/users/1366137/dzeimsas-zvirblis"">@Dzeimsas Zvirblis</a></p>",,,9,,2016-09-20 22:06:40.673000+00:00,,2020-08-17 13:22:48.620000+00:00,2020-08-17 13:22:48.620000+00:00,,1492009.0,,1492009.0,29955500,2,1456,,
78,56996020,,"<h2>app/build.gradle</h2>

<pre><code>android {
    ...
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}
</code></pre>

<p>GL</p>

<p><a href=""https://developer.android.com/studio/write/java8-support"" rel=""noreferrer"">Use Java 8 language features</a></p>",,,18,,2019-07-11 19:21:58.390000+00:00,,2020-02-17 13:38:15.977000+00:00,2020-02-17 13:38:15.977000+00:00,,5279996.0,,5279996.0,48988778,2,1445,,
79,36358502,,"<p>To update the local list of remote branches:</p>

<pre><code>git remote update origin --prune
</code></pre>

<p>To show all local and remote branches that (local) Git knows about</p>

<pre><code>git branch -a
</code></pre>",,,11,,2016-04-01 14:09:03.513000+00:00,,2019-11-23 15:09:39.717000+00:00,2019-11-23 15:09:39.717000+00:00,,2865345.0,,5991910.0,36358265,2,1439,,
80,38858040,,"<p>If your <code>targetSdkVersion &gt;= 24</code>, then we have to use <code>FileProvider</code> class to give access to the particular file or folder to make them accessible for other apps. We create our own class inheriting <code>FileProvider</code> in order to make sure our FileProvider doesn't conflict with FileProviders declared in imported dependencies as described <a href=""https://commonsware.com/blog/2017/06/27/fileprovider-libraries.html"" rel=""noreferrer"">here</a>.</p>
<p>Steps to replace <code>file://</code> URI with <code>content://</code> URI:</p>
<ul>
<li>Add a FileProvider <code>&lt;provider&gt;</code> tag in <code>AndroidManifest.xml</code> under <code>&lt;application&gt;</code> tag. Specify a unique authority for the <code>android:authorities</code> attribute to avoid conflicts, imported dependencies might specify <code>${applicationId}.provider</code> and other commonly used authorities.</li>
</ul>
<pre class=""lang-xml prettyprint-override""><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
    ...
    &lt;application
        ...
        &lt;provider
            android:name=&quot;androidx.core.content.FileProvider&quot;
            android:authorities=&quot;${applicationId}.provider&quot;
            android:exported=&quot;false&quot;
            android:grantUriPermissions=&quot;true&quot;&gt;
            &lt;meta-data
                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;
                android:resource=&quot;@xml/provider_paths&quot; /&gt;
        &lt;/provider&gt;
    &lt;/application&gt;
&lt;/manifest&gt;
</code></pre>
<ul>
<li>Then create a <code>provider_paths.xml</code> file in <code>res/xml</code> folder. A folder may be needed to be created if it doesn't exist yet. The content of the file is shown below. It describes that we would like to share access to the External Storage at root folder <code>(path=&quot;.&quot;)</code> with the name <strong>external_files</strong>.</li>
</ul>
<pre class=""lang-xml prettyprint-override""><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;paths&gt;
    &lt;external-path name=&quot;external_files&quot; path=&quot;.&quot;/&gt;
&lt;/paths&gt;
</code></pre>
<ul>
<li><p>The final step is to change the line of code below in</p>
<pre><code> Uri photoURI = Uri.fromFile(createImageFile());
</code></pre>
<p>to</p>
<pre><code> Uri photoURI = FileProvider.getUriForFile(context, context.getApplicationContext().getPackageName() + &quot;.provider&quot;, createImageFile());
</code></pre>
</li>
<li><p><strong>Edit:</strong> If you're using an intent to make the system open your file, you may need to add the following line of code:</p>
<pre><code> intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
</code></pre>
</li>
</ul>
<p>Please refer to the full code and solution that have been explained <a href=""https://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en"" rel=""noreferrer"">here.</a></p>",,,37,,2016-08-09 18:33:21.063000+00:00,,2020-11-28 15:16:41.997000+00:00,2020-11-28 15:16:41.997000+00:00,,7619808.0,,6696517.0,38200282,2,1427,,
81,40107973,,"<p>In my case, the error was just <code>fatal: refusing to merge unrelated histories</code> on every try, especially the first pull request after remotely adding a Git repository.</p>

<p>Using the <code>--allow-unrelated-histories</code> flag worked with a pull request in this way:</p>

<pre><code>git pull origin branchname --allow-unrelated-histories
</code></pre>",,,11,,2016-10-18 12:13:29.207000+00:00,,2019-06-05 11:30:37.063000+00:00,2019-06-05 11:30:37.063000+00:00,,63550.0,,3151337.0,37937984,2,1399,,
82,43574427,,"<p>The JAXB APIs are considered to be Java EE APIs and therefore are no longer contained on the default classpath in Java SE 9. In Java 11, they are completely removed from the JDK.</p>
<p>Java 9 introduces the concepts of modules, and by default, the <code>java.se</code> aggregate module is available on the classpath (or rather, module-path). As the name implies, the <code>java.se</code> aggregate module does <em>not</em> include the Java EE APIs that have been traditionally bundled with Java 6/7/8.</p>
<p>Fortunately, these Java EE APIs that were provided in JDK 6/7/8 are still in the JDK, but they just aren't on the classpath by default. The extra Java EE APIs are provided in the following modules:</p>
<pre><code>java.activation
java.corba
java.transaction
java.xml.bind  &lt;&lt; This one contains the JAXB APIs
java.xml.ws
java.xml.ws.annotation
</code></pre>
<p><strong>Quick and dirty solution: (JDK 9/10 only)</strong></p>
<p>To make the JAXB APIs available at runtime, specify the following command-line option:</p>
<p><code>--add-modules java.xml.bind</code></p>
<p><strong>But I still need this to work with Java 8!!!</strong></p>
<p>If you try specifying <code>--add-modules</code> with an older JDK, it will blow up because it's an unrecognized option. I suggest one of two options:</p>
<ol>
<li>You can set any Java 9+ only options using the <code>JDK_JAVA_OPTIONS</code> environment variable. This environment variable is <a href=""https://www.oracle.com/technetwork/java/javase/9-new-features-3745613.html#JDK-8170832"" rel=""noreferrer"">automatically read</a> by the <code>java</code> launcher for Java 9+.</li>
<li>You can add the <code>-XX:+IgnoreUnrecognizedVMOptions</code> to make the JVM silently ignore unrecognized options, instead of blowing up. But beware! Any other command-line arguments you use will no longer be validated for you by the JVM. This option works with Oracle/OpenJDK as well as IBM JDK (as of JDK 8sr4).</li>
</ol>
<hr />
<p><strong>Alternate quick solution: (JDK 9/10 only)</strong></p>
<p>Note that you can make all of the above Java EE modules available at run time by specifying the <code>--add-modules java.se.ee</code> option. The <code>java.se.ee</code> module is an aggregate module that includes <code>java.se.ee</code> as well as the above Java EE API modules. Note, this <strong>doesn't work on Java 11</strong> because <code>java.se.ee</code> was removed in Java 11.</p>
<hr />
<h2>Proper long-term solution: (JDK 9 and beyond)</h2>
<p>The Java EE API modules listed above are all marked <code>@Deprecated(forRemoval=true)</code> because they are <a href=""http://openjdk.java.net/jeps/320"" rel=""noreferrer"">scheduled for removal</a> in <a href=""http://openjdk.java.net/projects/jdk/11/"" rel=""noreferrer"">Java 11</a>. So the <code>--add-module</code> approach will no longer work in Java 11 out-of-the-box.</p>
<p>What you will need to do in Java 11 and forward is include your own copy of the Java EE APIs on the classpath or module path. For example, you can add the JAX-B APIs as a Maven dependency like this:</p>
<pre><code>&lt;!-- API, java.xml.bind module --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;jakarta.xml.bind&lt;/groupId&gt;
    &lt;artifactId&gt;jakarta.xml.bind-api&lt;/artifactId&gt;
    &lt;version&gt;2.3.2&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- Runtime, com.sun.xml.bind module --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;
    &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;
    &lt;version&gt;2.3.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>See the <a href=""https://eclipse-ee4j.github.io/jaxb-ri/"" rel=""noreferrer"">JAXB Reference Implementation page</a> for more details on JAXB.</p>
<p>For full details on Java modularity, see <a href=""http://openjdk.java.net/jeps/261"" rel=""noreferrer"">JEP 261: Module System</a></p>
<p><strong>For Gradle or Android Studio developer: (JDK 9 and beyond)</strong></p>
<p>Add the following dependencies to your <code>build.gradle</code> file:</p>
<pre><code>dependencies {
    // JAX-B dependencies for JDK 9+
    implementation &quot;jakarta.xml.bind:jakarta.xml.bind-api:2.3.2&quot;
    implementation &quot;org.glassfish.jaxb:jaxb-runtime:2.3.2&quot;
}
</code></pre>",,,30,,2017-04-23 17:40:23.460000+00:00,,2020-09-08 11:47:07.783000+00:00,2020-09-08 11:47:07.783000+00:00,,1746118.0,,3814029.0,43574426,2,1397,,
83,41407246,,"<p>Below you can find colors reference of text to command when running node.js application:</p>

<pre><code>console.log('\x1b[36m%s\x1b[0m', 'I am cyan');  //cyan
console.log('\x1b[33m%s\x1b[0m', stringToMakeYellow);  //yellow
</code></pre>

<p>Note <code>%s</code> is where in the string (the second argument) gets injected. <code>\x1b[0m</code> resets the terminal color so it doesn't continue to be the chosen color anymore after this point.</p>

<p><strong>Colors reference</strong></p>

<pre><code>Reset = ""\x1b[0m""
Bright = ""\x1b[1m""
Dim = ""\x1b[2m""
Underscore = ""\x1b[4m""
Blink = ""\x1b[5m""
Reverse = ""\x1b[7m""
Hidden = ""\x1b[8m""

FgBlack = ""\x1b[30m""
FgRed = ""\x1b[31m""
FgGreen = ""\x1b[32m""
FgYellow = ""\x1b[33m""
FgBlue = ""\x1b[34m""
FgMagenta = ""\x1b[35m""
FgCyan = ""\x1b[36m""
FgWhite = ""\x1b[37m""

BgBlack = ""\x1b[40m""
BgRed = ""\x1b[41m""
BgGreen = ""\x1b[42m""
BgYellow = ""\x1b[43m""
BgBlue = ""\x1b[44m""
BgMagenta = ""\x1b[45m""
BgCyan = ""\x1b[46m""
BgWhite = ""\x1b[47m""
</code></pre>

<p>EDIT:</p>

<p>For example, <code>\x1b[31m</code> is an <em>escape sequence</em> that will be intercepted by your terminal and instructs it to switch to the red color. In fact, <code>\x1b</code> is the code for the <strong>non-printable control character</strong> <code>escape</code>. Escape sequences dealing only with colors and styles are also known as <strong><a href=""https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"" rel=""noreferrer"">ANSI escape code</a></strong> and are standardized, so therefore they (should) work on any platform.</p>

<p>Wikipedia has a nice comparison of how different terminals display colors 
<a href=""https://en.wikipedia.org/wiki/ANSI_escape_code#Colors"" rel=""noreferrer"">https://en.wikipedia.org/wiki/ANSI_escape_code#Colors</a></p>",,,10,,2016-12-31 09:53:38.580000+00:00,,2018-10-19 17:46:05.030000+00:00,2018-10-19 17:46:05.030000+00:00,,457245.0,,632524.0,9781218,2,1393,,
84,44493379,,"<p><strong>tl;dr</strong></p>
<p>Just replace:</p>
<ul>
<li><code>compile</code> with <code>implementation</code> (if you don't need transitivity) or <code>api</code> (if you need transitivity)</li>
<li><code>testCompile</code> with <code>testImplementation</code></li>
<li><code>debugCompile</code> with <code>debugImplementation</code></li>
<li><code>androidTestCompile</code> with <code>androidTestImplementation</code></li>
<li><code>compileOnly</code> is still valid. It was added in 3.0 to replace provided and not compile. (<code>provided</code> introduced when Gradle didn't have a configuration name for that use-case and named it after Maven's provided scope.)</li>
</ul>
<p>It is one of the breaking changes coming with <a href=""https://developer.android.com/studio/releases/gradle-plugin#3-0-0"" rel=""noreferrer"">Android Gradle plugin 3.0</a> that Google <a href=""https://youtu.be/7ll-rkLCtyk?t=22m20s"" rel=""noreferrer"">announced at IO17</a>.</p>
<p>The <code>compile</code> configuration is <a href=""https://youtu.be/7ll-rkLCtyk?t=29m18s"" rel=""noreferrer"">now deprecated</a> and should be replaced by <code>implementation</code> or <code>api</code></p>
<p>From the <a href=""https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation"" rel=""noreferrer"">Gradle documentation</a>:</p>
<blockquote>
<pre><code>dependencies {
    api 'commons-httpclient:commons-httpclient:3.1'
    implementation 'org.apache.commons:commons-lang3:3.5'
}
</code></pre>
<p>Dependencies appearing in the <code>api</code> configurations will be
transitively exposed to consumers of the library, and as such will
appear on the compile classpath of consumers.</p>
<p>Dependencies found in the <code>implementation</code> configuration will, on the
other hand, not be exposed to consumers, and therefore not leak into
the consumers' compile classpath. This comes with several benefits:</p>
<ul>
<li>dependencies do not leak into the compile classpath of consumers anymore, so you will never accidentally depend on a transitive
dependency</li>
<li>faster compilation thanks to reduced classpath size</li>
<li>less recompilations when implementation dependencies change: consumers would not need to be recompiled</li>
<li>cleaner publishing: when used in conjunction with the new maven-publish plugin, Java libraries produce POM files that
distinguish exactly between what is required to compile against the
library and what is required to use the library at runtime (in other
words, don't mix what is needed to compile the library itself and what
is needed to compile against the library).</li>
</ul>
<p><strong>The compile configuration still exists, but should not be used as it will not offer the guarantees that the <code>api</code> and <code>implementation</code> configurations provide.</strong></p>
</blockquote>
<hr />
<p><strong>Note:</strong> if you are only using a library in your app module -the common case- you won't notice any difference.<br />
you will only see the difference if you have a complex project with modules depending on each other, or you are creating a library.</p>",,,29,,2017-06-12 07:13:13.100000+00:00,,2020-09-07 14:46:00.517000+00:00,2020-09-07 14:46:00.517000+00:00,,9298629.0,,3998402.0,44493378,2,1390,,
85,42742610,,"<p>Some systems like Ubuntu, mysql is using by default the <a href=""https://dev.mysql.com/doc/mysql-security-excerpt/5.5/en/socket-pluggable-authentication.html"" rel=""noreferrer"">UNIX auth_socket plugin</a>.</p>
<p>Basically means that: <em>db_users using it, will be &quot;auth&quot; by <strong>the system user credentias.</strong></em> You can see if your <code>root</code> user is set up like this by doing the following:</p>
<pre><code>$ sudo mysql -u root # I had to use &quot;sudo&quot; since is new installation

mysql&gt; USE mysql;
mysql&gt; SELECT User, Host, plugin FROM mysql.user;

+------------------+-----------------------+
| User             | plugin                |
+------------------+-----------------------+
| root             | auth_socket           |
| mysql.sys        | mysql_native_password |
| debian-sys-maint | mysql_native_password |
+------------------+-----------------------+
</code></pre>
<p>As you can see in the query, the <code>root</code> user is using the <code>auth_socket</code> plugin</p>
<p>There are 2 ways to solve this:</p>
<ol>
<li>You can set the root user to use the <code>mysql_native_password</code> plugin</li>
<li>You can create a new <code>db_user</code> with you <code>system_user</code> (recommended)</li>
</ol>
<p><strong>Option 1:</strong></p>
<pre><code>$ sudo mysql -u root # I had to use &quot;sudo&quot; since is new installation

mysql&gt; USE mysql;
mysql&gt; UPDATE user SET plugin='mysql_native_password' WHERE User='root';
mysql&gt; FLUSH PRIVILEGES;
mysql&gt; exit;

$ sudo service mysql restart
</code></pre>
<p><strong>Option 2:</strong> (replace YOUR_SYSTEM_USER with the username you have)</p>
<pre><code>$ sudo mysql -u root # I had to use &quot;sudo&quot; since is new installation

mysql&gt; USE mysql;
mysql&gt; CREATE USER 'YOUR_SYSTEM_USER'@'localhost' IDENTIFIED BY 'YOUR_PASSWD';
mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'YOUR_SYSTEM_USER'@'localhost';
mysql&gt; UPDATE user SET plugin='auth_socket' WHERE User='YOUR_SYSTEM_USER';
mysql&gt; FLUSH PRIVILEGES;
mysql&gt; exit;

$ sudo service mysql restart
</code></pre>
<p>Remember that if you use option #2 you'll have to connect to mysql as your system username (<code>mysql -u YOUR_SYSTEM_USER</code>)</p>
<p><strong>Note:</strong> On some systems (e.g., Debian stretch) 'auth_socket' plugin is called <a href=""https://mariadb.com/kb/en/library/authentication-plugin-unix-socket/"" rel=""noreferrer"">'unix_socket'</a>, so the corresponding SQL command should be: <code>UPDATE user SET plugin='unix_socket' WHERE User='YOUR_SYSTEM_USER';</code></p>
<p><strong>Update:</strong>
from @andy's comment seems that mysql 8.x.x updated/replaced the <code>auth_socket</code> for <code>caching_sha2_password</code> I don't have a system setup with mysql 8.x.x to test this, however the steps above should help you to understand the issue. Here's the reply:</p>
<p><em>One change as of MySQL 8.0.4 is that the new default authentication plugin is 'caching_sha2_password'. The new 'YOUR_SYSTEM_USER' will have this auth plugin and you can login from the bash shell now with &quot;mysql -u YOUR_SYSTEM_USER -p&quot; and provide the password for this user on the prompt. No need for the &quot;UPDATE user SET plugin&quot; step. For the 8.0.4 default auth plugin update see, <a href=""https://mysqlserverteam.com/mysql-8-0-4-new-default-authentication-plugin-caching_sha2_password/"" rel=""noreferrer"">https://mysqlserverteam.com/mysql-8-0-4-new-default-authentication-plugin-caching_sha2_password/</a></em></p>",,,27,,2017-03-12 01:17:59.197000+00:00,,2020-12-16 19:59:36.867000+00:00,2020-12-16 19:59:36.867000+00:00,,2580302.0,,2580302.0,39281594,2,1347,,
86,36033983,,"<p><strong>Solution 1:</strong>
Remove <strong>ONLY_FULL_GROUP_BY</strong> from mysql console</p>

<pre><code>mysql &gt; SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));
</code></pre>

<p>you can read more <a href=""http://johnemb.blogspot.com.ng/2014/09/adding-or-removing-individual-sql-modes.html"" rel=""noreferrer"">here</a> </p>

<p><strong>Solution 2:</strong> Remove <strong>ONLY_FULL_GROUP_BY</strong> from phpmyadmin</p>

<ul>
<li>Open phpmyadmin &amp; select localhost  </li>
<li>Click on menu Variables &amp; scroll down for sql mode</li>
<li>Click on edit button to change the values &amp; remove <strong>ONLY_FULL_GROUP_BY</strong> &amp; click on save.
<a href=""https://i.stack.imgur.com/5CQdo.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/5CQdo.png"" alt=""enter image description here""></a></li>
</ul>",,,25,,2016-03-16 11:11:40.887000+00:00,,2018-02-01 08:35:08.317000+00:00,2018-02-01 08:35:08.317000+00:00,,4398075.0,,4398075.0,23921117,2,1305,,
87,35979751,,"<h3>Let's start by explaining what a tag in git is</h3>
<p><a href=""https://i.stack.imgur.com/yRIIc.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/yRIIc.png"" alt=""enter image description here"" /></a></p>
<blockquote>
<p>A tag is used to label and mark a specific <strong>commit</strong> in the history.<br />
It is usually used to mark release points (eg. v1.0, etc.).</p>
</blockquote>
<blockquote>
<p>Although a tag may appear similar to a branch, <strong>a tag, however, does not change</strong>. It points <strong>directly</strong> to a <strong>specific commit</strong> in the history and will not change unless explicitly updated.</p>
</blockquote>
<p><a href=""https://i.stack.imgur.com/Xy20U.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/Xy20U.png"" alt=""enter image description here"" /></a></p>
<hr />
<p>You will not be able to checkout the tags if it's not locally in your repository so first, you have to <code>fetch</code> the tags to your local repository.</p>
<p><strong>First, make sure that the tag exists locally by doing</strong></p>
<pre><code># --all will fetch all the remotes.
# --tags will fetch all tags as well
$ git fetch --all --tags --prune
</code></pre>
<p><strong>Then check out the tag by running</strong></p>
<pre><code>$ git checkout tags/&lt;tag_name&gt; -b &lt;branch_name&gt;
</code></pre>
<p>Instead of <code>origin</code> use the <code>tags/</code> prefix.</p>
<hr />
<p>In this sample you have 2 tags version 1.0 &amp; version 1.1 you can check them out with any of the following:</p>
<pre><code>$ git checkout A  ...
$ git checkout version 1.0  ...
$ git checkout tags/version 1.0  ...
</code></pre>
<p>All of the above will do the same since the tag is only a pointer to a given commit.</p>
<p><a href=""https://i.stack.imgur.com/X4lvg.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/X4lvg.png"" alt=""enter image description here"" /></a><br />
origin: <a href=""https://backlog.com/git-tutorial/img/post/stepup/capture_stepup4_1_1.png"" rel=""noreferrer"">https://backlog.com/git-tutorial/img/post/stepup/capture_stepup4_1_1.png</a></p>
<hr />
<h1>How to see the list of all tags?</h1>
<pre><code># list all tags
$ git tag

# list all tags with given pattern ex: v-
$ git tag --list 'v-*'
</code></pre>
<hr />
<h1>How to create tags?</h1>
<p>There are 2 ways to create a tag:</p>
<pre><code># lightweight tag 
$ git tag 

# annotated tag
$ git tag -a
</code></pre>
<p>The difference between the 2 is that when creating an annotated tag you can add metadata as you have in a git commit:<br />
name, e-mail, date, comment &amp; signature</p>
<p><a href=""https://i.stack.imgur.com/EwBtF.jpg"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/EwBtF.jpg"" alt=""enter image description here"" /></a></p>
<h1>How to delete tags?</h1>
<h3>Delete a local tag</h3>
<pre><code>$ git tag -d &lt;tag_name&gt;
Deleted tag &lt;tag_name&gt; (was 000000)
</code></pre>
<p><strong>Note:</strong> If you try to delete a non existig Git tag, there will be see the following error:</p>
<pre><code>$ git tag -d &lt;tag_name&gt;
error: tag '&lt;tag_name&gt;' not found.
</code></pre>
<h3>Delete remote tags</h3>
<pre><code># Delete a tag from the server with push tags
$ git push --delete origin &lt;tag name&gt;
</code></pre>
<h1>How to clone a specific tag?</h1>
<p>In order to grab the content of a given tag, you can use the <code>checkout</code> command. As explained above tags are like any other commits so we can use <code>checkout</code> and instead of using the SHA-1 simply replacing it with the <em>tag_name</em></p>
<p><strong>Option 1:</strong></p>
<pre><code># Update the local git repo with the latest tags from all remotes
$ git fetch --all

# checkout the specific tag
$ git checkout tags/&lt;tag&gt; -b &lt;branch&gt;
</code></pre>
<p><strong>Option 2:</strong></p>
<h3>Using the clone command</h3>
<p>Since git supports <em>shallow clone</em> by adding the <code>--branch</code> to the clone command we can use the tag name instead of the branch name. Git knows how to &quot;translate&quot; the given SHA-1 to the relevant commit</p>
<pre><code># Clone a specific tag name using git clone 
$ git clone &lt;url&gt; --branch=&lt;tag_name&gt;
</code></pre>
<blockquote>
<p><strong>git clone --branch=</strong></p>
<p><em><code>--branch</code> can also take tags and detaches the HEAD at that commit in the resulting repository.</em></p>
</blockquote>
<hr />
<h1>How to push tags?</h1>
<h3><strong><code>git push --tags</code></strong></h3>
<p>To push all tags:</p>
<pre><code># Push all tags
$ git push --tags 
</code></pre>
<h3>Using the <code>refs/tags</code> instead of just specifying the <code>&lt;tagname&gt;</code>.</h3>
<p>Why?</p>
<ul>
<li>It's recommended to use <code>refs/tags</code> since sometimes tags can have the same name as your branches and a simple git push will push the branch instead of the tag</li>
</ul>
<p>To push annotated tags and current history chain tags use:</p>
<h3><strong><code>git push --follow-tags</code></strong></h3>
<p>This flag <code>--follow-tags</code> pushes both <strong>commits</strong> and <strong>only tags</strong> that are both:</p>
<ul>
<li>Annotated tags (so you can skip local/temp build tags)</li>
<li>Reachable tags (an ancestor) from the current branch (located on the history)</li>
</ul>
<p><a href=""https://i.stack.imgur.com/qLEtr.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/qLEtr.png"" alt=""enter image description here"" /></a></p>
<p>From Git 2.4 you can set it using configuration</p>
<pre><code>$ git config --global push.followTags true
</code></pre>
<hr />
<p>Cheatsheet:
<a href=""https://i.stack.imgur.com/xR2sf.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/xR2sf.png"" alt=""enter image description here"" /></a></p>
<hr />",,,8,,2016-03-14 04:49:44.130000+00:00,,2020-12-15 11:14:09.430000+00:00,2020-12-15 11:14:09.430000+00:00,,1755598.0,,1755598.0,35979642,2,1302,,
88,36623117,,"<p><sub>Looking at the comments on the accepted answer and the generic nature of this question ('don't work'), I thought this might be a good place for some general explanations about the issues involved here. So this answer is intended as background info / elaboration on the specific use case of the OP. Please bear with me.</sub></p>
<h3>Server-side vs Client-side</h3>
<p>The first big thing to understand about this is that there are now 2 places where the URL is interpreted, whereas there used to be only 1 in 'the old days'. In the past, when life was simple, some user sent a request for <code>http://example.com/about</code> to the server, which inspected the path part of the URL, determined the user was requesting the about page, and then sent back that page.</p>
<p>With client-side routing, which is what React-Router provides, things are less simple. At first, the client does not have any JS code loaded yet. So the very first request will always be to the server. That will then return a page that contains the needed script tags to load React and React Router etc. Only when those scripts have loaded does phase 2 start. In phase 2, when the user clicks on the 'About us' navigation link, for example, the URL is changed <em>locally only</em> to <code>http://example.com/about</code> (made possible by the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/History_API"" rel=""noreferrer"">History API</a>), but <strong>no request to the server is made</strong>.  Instead, React Router does its thing on the client-side, determines which React view to render, and renders it. Assuming your about page does not need to make any REST calls, it's done already. You have transitioned from Home to About Us without any server request having fired.</p>
<p>So basically when you click a link, some Javascript runs that manipulates the URL in the address bar, <em>without causing a page refresh</em>, which in turn causes React Router to perform a page transition <strong>on the client-side</strong>.</p>
<p>But now consider what happens if you copy-paste the URL in the address bar and e-mail it to a friend. Your friend has not loaded your website yet. In other words, she is still in <em>phase 1</em>. No React Router is running on her machine yet. So her browser will make a <strong>server request</strong> to <code>http://example.com/about</code>.</p>
<p>And this is where your trouble starts. Until now, you could get away with just placing a static HTML at the webroot of your server. But that would give <code>404</code> errors for all other URLs <em>when requested from the server</em>. Those same URLs work fine <em>on the client-side</em>, because there React Router is doing the routing for you, but they fail <em>on the server-side</em> unless you make your server understand them.</p>
<h3>Combining server- and client-side routing</h3>
<p>If you want the <code>http://example.com/about</code> URL to work on both the server- and the client-side, you need to set up routes for it on both the server- and the client-side. Makes sense right?</p>
<p>And this is where your choices begin. Solutions range from bypassing the problem altogether, via a catch-all route that returns the bootstrap HTML, to the full-on isomorphic approach where both the server and the client run the same JS code.</p>
<p>.</p>
<h2>Bypassing the problem altogether: Hash History</h2>
<p>With <a href=""https://github.com/jintoppy/react-training/blob/master/basic/node_modules/react-router/docs/guides/Histories.md#hashhistory"" rel=""noreferrer"">Hash History</a> instead of <a href=""https://github.com/jintoppy/react-training/blob/master/basic/node_modules/react-router/docs/guides/Histories.md#browserhistory"" rel=""noreferrer"">Browser History</a>, your URL for the about page would look something like this:
<code>http://example.com/#/about</code>
The part after the hash (<code>#</code>) symbol is not sent to the server. So the server only sees <code>http://example.com/</code> and sends the index page as expected. React-Router will pick up the <code>#/about</code> part and show the correct page.</p>
<p><strong>Downsides</strong>:</p>
<ul>
<li>'ugly' URLs</li>
<li>Server-side rendering is not possible with this approach. As far as Search Engine Optimization (SEO) is concerned, your website consists of a single page with hardly any content on it.</li>
</ul>
<p>.</p>
<h2>Catch-all</h2>
<p>With this approach, you do use Browser History but just set up a catch-all on the server that sends <code>/*</code> to <code>index.html</code>, effectively giving you much the same situation as with Hash History. You do have clean URLs however and you could improve upon this scheme later without having to invalidate all your user's favorites.</p>
<p><strong>Downsides</strong>:</p>
<ul>
<li>More complex to set up</li>
<li>Still no good SEO</li>
</ul>
<p>.</p>
<h2>Hybrid</h2>
<p>In the hybrid approach, you expand upon the catch-all scenario by adding specific scripts for specific routes. You could make some simple PHP scripts to return the most important pages of your site with content included, so Googlebot can at least see what's on your page.</p>
<p><strong>Downsides</strong>:</p>
<ul>
<li>Even more complex to set up</li>
<li>Only good SEO for those routes you give the special treatment</li>
<li>Duplicating code for rendering content on server and client</li>
</ul>
<p>.</p>
<h2>Isomorphic</h2>
<p>What if we use Node JS as our server so we can run <em>the same</em> JS code on both ends? Now, we have all our routes defined in a single react-router config and we don't need to duplicate our rendering code. This is 'the holy grail' so to speak. The server sends the exact same markup as we would end up with if the page transition had happened on the client. This solution is optimal in terms of SEO.</p>
<p><strong>Downsides</strong>:</p>
<ul>
<li>Server <em>must</em> (be able to) run JS. I've experimented with Java i.c.w. Nashorn but it's not working for me. In practice, it mostly means you must use a Node JS based server.</li>
<li>Many tricky environmental issues (using <code>window</code> on server-side etc)</li>
<li>Steep learning curve</li>
</ul>
<p>.</p>
<h3>Which should I use?</h3>
<p>Choose the one that you can get away with. Personally, I think the catch-all is simple enough to set up, so that would be my minimum. This setup allows you to improve on things over time. If you are already using Node JS as your server platform, I'd definitely investigate doing an isomorphic app. Yes, it's tough at first, but once you get the hang of it it's actually a very elegant solution to the problem.</p>
<p>So basically, for me, that would be the deciding factor. If my server runs on Node JS, I'd go isomorphic; otherwise, I would go for the Catch-all solution and just expand on it (Hybrid solution) as time progresses and SEO requirements demand it.</p>
<p>If you'd like to learn more about isomorphic (also called 'universal') rendering with React, there are some good tutorials on the subject:</p>
<ul>
<li><a href=""https://www.smashingmagazine.com/2015/04/react-to-the-future-with-isomorphic-apps/"" rel=""noreferrer"">React to the future with isomorphic apps</a></li>
<li><a href=""https://reactjsnews.com/isomorphic-react-in-real-life"" rel=""noreferrer"">The Pain and the Joy of creating isomorphic apps in ReactJS</a></li>
<li><a href=""https://strongloop.com/strongblog/node-js-react-isomorphic-javascript-why-it-matters/"" rel=""noreferrer"">How to Implement Node + React Isomorphic JavaScript &amp; Why it Matters</a></li>
</ul>
<p>Also, to get you started, I recommend looking at some starter kits. Pick one that matches your choices for the technology stack (remember, React is just the V in MVC, you need more stuff to build a full app). Start with looking at the one published by Facebook itself:</p>
<ul>
<li><a href=""https://github.com/facebookincubator/create-react-app"" rel=""noreferrer"">Create React App</a></li>
</ul>
<p>Or pick one of the many by the community. There is a nice site now that tries to index all of them:</p>
<ul>
<li><a href=""http://andrewhfarmer.com/starter-project/"" rel=""noreferrer"">Pick your perfect React starter project</a></li>
</ul>
<p>I started with these:</p>
<ul>
<li><a href=""https://github.com/RickWong/react-isomorphic-starterkit"" rel=""noreferrer"">React Isomorphic Starterkit</a></li>
<li><a href=""https://github.com/erikras/react-redux-universal-hot-example"" rel=""noreferrer"">React Redux Universal Hot Example</a></li>
</ul>
<p>Currently, I am using a home-brew version of universal rendering that was inspired by the two starter kits above, but they are out of date now.</p>
<p>Good luck with your quest!</p>",,,37,,2016-04-14 12:27:49.427000+00:00,,2021-01-22 11:11:00.723000+00:00,2021-01-22 11:11:00.723000+00:00,,1151144.0,,286685.0,27928372,2,1294,,
89,38060437,,"<h1>Language features:</h1>

<h2>Templates and Generic Code</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0091r3.html"" rel=""noreferrer"">Template argument deduction for class templates</a></p>

<ul>
<li>Like how functions deduce template arguments, now constructors can deduce the template arguments of the class</li>
<li><a href=""http://wg21.link/p0433r2"" rel=""noreferrer"">http://wg21.link/p0433r2</a> <a href=""http://wg21.link/p0620r0"" rel=""noreferrer"">http://wg21.link/p0620r0</a> <a href=""http://wg21.link/p0512r0"" rel=""noreferrer"">http://wg21.link/p0512r0</a></li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0127r2.html"" rel=""noreferrer""><code>template &lt;auto&gt;</code></a></p>

<ul>
<li>Represents a value of any (non-type template argument) type.</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4268.html"" rel=""noreferrer"">Non-type template arguments fixes</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4051.html"" rel=""noreferrer""><code>template&lt;template&lt;class...&gt;typename bob&gt; struct foo {}</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html"" rel=""noreferrer"">( Folding + ... + expressions ) </a> and <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf"" rel=""noreferrer"">Revisions</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3922.html"" rel=""noreferrer""><code>auto x{8};</code> is an <code>int</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0195r1.html"" rel=""noreferrer"">modernizing <code>using</code> with <code>...</code> and lists</a></p></li>
</ul>

<h2>Lambda</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0170r1.pdf"" rel=""noreferrer"">constexpr lambdas</a></p>

<ul>
<li>Lambdas are implicitly constexpr if they qualify</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0018r3.html"" rel=""noreferrer"">Capturing <code>*this</code> in lambdas</a></p>

<ul>
<li><code>[*this]{ std::cout &lt;&lt; could &lt;&lt; "" be "" &lt;&lt; useful &lt;&lt; '\n'; }</code></li>
</ul></li>
</ul>

<h2>Attributes</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0188r1.pdf"" rel=""noreferrer""><code>[[fallthrough]]</code></a>, <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0189r1.pdf"" rel=""noreferrer""><code>[[nodiscard]]</code></a>, <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0212r1.pdf"" rel=""noreferrer""><code>[[maybe_unused]]</code></a> attributes </p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4266.html"" rel=""noreferrer""><code>[[attributes]]</code> on <code>namespace</code>s and <code>enum { erator[[s]] }</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0028r4.html"" rel=""noreferrer""><code>using</code> in attributes</a> to avoid having to repeat an attribute namespace.</p></li>
<li><p>Compilers are now <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0283r2.html"" rel=""noreferrer"">required to ignore non-standard attributes they don't recognize</a>.</p>

<ul>
<li>The C++14 wording allowed compilers to reject unknown scoped attributes.</li>
</ul></li>
</ul>

<h2>Syntax cleanup</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf"" rel=""noreferrer"">Inline variables</a></p>

<ul>
<li>Like inline functions</li>
<li>Compiler picks where the instance is instantiated</li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0386r2.pdf"" rel=""noreferrer"">Deprecate static constexpr redeclaration</a>, now implicitly inline.</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4230.html"" rel=""noreferrer""><code>namespace A::B</code></a></p></li>
<li><p>Simple <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3928.pdf"" rel=""noreferrer""><code>static_assert(expression);</code></a> with no string</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0003r4.html"" rel=""noreferrer"">no <code>throw</code> unless <code>throw()</code></a>, and <code>throw()</code> is <code>noexcept(true)</code>.</p></li>
</ul>

<h2>Cleaner multi-return and flow control</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0217r3.html"" rel=""noreferrer"">Structured bindings</a></p>

<ul>
<li>Basically, first-class <code>std::tie</code> with <code>auto</code></li>
<li>Example:

<ul>
<li><code>const auto [it, inserted] = map.insert( {""foo"", bar} );</code></li>
<li>Creates variables <code>it</code> and <code>inserted</code> with deduced type from the <code>pair</code> that <code>map::insert</code> returns.</li>
</ul></li>
<li>Works with tuple/pair-likes &amp; <code>std::array</code>s and relatively flat structs</li>
<li>Actually named <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0615r0.html"" rel=""noreferrer"">structured bindings</a> in standard</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0305r1.html"" rel=""noreferrer""><code>if (init; condition)</code> and <code>switch (init; condition)</code></a></p>

<ul>
<li><code>if (const auto [it, inserted] = map.insert( {""foo"", bar} ); inserted)</code></li>
<li>Extends the <code>if(decl)</code> to cases where <code>decl</code> isn't convertible-to-bool sensibly.</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0184r0.html"" rel=""noreferrer"">Generalizing range-based for loops</a></p>

<ul>
<li>Appears to be mostly support for sentinels, or end iterators that are not the same type as begin iterators, which helps with null-terminated loops and the like.</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0292r2.html"" rel=""noreferrer"">if constexpr</a></p>

<ul>
<li>Much requested feature to simplify almost-generic code.</li>
</ul></li>
</ul>

<h2>Misc</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0245r1.html"" rel=""noreferrer"">Hexadecimal float point literals</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0035r4.html"" rel=""noreferrer"">Dynamic memory allocation for over-aligned data</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0135r1.html"" rel=""noreferrer"">Guaranteed copy elision</a></p>

<ul>
<li>Finally!</li>
<li>Not in all cases, but distinguishes syntax where you are ""just creating something"" that was called elision, from ""genuine elision"".</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0145r3.pdf"" rel=""noreferrer"">Fixed order-of-evaluation for (some) expressions</a> with some <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0400r0.html"" rel=""noreferrer"">modifications</a></p>

<ul>
<li>Not including function arguments, but function argument evaluation interleaving now banned</li>
<li>Makes a bunch of broken code work mostly, and makes <code>.then</code> on future work.</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0138r2.pdf"" rel=""noreferrer"">Direct list-initialization of enums</a></p></li>
<li><p>Forward progress guarantees (FPG) (also, <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0299r0.html"" rel=""noreferrer"">FPGs for parallel algorithms</a>)</p>

<ul>
<li>I think this is saying ""the implementation may not stall threads forever""?</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4267.html"" rel=""noreferrer""><code>u8'U', u8'T', u8'F', u8'8'</code></a> character literals (string already existed)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0012r1.html"" rel=""noreferrer"">""noexcept"" in the type system</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0061r1.html"" rel=""noreferrer""><code>__has_include</code></a></p>

<ul>
<li>Test if a header file include would be an error</li>
<li>makes migrating from experimental to std almost seamless</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4261.html"" rel=""noreferrer"">Arrays of pointer conversion fixes</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0136r1.html"" rel=""noreferrer"">inherited constructors</a> fixes to some corner cases (see <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0136r0.html"" rel=""noreferrer"">P0136R0</a> for examples of behavior changes)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0017r0.html"" rel=""noreferrer"">aggregate initialization with inheritance</a>.</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0137r1.html"" rel=""noreferrer""><code>std::launder</code>, type punning, etc</a></p></li>
</ul>

<h1>Library additions:</h1>

<h2>Data types</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0088r3.html"" rel=""noreferrer""><code>std::variant&lt;Ts...&gt;</code></a></p>

<ul>
<li>Almost-always non-empty last I checked?</li>
<li>Tagged union type</li>
<li>{awesome|useful}</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#optional"" rel=""noreferrer""><code>std::optional</code></a></p>

<ul>
<li>Maybe holds one of something</li>
<li>Ridiculously useful</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#any"" rel=""noreferrer""><code>std::any</code></a></p>

<ul>
<li>Holds one of anything (that is copyable)</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#string.view"" rel=""noreferrer""><code>std::string_view</code></a></p>

<ul>
<li><code>std::string</code> like reference-to-character-array or substring</li>
<li>Never take a <code>string const&amp;</code> again.  Also can make parsing a bajillion times faster.</li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0403r0.html"" rel=""noreferrer""><code>""hello world""sv</code></a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0426r0.html"" rel=""noreferrer"">constexpr <code>char_traits</code></a></li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0298r3.pdf"" rel=""noreferrer""><code>std::byte</code></a> off more than they could chew.</p>

<ul>
<li>Neither an integer nor a character, just data</li>
</ul></li>
</ul>

<h2>Invoke stuff</h2>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4169.html"" rel=""noreferrer""><code>std::invoke</code></a>

<ul>
<li>Call any callable (function pointer, function, member pointer) with one syntax.  From the standard INVOKE concept.</li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html"" rel=""noreferrer""><code>std::apply</code></a>

<ul>
<li>Takes a function-like and a tuple, and unpacks the tuple into the call.</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0209r2.pdf"" rel=""noreferrer""><code>std::make_from_tuple</code></a>, <code>std::apply</code> applied to object construction</p></li>
<li><p><code>is_invocable</code>, <code>is_invocable_r</code>, <code>invoke_result</code></p>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0077r2.html"" rel=""noreferrer"">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0077r2.html</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0604r0.html"" rel=""noreferrer"">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0604r0.html</a></li>
<li>Deprecates <code>result_of</code></li>
<li><code>is_invocable&lt;Foo(Args...), R&gt;</code> is ""can you call <code>Foo</code> with <code>Args...</code> and get something compatible with <code>R</code>"", where <code>R=void</code> is default.</li>
<li><code>invoke_result&lt;Foo, Args...&gt;</code> is <code>std::result_of_t&lt;Foo(Args...)&gt;</code> but apparently less confusing?</li>
</ul></li>
</ul>

<h2><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html"" rel=""noreferrer"">File System TS v1</a></h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html#class-path"" rel=""noreferrer""><code>[class.path]</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html#Class-filesystem_error"" rel=""noreferrer""><code>[class.filesystem.error]</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html#file_status"" rel=""noreferrer""><code>[class.file_status]</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html#Class-directory_entry"" rel=""noreferrer""><code>[class.directory_entry]</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html#Class-directory_iterator"" rel=""noreferrer""><code>[class.directory_iterator]</code></a> and <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html#class.rec.dir.itr"" rel=""noreferrer""><code>[class.recursive_directory_iterator]</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0218r0.html#Operational-functions"" rel=""noreferrer""><code>[fs.ops.funcs]</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0610r0.html#2676"" rel=""noreferrer""><code>fstream</code>s can be opened with <code>path</code>s, as well as with <code>const path::value_type*</code> strings.</a></p></li>
</ul>

<h2><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0024r2.html"" rel=""noreferrer"">New algorithms</a></h2>

<ul>
<li><p><code>for_each_n</code></p></li>
<li><p><code>reduce</code></p></li>
<li><p><code>transform_reduce</code></p></li>
<li><p><code>exclusive_scan</code></p></li>
<li><p><code>inclusive_scan</code></p></li>
<li><p><code>transform_exclusive_scan</code></p></li>
<li><p><code>transform_inclusive_scan</code></p></li>
<li><p>Added for threading purposes, exposed even if you aren't using them threaded</p></li>
</ul>

<h2>Threading</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4508.html"" rel=""noreferrer""><code>std::shared_mutex</code></a></p>

<ul>
<li>Untimed, which can be more efficient if you don't need it.</li>
</ul></li>
<li><p><code>atomic&lt;T&gt;</code><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0152r1.html"" rel=""noreferrer""><code>::is_always_lockfree</code></a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0156r2.html"" rel=""noreferrer""><code>scoped_lock&lt;Mutexes...&gt;</code></a></p>

<ul>
<li>Saves some <code>std::lock</code> pain when locking more than one mutex at a time.</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/paper/2014/n4071.htm"" rel=""noreferrer"">Parallelism TS v1</a></p>

<ul>
<li>The linked paper from 2014, may be out of date</li>
<li>Parallel versions of <code>std</code> algorithms, and related machinery</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0154r0.html"" rel=""noreferrer"">hardware_*_interference_size</a></p></li>
</ul>

<h2>(parts of) <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html"" rel=""noreferrer"">Library Fundamentals TS v1</a> not covered above or below</h2>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#func.searchers"" rel=""noreferrer""><code>[func.searchers]</code></a> and <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#alg.search"" rel=""noreferrer""><code>[alg.search]</code></a>

<ul>
<li>A searching algorithm and techniques</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0220r1.html"" rel=""noreferrer""><code>[pmr]</code></a></p>

<ul>
<li>Polymorphic allocator, like <code>std::function</code> for allocators</li>
<li>And some <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#memory.resource.pool"" rel=""noreferrer"">standard memory resources to go with it</a>.</li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0358r1.html"" rel=""noreferrer"">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0358r1.html</a></li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#alg.random.sample"" rel=""noreferrer""><code>std::sample</code></a>, sampling from a range?</p></li>
</ul>

<h2>Container Improvements</h2>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4279.html"" rel=""noreferrer""><code>try_emplace</code></a> and <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4279.html"" rel=""noreferrer""><code>insert_or_assign</code></a></p>

<ul>
<li>gives better guarantees in some cases where spurious move/copy would be bad</li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0083r3.pdf"" rel=""noreferrer"">Splicing for <code>map&lt;&gt;</code>, <code>unordered_map&lt;&gt;</code>, <code>set&lt;&gt;</code>, and <code>unordered_set&lt;&gt;</code></a></p>

<ul>
<li>Move nodes between containers cheaply.</li>
<li>Merge whole containers cheaply.</li>
</ul></li>
<li><p>non-const <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0272r1.html"" rel=""noreferrer""><code>.data()</code></a> for string.</p></li>
<li><p>non-member <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4280.pdf"" rel=""noreferrer""><code>std::size</code>, <code>std::empty</code>, <code>std::data</code></a></p>

<ul>
<li>like <code>std::begin</code>/<code>end</code></li>
</ul></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4510.html"" rel=""noreferrer"">Minimal incomplete type support in containers</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4284.html"" rel=""noreferrer"">Contiguous iterator ""concept""</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0031r0.html"" rel=""noreferrer""><code>constexpr</code> iterators</a></p></li>
<li><p>The <code>emplace</code> family of functions <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0084r2.pdf"" rel=""noreferrer"">now returns a reference to the created object</a>.</p></li>
</ul>

<h2>Smart pointer changes</h2>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4089.pdf"" rel=""noreferrer""><code>unique_ptr&lt;T[]&gt;</code> fixes</a> and other <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4366.html"" rel=""noreferrer""><code>unique_ptr</code></a> tweaks.</li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0033r1.html"" rel=""noreferrer""><code>weak_from_this</code></a> and some fixed to shared from this</li>
</ul>

<h2>Other <code>std</code> datatype improvements:</h2>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4387"" rel=""noreferrer""><code>{}</code> construction of <code>std::tuple</code> and other improvements</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4277.html"" rel=""noreferrer"">TriviallyCopyable reference_wrapper</a>, can be performance boost</li>
</ul>

<h2>Misc</h2>

<ul>
<li><p>C++17 library is based on <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0063r2.html"" rel=""noreferrer"">C11 instead of C99</a></p></li>
<li><p>Reserved <code>std[0-9]+</code> for <a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0180r1.html"" rel=""noreferrer"">future standard libraries</a></p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0040r2.html"" rel=""noreferrer""><code>destroy(_at|_n)</code>, <code>uninitialized_move(_n)</code>, <code>uninitialized_value_construct(_n)</code>, <code>uninitialized_default_construct(_n)</code></a></p>

<ul>
<li>utility code already in most <code>std</code> implementations exposed</li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0226r1.pdf"" rel=""noreferrer"">Special math functions</a>

<ul>
<li>scientists may like them</li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0025r0.html"" rel=""noreferrer""><code>std::clamp()</code></a>

<ul>
<li><code>std::clamp( a, b, c ) == std::max( b, std::min( a, c ) )</code> roughly</li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0295r0.pdf"" rel=""noreferrer""><code>gcd</code> and <code>lcm</code></a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4259.pdf"" rel=""noreferrer""><code>std::uncaught_exceptions</code></a>

<ul>
<li>Required if you want to only throw if safe from destructors</li>
</ul></li>
<li><a href=""http://open-std.org/JTC1/SC22/WG21/docs/papers/2015/p0007r1.html"" rel=""noreferrer""><code>std::as_const</code></a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4389.html"" rel=""noreferrer""><code>std::bool_constant</code></a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0006r0.html"" rel=""noreferrer"">A whole bunch of <code>_v</code> template variables</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3911.pdf"" rel=""noreferrer""><code>std::void_t&lt;T&gt;</code></a>

<ul>
<li>Surprisingly useful when writing templates</li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0074r0.html"" rel=""noreferrer""><code>std::owner_less&lt;void&gt;</code></a>

<ul>
<li>like <code>std::less&lt;void&gt;</code>, but for smart pointers to sort based on contents</li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0092r1.html"" rel=""noreferrer""><code>std::chrono</code> polish</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0013r1.html"" rel=""noreferrer""><code>std::conjunction</code>, <code>std::disjunction</code>, <code>std::negation</code></a> exposed</li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0005r4.html#6.10"" rel=""noreferrer""><code>std::not_fn</code></a>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0358r1.html"" rel=""noreferrer"">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0358r1.html</a></li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4258.pdf"" rel=""noreferrer"">Rules for noexcept within <code>std</code></a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0258r1.html"" rel=""noreferrer"">std::is_contiguous_layout</a>, useful for efficient hashing</li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0067r5.html"" rel=""noreferrer"">std::to_chars/std::from_chars</a>, high performance, locale agnostic number conversion; finally a way to serialize/deserialize to human readable formats (JSON &amp; co) </li>
<li><s><a href=""http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0181r1.html"" rel=""noreferrer"">std::default_order</a>, indirection over <code>std::less</code>.</s> (<a href=""https://www.reddit.com/r/cpp/comments/56zkbx/c1417_features_and_stl_fixes_in_vs_15_preview_5/d8npapy/"" rel=""noreferrer"">breaks ABI of some compilers</a> due to name mangling, removed.)</li>
</ul>

<h2>Traits</h2>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0185r1.html"" rel=""noreferrer"">swap</a></li>
<li><a href=""https://cplusplus.github.io/LWG/lwg-defects.html#2911"" rel=""noreferrer"">is_aggregate</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0258r2.html"" rel=""noreferrer"">has_unique_object_representations</a></li>
</ul>

<h2>Deprecated</h2>

<ul>
<li><a href=""http://wg21.link/p0063r3"" rel=""noreferrer"">Some C libraries</a>, </li>
<li><a href=""http://wg21.link/p0618r0"" rel=""noreferrer""><code>&lt;codecvt&gt;</code></a></li>
<li><a href=""http://wg21.link/p0371r1"" rel=""noreferrer""><code>memory_order_consume</code></a></li>
<li><a href=""http://wg21.link/p0604r0"" rel=""noreferrer""><code>result_of</code></a>, replaced with <code>invoke_result</code></li>
<li><a href=""http://wg21.link/p0521r0"" rel=""noreferrer""><code>shared_ptr::unique</code></a>, it isn't very threadsafe</li>
</ul>

<p><a href=""https://isocpp.org/files/papers/p0636r0.html"" rel=""noreferrer"">Isocpp.org has</a> has an independent list of changes since C++14; it has been partly pillaged.</p>

<p>Naturally TS work continues in parallel, so there are some TS that are not-quite-ripe that will have to wait for the next iteration.  The target for the next iteration is C++20 as previously planned, not C++19 as some rumors implied.  C++1O has been avoided.</p>

<p>Initial list taken from <a href=""https://www.reddit.com/r/cpp/comments/48zp05/what_we_added_to_the_c17_working_draft/"" rel=""noreferrer"">this reddit post</a> and <a href=""https://www.reddit.com/r/cpp/comments/4pmlpz/what_the_iso_c_committee_added_to_the_c17_working/"" rel=""noreferrer"">this reddit post</a>, with links added via googling or from the above isocpp.org page.</p>

<p>Additional entries pillaged from <a href=""https://isocpp.org/std/standing-documents/sd-6-sg10-feature-test-recommendations"" rel=""noreferrer"">SD-6</a> feature-test list.</p>

<p><a href=""http://clang.llvm.org/cxx_status.html#cxx17"" rel=""noreferrer"">clang's feature list</a> and <a href=""http://libcxx.llvm.org/cxx1z_status.html"" rel=""noreferrer"">library feature list</a> are next to be pillaged.  This doesn't seem to be reliable, as it is C++1z, not C++17.</p>

<p><a href=""https://codeplay.com/public/uploaded/filehost/0cbdaf_c++17post-oulu2016.pdf"" rel=""noreferrer"">these slides</a> had some features missing elsewhere.</p>

<p>While ""what was removed"" was not asked, here is a short list of a few things ((mostly?) previous deprecated) that are removed in C++17 from C++:</p>

<h1>Removed:</h1>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0001r1.html#6.10"" rel=""noreferrer""><code>register</code></a>, keyword reserved for future use</li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0002r1.html"" rel=""noreferrer""><code>bool b; ++b;</code></a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4086.html"" rel=""noreferrer"">trigraphs</a>

<ul>
<li>if you still need them, they are now part of your source file encoding, not part of language</li>
</ul></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0004r1.html"" rel=""noreferrer"">ios aliases</a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4190.htm"" rel=""noreferrer"">auto_ptr, old <code>&lt;functional&gt;</code> stuff, <code>random_shuffle</code></a></li>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0302r1.html"" rel=""noreferrer"">allocators in <code>std::function</code></a></li>
</ul>

<p>There were rewordings.  I am unsure if these have any impact on code, or if they are just cleanups in the standard:</p>

<h1>Papers not yet integrated into above:</h1>

<ul>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0505r0.html"" rel=""noreferrer"">P0505R0</a> (constexpr chrono)</p></li>
<li><p><a href=""http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0418r2.html"" rel=""noreferrer"">P0418R2</a> (atomic tweaks)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0512r0.pdf"" rel=""noreferrer"">P0512R0</a> (template argument deduction tweaks)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0490r0.html"" rel=""noreferrer"">P0490R0</a> (structured binding tweaks)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0513r0.pdf"" rel=""noreferrer"">P0513R0</a> (changes to <code>std::hash</code>)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0502r0.html"" rel=""noreferrer"">P0502R0</a> (parallel exceptions)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0509r1.pdf"" rel=""noreferrer"">P0509R1</a> (updating restrictions on exception handling)</p></li>
<li><p><a href=""http://wg21.link/p0012r1"" rel=""noreferrer"">P0012R1</a> (make exception specifications be part of the type system)</p></li>
<li><p><a href=""http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0510r0.html"" rel=""noreferrer"">P0510R0</a> (restrictions on variants)</p></li>
<li><p><a href=""http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0504r0.html"" rel=""noreferrer"">P0504R0</a> (tags for optional/variant/any)</p></li>
<li><p><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0497r0.html"" rel=""noreferrer"">P0497R0</a> (shared ptr tweaks)</p></li>
<li><p><a href=""http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0508r0.html"" rel=""noreferrer"">P0508R0</a> (structured bindings node handles)</p></li>
<li><p><a href=""http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2016/p0521r0.html"" rel=""noreferrer"">P0521R0</a> (shared pointer use count and unique changes?)</p></li>
</ul>

<h1>Spec changes:</h1>

<ul>
<li><a href=""http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4285.html"" rel=""noreferrer"">exception specs and throw expressions</a></li>
</ul>

<h1>Further reference:</h1>

<ul>
<li><p><a href=""http://www.open-std.org/JTC1/SC22/WG21/docs/papers/"" rel=""noreferrer"">papers grouped by year; not all accepted</a></p></li>
<li><p><a href=""https://isocpp.org/files/papers/p0636r0.html"" rel=""noreferrer"">https://isocpp.org/files/papers/p0636r0.html</a></p>

<ul>
<li>Should be updated to ""Modifications to existing features"" here.</li>
</ul></li>
</ul>",,,1,2020-07-31 07:59:12.857000+00:00,2016-06-27 18:06:32.597000+00:00,,2017-10-26 14:54:09.640000+00:00,2017-10-26 14:54:09.640000+00:00,,1774667.0,,1774667.0,38060436,2,1285,,
90,48924212,,"<p>Since Git 2.16.1(2) you can use</p>
<pre><code>C:\&gt; git update-git-for-windows
</code></pre>
<p>In version between 2.14.2 and 2.16.1, the command was</p>
<pre><code>C:\&gt; git update
</code></pre>
<p>(It was later renamed to avoid confusion with updating the local repository, e.g. like <code>svn update</code> does it.)</p>
<p>That command does not exist in Git 2.13 and before.</p>
<p>If this errors with &quot;is not a git command&quot; then either you don't actually have Git for Windows, or your version is very old.</p>
<p>In which case, simply get the latest installer from <a href=""https://git-scm.com/download"" rel=""noreferrer"">https://git-scm.com/download</a> (check whether you want 32- or 64-bit) and run it to upgrade.</p>
<p>If you already have the latest version it does nothing, in which case you can manually run the installer to reinstall.</p>
<pre><code>C:\&gt; git update-git-for-windows
Git for Windows 2.17.0.windows.1 (64bit)
Up to date
</code></pre>",,,11,,2018-02-22 09:48:41.523000+00:00,,2020-09-27 15:38:15.247000+00:00,2020-09-27 15:38:15.247000+00:00,,1746118.0,,2446509.0,13790592,2,1266,,
91,42458207,,"<p>I had accidentally enabled a different mode for the tab key. Fixed it by pressing <kbd>Ctrl</kbd>+<kbd>Shift</kbd>(for Mac only)+<kbd>M</kbd>.</p>
<p>From the <a href=""https://code.visualstudio.com/docs/getstarted/keybindings"" rel=""noreferrer"">Visual Studio Code Keybinding docs</a>:</p>
<blockquote>
<pre class=""lang-none prettyprint-override""><code>| Key      | Command                                 | Command id                       |
| Ctrl + M | Toggle Use of Tab Key for Setting Focus | editor.action.toggleTabFocusMode |
</code></pre>
</blockquote>
<p>The current tab control mode should also show up in the status bar:</p>
<p><a href=""https://i.stack.imgur.com/RTMqF.png"" rel=""noreferrer""><img src=""https://i.stack.imgur.com/RTMqF.png"" alt=""enter image description here"" /></a></p>",,,9,,2017-02-25 15:56:27.583000+00:00,,2020-08-26 19:21:23.387000+00:00,2020-08-26 19:21:23.387000+00:00,,4722345.0,,25280.0,35519538,2,1240,,
92,43012779,,"<p>While there are a lot of modal toggles and navigation shortcuts for VS Code, there isn't one specifically for ""move from editor to terminal, and back again"". However you can compose the two steps by overloading the <code>key</code> and using the <code>when</code> <a href=""https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts"" rel=""noreferrer"">clause</a>.</p>

<p>Open the keybindings.json from the editor: CMD-SHIFT-P -> Preferences: Open Keyboard Shortcuts File and add these entries:</p>

<pre><code>// Toggle between terminal and editor focus
{ ""key"": ""ctrl+`"", ""command"": ""workbench.action.terminal.focus""},
{ ""key"": ""ctrl+`"", ""command"": ""workbench.action.focusActiveEditorGroup"", ""when"": ""terminalFocus""}
</code></pre>

<p>With these shortcuts I will focus between the editor and the Integrated Terminal using the same keystroke.</p>",,,27,,2017-03-25 05:10:11.113000+00:00,,2019-11-08 19:51:48.293000+00:00,2019-11-08 19:51:48.293000+00:00,,1320636.0,,2529592.0,42796887,2,1232,,
93,36134133,,"<p>The Typescript way to do this would be:</p>

<pre><code>Number('1234') // 1234
Number('9BX9') // NaN
</code></pre>

<p>as answered here: <a href=""https://stackoverflow.com/a/23440948/2083492"">https://stackoverflow.com/a/23440948/2083492</a></p>",,,6,,2016-03-21 14:44:16.827000+00:00,,2016-03-22 10:44:49.870000+00:00,2017-05-23 12:18:28.387000+00:00,,-1.0,,2083492.0,14667713,2,1219,,
94,53453588,,"<p>There is a slight difference in the ordering of the bytecode.</p>
<p><code>2 * (i * i)</code>:</p>
<pre><code>     iconst_2
     iload0
     iload0
     imul
     imul
     iadd
</code></pre>
<p>vs <code>2 * i * i</code>:</p>
<pre><code>     iconst_2
     iload0
     imul
     iload0
     imul
     iadd
</code></pre>
<p>At first sight this should not make a difference; if anything the second version is more optimal since it uses one slot less.</p>
<p>So we need to dig deeper into the lower level (JIT)<sup>1</sup>.</p>
<p>Remember that JIT tends to unroll small loops very aggressively. Indeed we observe a 16x unrolling for the <code>2 * (i * i)</code> case:</p>
<pre><code>030   B2: # B2 B3 &lt;- B1 B2  Loop: B2-B2 inner main of N18 Freq: 1e+006
030     addl    R11, RBP    # int
033     movl    RBP, R13    # spill
036     addl    RBP, #14    # int
039     imull   RBP, RBP    # int
03c     movl    R9, R13 # spill
03f     addl    R9, #13 # int
043     imull   R9, R9  # int
047     sall    RBP, #1
049     sall    R9, #1
04c     movl    R8, R13 # spill
04f     addl    R8, #15 # int
053     movl    R10, R8 # spill
056     movdl   XMM1, R8    # spill
05b     imull   R10, R8 # int
05f     movl    R8, R13 # spill
062     addl    R8, #12 # int
066     imull   R8, R8  # int
06a     sall    R10, #1
06d     movl    [rsp + #32], R10    # spill
072     sall    R8, #1
075     movl    RBX, R13    # spill
078     addl    RBX, #11    # int
07b     imull   RBX, RBX    # int
07e     movl    RCX, R13    # spill
081     addl    RCX, #10    # int
084     imull   RCX, RCX    # int
087     sall    RBX, #1
089     sall    RCX, #1
08b     movl    RDX, R13    # spill
08e     addl    RDX, #8 # int
091     imull   RDX, RDX    # int
094     movl    RDI, R13    # spill
097     addl    RDI, #7 # int
09a     imull   RDI, RDI    # int
09d     sall    RDX, #1
09f     sall    RDI, #1
0a1     movl    RAX, R13    # spill
0a4     addl    RAX, #6 # int
0a7     imull   RAX, RAX    # int
0aa     movl    RSI, R13    # spill
0ad     addl    RSI, #4 # int
0b0     imull   RSI, RSI    # int
0b3     sall    RAX, #1
0b5     sall    RSI, #1
0b7     movl    R10, R13    # spill
0ba     addl    R10, #2 # int
0be     imull   R10, R10    # int
0c2     movl    R14, R13    # spill
0c5     incl    R14 # int
0c8     imull   R14, R14    # int
0cc     sall    R10, #1
0cf     sall    R14, #1
0d2     addl    R14, R11    # int
0d5     addl    R14, R10    # int
0d8     movl    R10, R13    # spill
0db     addl    R10, #3 # int
0df     imull   R10, R10    # int
0e3     movl    R11, R13    # spill
0e6     addl    R11, #5 # int
0ea     imull   R11, R11    # int
0ee     sall    R10, #1
0f1     addl    R10, R14    # int
0f4     addl    R10, RSI    # int
0f7     sall    R11, #1
0fa     addl    R11, R10    # int
0fd     addl    R11, RAX    # int
100     addl    R11, RDI    # int
103     addl    R11, RDX    # int
106     movl    R10, R13    # spill
109     addl    R10, #9 # int
10d     imull   R10, R10    # int
111     sall    R10, #1
114     addl    R10, R11    # int
117     addl    R10, RCX    # int
11a     addl    R10, RBX    # int
11d     addl    R10, R8 # int
120     addl    R9, R10 # int
123     addl    RBP, R9 # int
126     addl    RBP, [RSP + #32 (32-bit)]   # int
12a     addl    R13, #16    # int
12e     movl    R11, R13    # spill
131     imull   R11, R13    # int
135     sall    R11, #1
138     cmpl    R13, #999999985
13f     jl     B2   # loop end  P=1.000000 C=6554623.000000
</code></pre>
<p>We see that there is 1 register that is &quot;spilled&quot; onto the stack.</p>
<p>And for the <code>2 * i * i</code> version:</p>
<pre><code>05a   B3: # B2 B4 &lt;- B1 B2  Loop: B3-B2 inner main of N18 Freq: 1e+006
05a     addl    RBX, R11    # int
05d     movl    [rsp + #32], RBX    # spill
061     movl    R11, R8 # spill
064     addl    R11, #15    # int
068     movl    [rsp + #36], R11    # spill
06d     movl    R11, R8 # spill
070     addl    R11, #14    # int
074     movl    R10, R9 # spill
077     addl    R10, #16    # int
07b     movdl   XMM2, R10   # spill
080     movl    RCX, R9 # spill
083     addl    RCX, #14    # int
086     movdl   XMM1, RCX   # spill
08a     movl    R10, R9 # spill
08d     addl    R10, #12    # int
091     movdl   XMM4, R10   # spill
096     movl    RCX, R9 # spill
099     addl    RCX, #10    # int
09c     movdl   XMM6, RCX   # spill
0a0     movl    RBX, R9 # spill
0a3     addl    RBX, #8 # int
0a6     movl    RCX, R9 # spill
0a9     addl    RCX, #6 # int
0ac     movl    RDX, R9 # spill
0af     addl    RDX, #4 # int
0b2     addl    R9, #2  # int
0b6     movl    R10, R14    # spill
0b9     addl    R10, #22    # int
0bd     movdl   XMM3, R10   # spill
0c2     movl    RDI, R14    # spill
0c5     addl    RDI, #20    # int
0c8     movl    RAX, R14    # spill
0cb     addl    RAX, #32    # int
0ce     movl    RSI, R14    # spill
0d1     addl    RSI, #18    # int
0d4     movl    R13, R14    # spill
0d7     addl    R13, #24    # int
0db     movl    R10, R14    # spill
0de     addl    R10, #26    # int
0e2     movl    [rsp + #40], R10    # spill
0e7     movl    RBP, R14    # spill
0ea     addl    RBP, #28    # int
0ed     imull   RBP, R11    # int
0f1     addl    R14, #30    # int
0f5     imull   R14, [RSP + #36 (32-bit)]   # int
0fb     movl    R10, R8 # spill
0fe     addl    R10, #11    # int
102     movdl   R11, XMM3   # spill
107     imull   R11, R10    # int
10b     movl    [rsp + #44], R11    # spill
110     movl    R10, R8 # spill
113     addl    R10, #10    # int
117     imull   RDI, R10    # int
11b     movl    R11, R8 # spill
11e     addl    R11, #8 # int
122     movdl   R10, XMM2   # spill
127     imull   R10, R11    # int
12b     movl    [rsp + #48], R10    # spill
130     movl    R10, R8 # spill
133     addl    R10, #7 # int
137     movdl   R11, XMM1   # spill
13c     imull   R11, R10    # int
140     movl    [rsp + #52], R11    # spill
145     movl    R11, R8 # spill
148     addl    R11, #6 # int
14c     movdl   R10, XMM4   # spill
151     imull   R10, R11    # int
155     movl    [rsp + #56], R10    # spill
15a     movl    R10, R8 # spill
15d     addl    R10, #5 # int
161     movdl   R11, XMM6   # spill
166     imull   R11, R10    # int
16a     movl    [rsp + #60], R11    # spill
16f     movl    R11, R8 # spill
172     addl    R11, #4 # int
176     imull   RBX, R11    # int
17a     movl    R11, R8 # spill
17d     addl    R11, #3 # int
181     imull   RCX, R11    # int
185     movl    R10, R8 # spill
188     addl    R10, #2 # int
18c     imull   RDX, R10    # int
190     movl    R11, R8 # spill
193     incl    R11 # int
196     imull   R9, R11 # int
19a     addl    R9, [RSP + #32 (32-bit)]    # int
19f     addl    R9, RDX # int
1a2     addl    R9, RCX # int
1a5     addl    R9, RBX # int
1a8     addl    R9, [RSP + #60 (32-bit)]    # int
1ad     addl    R9, [RSP + #56 (32-bit)]    # int
1b2     addl    R9, [RSP + #52 (32-bit)]    # int
1b7     addl    R9, [RSP + #48 (32-bit)]    # int
1bc     movl    R10, R8 # spill
1bf     addl    R10, #9 # int
1c3     imull   R10, RSI    # int
1c7     addl    R10, R9 # int
1ca     addl    R10, RDI    # int
1cd     addl    R10, [RSP + #44 (32-bit)]   # int
1d2     movl    R11, R8 # spill
1d5     addl    R11, #12    # int
1d9     imull   R13, R11    # int
1dd     addl    R13, R10    # int
1e0     movl    R10, R8 # spill
1e3     addl    R10, #13    # int
1e7     imull   R10, [RSP + #40 (32-bit)]   # int
1ed     addl    R10, R13    # int
1f0     addl    RBP, R10    # int
1f3     addl    R14, RBP    # int
1f6     movl    R10, R8 # spill
1f9     addl    R10, #16    # int
1fd     cmpl    R10, #999999985
204     jl     B2   # loop end  P=1.000000 C=7419903.000000
</code></pre>
<p>Here we observe much more &quot;spilling&quot; and more accesses to the stack <code>[RSP + ...]</code>, due to more intermediate results that need to be preserved.</p>
<p>Thus the answer to the question is simple: <code>2 * (i * i)</code> is faster than <code>2 * i * i</code> because the JIT generates more optimal assembly code for the first case.</p>
<hr />
<p>But of course it is obvious that neither the first nor the second version is any good; the loop could really benefit from vectorization, since any x86-64 CPU has at least SSE2 support.</p>
<p>So it's an issue of the optimizer; as is often the case, it unrolls too aggressively and shoots itself in the foot, all the while missing out on various other opportunities.</p>
<p>In fact, modern x86-64 CPUs break down the instructions further into micro-ops (µops) and with features like register renaming, µop caches and loop buffers, loop optimization takes a lot more finesse than a simple unrolling for optimal performance. <a href=""https://www.agner.org/optimize/microarchitecture.pdf"" rel=""noreferrer"">According to Agner Fog's optimization guide</a>:</p>
<blockquote>
<p>The gain in performance due to the µop cache can be quite
considerable if the average instruction length is more than 4 bytes.
The following methods of optimizing the use of the µop cache may
be considered:</p>
<ul>
<li>Make sure that critical loops are small enough to fit into the µop cache.</li>
<li>Align the most critical loop entries and function entries by 32.</li>
<li>Avoid unnecessary loop unrolling.</li>
<li>Avoid instructions that have extra load time<br />
. . .</li>
</ul>
</blockquote>
<p>Regarding those load times - <a href=""https://stackoverflow.com/questions/4087280/approximate-cost-to-access-various-caches-and-main-memory"">even the fastest L1D hit costs 4 cycles</a>, an extra register and µop, so yes, even a few accesses to memory will hurt performance in tight loops.</p>
<p>But back to the vectorization opportunity - to see how fast it can be, <a href=""https://gcc.godbolt.org/z/DdEDny"" rel=""noreferrer"">we can compile a similar C application with GCC</a>, which outright vectorizes it (AVX2 is shown, SSE2 is similar)<sup>2</sup>:</p>
<pre><code>  vmovdqa ymm0, YMMWORD PTR .LC0[rip]
  vmovdqa ymm3, YMMWORD PTR .LC1[rip]
  xor eax, eax
  vpxor xmm2, xmm2, xmm2
.L2:
  vpmulld ymm1, ymm0, ymm0
  inc eax
  vpaddd ymm0, ymm0, ymm3
  vpslld ymm1, ymm1, 1
  vpaddd ymm2, ymm2, ymm1
  cmp eax, 125000000      ; 8 calculations per iteration
  jne .L2
  vmovdqa xmm0, xmm2
  vextracti128 xmm2, ymm2, 1
  vpaddd xmm2, xmm0, xmm2
  vpsrldq xmm0, xmm2, 8
  vpaddd xmm0, xmm2, xmm0
  vpsrldq xmm1, xmm0, 4
  vpaddd xmm0, xmm0, xmm1
  vmovd eax, xmm0
  vzeroupper
</code></pre>
<p>With run times:</p>
<ul>
<li>SSE: 0.24 s, or 2 times as fast.</li>
<li>AVX: 0.15 s, or 3 times as fast.</li>
<li>AVX2: 0.08 s, or 5 times as fast.</li>
</ul>
<hr />
<p><sup>1</sup> <sub>To get JIT generated assembly output, <a href=""https://github.com/ojdkbuild/ojdkbuild/releases"" rel=""noreferrer"">get a debug JVM</a> and run with <code>-XX:+PrintOptoAssembly</code></sub></p>
<p><sup>2</sup> <sub>The C version is compiled with the <code>-fwrapv</code> flag, which enables GCC to treat signed integer overflow as a two's-complement wrap-around.</sub></p>",,,22,,2018-11-23 22:40:27.097000+00:00,,2020-07-03 07:55:04.620000+00:00,2020-07-03 07:55:04.620000+00:00,,7008416.0,,485343.0,53452713,2,1214,,
95,46584412,,"<p>There is a <code>lateinit</code> improvement in Kotlin 1.2 that allows to check the initialization state of <code>lateinit</code> variable directly:</p>

<pre><code>lateinit var file: File    

if (this::file.isInitialized) { ... }
</code></pre>

<p>See the annoucement on <a href=""https://blog.jetbrains.com/kotlin/2017/09/kotlin-1-2-beta-is-out/"" rel=""noreferrer"">JetBrains blog</a> or the <a href=""https://github.com/Kotlin/KEEP/pull/73"" rel=""noreferrer"">KEEP proposal</a>.</p>

<p><strong>UPDATE:</strong> Kotlin 1.2 has been released. You can find <code>lateinit</code> enhancements here:</p>

<ul>
<li><a href=""http://kotlinlang.org/docs/reference/whatsnew12.html#checking-whether-a-lateinit-var-is-initialized"" rel=""noreferrer"">Checking whether a lateinit var is initialized</a></li>
<li><a href=""http://kotlinlang.org/docs/reference/whatsnew12.html#lateinit-top-level-properties-and-local-variables"" rel=""noreferrer"">Lateinit top-level properties and local variables</a></li>
</ul>",,,10,,2017-10-05 11:23:26.657000+00:00,,2020-04-11 23:15:50.007000+00:00,2020-04-11 23:15:50.007000+00:00,,2415921.0,,2862474.0,37618738,2,1204,,
96,37511463,,"<p>With ES2015/ES6 <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize"" rel=""noreferrer"">String.prototype.normalize()</a>,</p>
<pre><code>const str = &quot;Crème Brulée&quot;
str.normalize(&quot;NFD&quot;).replace(/[\u0300-\u036f]/g, &quot;&quot;)
&gt; &quot;Creme Brulee&quot;
</code></pre>
<p>Two things are happening here:</p>
<ol>
<li><code>normalize()</code>ing to <code>NFD</code> Unicode normal form decomposes combined graphemes into the combination of simple ones. The <code>è</code> of <code>Crème</code> ends up expressed as <code>e</code> + <code> ̀</code>.</li>
<li>Using a regex <a href=""http://www.regular-expressions.info/charclass.html"" rel=""noreferrer"">character class</a> to match the U+0300 → U+036F range, it is now trivial to globally get rid of the diacritics, which the Unicode standard conveniently groups as the <a href=""https://en.wikipedia.org/wiki/Combining_Diacritical_Marks"" rel=""noreferrer"">Combining Diacritical Marks</a> Unicode block.</li>
</ol>
<p>See comment for performance testing.</p>
<p><strong>Alternatively, if you just want sorting</strong></p>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator"" rel=""noreferrer"">Intl.Collator</a> has sufficient support <a href=""https://caniuse.com/#search=intl.collator"" rel=""noreferrer"">~95% right now</a>, a polyfill is also available <a href=""https://github.com/andyearnshaw/Intl.js/"" rel=""noreferrer"">here</a> but I haven't tested it.</p>
<pre><code>const c = new Intl.Collator();
[&quot;creme brulee&quot;, &quot;crème brulée&quot;, &quot;crame brulai&quot;, &quot;crome brouillé&quot;,
&quot;creme brulay&quot;, &quot;creme brulfé&quot;, &quot;creme bruléa&quot;].sort(c.compare)
[&quot;crame brulai&quot;, &quot;creme brulay&quot;, &quot;creme bruléa&quot;, &quot;creme brulee&quot;,
&quot;crème brulée&quot;, &quot;creme brulfé&quot;, &quot;crome brouillé&quot;]


[&quot;creme brulee&quot;, &quot;crème brulée&quot;, &quot;crame brulai&quot;, &quot;crome brouillé&quot;].sort((a,b) =&gt; a&gt;b)
[&quot;crame brulai&quot;, &quot;creme brulee&quot;, &quot;crome brouillé&quot;, &quot;crème brulée&quot;]
</code></pre>",,,23,,2016-05-29 15:06:27.167000+00:00,,2020-08-20 01:56:04.353000+00:00,2020-08-20 01:56:04.353000+00:00,,1698813.0,,1698813.0,990904,2,1163,,
97,40560953,,"<p>I think @InspiredJW did it with ES5, and as @trincot pointed out, using es6 is a better approach.  But we can add a bit more sugar, by using the spread operator, and logical AND short circuit evaluation:</p>

<pre><code>const a = {
   ...(someCondition &amp;&amp; {b: 5})
}
</code></pre>",,,25,,2016-11-12 08:22:24.297000+00:00,,2018-05-09 11:16:31.697000+00:00,2018-05-09 11:16:31.697000+00:00,,1839360.0,,1216032.0,11704267,2,1156,,
98,43881141,,"<p>This answer covers a lot of ground, so it’s divided into three parts:</p>
<ul>
<li>How to use a CORS proxy to get around <em>“No Access-Control-Allow-Origin header”</em> problems</li>
<li>How to avoid the CORS preflight</li>
<li>How to fix <em>“Access-Control-Allow-Origin header must not be the wildcard”</em> problems</li>
</ul>
<hr />
<p><strong>How to use a CORS proxy to avoid <em>“No Access-Control-Allow-Origin header”</em> problems</strong></p>
<p>If you don’t control the server your frontend code is sending a request to, and the problem with the response from that server is just the lack of the necessary <code>Access-Control-Allow-Origin</code> header, you can still get things to work—by making the request through a CORS proxy.</p>
<p>You can easily run your own proxy using code from <a href=""https://github.com/Rob--W/cors-anywhere/"" rel=""noreferrer"">https://github.com/Rob--W/cors-anywhere/</a>.<br>
You can also easily deploy your own proxy to Heroku in just 2-3 minutes, with 5 commands:</p>
<pre><code>git clone https://github.com/Rob--W/cors-anywhere.git
cd cors-anywhere/
npm install
heroku create
git push heroku master
</code></pre>
<p>After running those commands, you’ll end up with your own CORS Anywhere server running at, e.g., <code>https://cryptic-headland-94862.herokuapp.com/</code>.</p>
<p>Now, prefix your request URL with the URL for your proxy:</p>
<pre><code>https://cryptic-headland-94862.herokuapp.com/https://example.com
</code></pre>
<p>Adding the proxy URL as a prefix causes the request to get made through your proxy, which then:</p>
<ol>
<li>Forwards the request to <code>https://example.com</code>.</li>
<li>Receives the response from <code>https://example.com</code>.</li>
<li>Adds the <code>Access-Control-Allow-Origin</code> header to the response.</li>
<li>Passes that response, with that added header, back to the requesting frontend code.</li>
</ol>
<p>The browser then allows the frontend code to access the response, because that response with the <code>Access-Control-Allow-Origin</code> response header is what the browser sees.</p>
<p>This works even if the request is one that triggers browsers to do a CORS preflight <code>OPTIONS</code> request, because in that case, the proxy also sends back the <code>Access-Control-Allow-Headers</code> and <code>Access-Control-Allow-Methods</code> headers needed to make the preflight successful.</p>
<hr />
<p><strong>How to avoid the CORS preflight</strong></p>
<p>The code in the question triggers a CORS preflight—since it sends an <code>Authorization</code> header.</p>
<p><a href=""https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Preflighted_requests"" rel=""noreferrer"">https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Preflighted_requests</a></p>
<p>Even without that, the <code>Content-Type: application/json</code> header would also trigger a preflight.</p>
<p>What “preflight” means: before the browser tries the <code>POST</code> in the code in the question, it’ll first send an <code>OPTIONS</code> request to the server — to determine if the server is opting-in to receiving a cross-origin <code>POST</code> that has <code>Authorization</code> and <code>Content-Type: application/json</code> headers.</p>
<blockquote>
<p>It works pretty well with a small curl script - I get my data.</p>
</blockquote>
<p>To properly test with <code>curl</code>, you must emulate the preflight <code>OPTIONS</code> request the browser sends:</p>
<pre><code>curl -i -X OPTIONS -H &quot;Origin: http://127.0.0.1:3000&quot; \
    -H 'Access-Control-Request-Method: POST' \
    -H 'Access-Control-Request-Headers: Content-Type, Authorization' \
    &quot;https://the.sign_in.url&quot;
</code></pre>
<p>…with <code>https://the.sign_in.url</code> replaced by whatever your actual <code>sign_in</code> URL is.</p>
<p>The response the browser needs to see from that <code>OPTIONS</code> request must have headers like this:</p>
<pre class=""lang-none prettyprint-override""><code>Access-Control-Allow-Origin:  http://127.0.0.1:3000
Access-Control-Allow-Methods: POST
Access-Control-Allow-Headers: Content-Type, Authorization
</code></pre>
<p>If the <code>OPTIONS</code> response doesn’t include those headers, then the browser will stop right there and never even attempt to send the <code>POST</code> request. Also, the HTTP status code for the response must be a 2xx—typically 200 or 204. If it’s any other status code, the browser will stop right there.</p>
<p>The server in the question is responding to the <code>OPTIONS</code> request with a 501 status code, which apparently means it’s trying to indicate it doesn’t implement support for <code>OPTIONS</code> requests. Other servers typically respond with a 405 “Method not allowed” status code in this case.</p>
<p>So you’re never going to be able to make <code>POST</code> requests directly to that server from your frontend JavaScript code if the server responds to that <code>OPTIONS</code> request with a 405 or 501 or anything other than a 200 or 204 or if doesn’t respond with those necessary response headers.</p>
<p>The way to avoid triggering a preflight for the case in the question would be:</p>
<ul>
<li>if the server didn’t require an <code>Authorization</code> request header but instead, e.g., relied on authentication data embedded in the body of the <code>POST</code> request or as a query param</li>
<li>if the server didn’t require the <code>POST</code> body to have a <code>Content-Type: application/json</code> media type but instead accepted the <code>POST</code> body as <code>application/x-www-form-urlencoded</code> with a parameter named <code>json</code> (or whatever) whose value is the JSON data</li>
</ul>
<hr />
<p><strong>How to fix <em>“Access-Control-Allow-Origin header must not be the wildcard”</em> problems</strong></p>
<blockquote>
<p>I am getting another error message:</p>
<p>The value of the 'Access-Control-Allow-Origin' header in the response
must not be the wildcard '*' when the request's credentials mode is
'include'. Origin 'http://127.0.0.1:3000' is therefore not allowed
access. The credentials mode of requests initiated by the
XMLHttpRequest is controlled by the withCredentials attribute.</p>
</blockquote>
<p>For a request that includes credentials, browsers won’t let your frontend JavaScript code access the response if the value of the <code>Access-Control-Allow-Origin</code> response header is <code>*</code>. Instead the value in that case must exactly match your frontend code’s origin, <code>http://127.0.0.1:3000</code>.</p>
<p>See <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Credentialed_requests_and_wildcards"" rel=""noreferrer""><em>Credentialed requests and wildcards</em></a> in the MDN HTTP access control (CORS) article.</p>
<p>If you control the server you’re sending the request to, then a common way to deal with this case is to configure the server to take the value of the <code>Origin</code> request header, and echo/reflect that back into the value of the <code>Access-Control-Allow-Origin</code> response header; e.g., with nginx:</p>
<pre class=""lang-none prettyprint-override""><code>add_header Access-Control-Allow-Origin $http_origin
</code></pre>
<p>But that’s just an example; other (web) server systems provide similar ways to echo origin values.</p>
<hr />
<blockquote>
<p>I am using Chrome. I also tried using that Chrome CORS Plugin</p>
</blockquote>
<p>That Chrome CORS plugin apparently just simplemindedly injects an <code>Access-Control-Allow-Origin: *</code> header into the response the browser sees. If the plugin were smarter, what it would be doing is setting the value of that fake <code>Access-Control-Allow-Origin</code> response header to the actual origin of your frontend JavaScript code, <code>http://127.0.0.1:3000</code>.</p>
<p>So avoid using that plugin, even for testing. It’s just a distraction. To test what responses you get from the server with no browser filtering them, you’re better off using <code>curl -H</code> as above.</p>
<hr />
<p>As far as the frontend JavaScript code for the <code>fetch(…)</code> request in the question:</p>
<pre><code>headers.append('Access-Control-Allow-Origin', 'http://localhost:3000');
headers.append('Access-Control-Allow-Credentials', 'true');
</code></pre>
<p>Remove those lines. The <code>Access-Control-Allow-*</code> headers are <em>response</em> headers. You never want to send them in a request. The only effect that’ll have is to trigger a browser to do a preflight.</p>",,,19,,2017-05-09 23:03:53.547000+00:00,,2021-02-07 23:03:13.910000+00:00,2021-02-07 23:03:13.910000+00:00,,441757.0,,441757.0,43871637,2,1153,,
99,37801602,,"<p>The syntax is simply:</p>

<pre><code>// to run something in 0.1 seconds

DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
    // your code here
}
</code></pre>

<hr>

<p>Note, the above syntax of adding <code>seconds</code> as a <code>Double</code> seems to be a source of confusion (esp since we were accustomed to adding nsec). That ""add seconds as <code>Double</code>"" syntax works because <code>deadline</code> is a <code>DispatchTime</code> and, behind the scenes, there is a <code>+</code> operator that will take a <code>Double</code> and add that many seconds to the <code>DispatchTime</code>:</p>

<pre><code>public func +(time: DispatchTime, seconds: Double) -&gt; DispatchTime
</code></pre>

<p>But, if you really want to add an integer number of msec, μs, or nsec to the <code>DispatchTime</code>, you can also add a <code>DispatchTimeInterval</code> to a <code>DispatchTime</code>. That means you can do:</p>

<pre><code>DispatchQueue.main.asyncAfter(deadline: .now() + .milliseconds(500)) {
    os_log(""500 msec seconds later"")
}

DispatchQueue.main.asyncAfter(deadline: .now() + .microseconds(1_000_000)) {
    os_log(""1m μs seconds later"")
}

DispatchQueue.main.asyncAfter(deadline: .now() + .nanoseconds(1_500_000_000)) {
    os_log(""1.5b nsec seconds later"")
}
</code></pre>

<p>These all seamlessly work because of this separate overload method for the <code>+</code> operator in the <code>DispatchTime</code> class.</p>

<pre><code>public func +(time: DispatchTime, interval: DispatchTimeInterval) -&gt; DispatchTime
</code></pre>

<hr>

<p>It was asked how one goes about canceling a dispatched task. To do this, use <code>DispatchWorkItem</code>. For example, this starts a task that will fire in five seconds, or if the view controller is dismissed and deallocated, its <code>deinit</code> will cancel the task:</p>

<pre><code>class ViewController: UIViewController {

    private var item: DispatchWorkItem?

    override func viewDidLoad() {
        super.viewDidLoad()

        item = DispatchWorkItem { [weak self] in
            self?.doSomething()
            self?.item = nil
        }

        DispatchQueue.main.asyncAfter(deadline: .now() + 5, execute: item!)
    }

    deinit {
        item?.cancel()
    }

    func doSomething() { ... }

}
</code></pre>

<p>Note the use of the <code>[weak self]</code> capture list in the <code>DispatchWorkItem</code>. This is essential to avoid a strong reference cycle. Also note that this does not do a preemptive cancelation, but rather just stops the task from starting if it hasn’t already. But if it has already started by the time it encounters the <code>cancel()</code> call, the block will finish its execution (unless you’re manually checking <code>isCancelled</code> inside the block).</p>",,,7,,2016-06-14 01:31:08.670000+00:00,,2019-04-24 23:23:18.093000+00:00,2019-04-24 23:23:18.093000+00:00,,1271826.0,,1271826.0,37801436,2,1149,,
