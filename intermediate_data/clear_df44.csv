id,title,body,accepted_answer_id,answer_count,comment_count,community_owned_date,creation_date,favorite_count,last_activity_date,last_edit_date,last_editor_display_name,last_editor_user_id,owner_display_name,owner_user_id,parent_id,post_type_id,score,tags,view_count
11227809,Why is processing a sorted array faster than processing an unsorted array?,"Here is a piece of C++ code that shows some very peculiar behavior. For some strange reason, sorting the data miraculously makes the code almost six times faster:
Without , the code runs in 11.54 seconds.
With the sorted data, the code runs in 1.93 seconds.
Initially, I thought this might be just a language or compiler anomaly, so I tried Java:
With a similar but less extreme result.
My first thought was that sorting brings the data into the cache, but then I thought how silly that was because the array was just generated.
What is going on?
Why is processing a sorted array faster than processing an unsorted array?
The code is summing up some independent terms, so the order should not matter.",11227902.0,26,6,,2012-06-27 13:51:36.160000+00:00,11266,2021-01-27 10:03:36.893000+00:00,2021-01-24 20:58:17.583000+00:00,,5923139.0,,87234,,1,25289,java|c++|performance|optimization|branch-prediction,1577634
6591213,How do I rename a local Git branch?,"I don't want to rename a remote branch, as described in Rename master branch for both local and remote Git repositories.
How can I rename a local branch which hasn't been pushed to a remote branch?
In case you need to rename remote branch as well:
How do I rename both a Git local and remote branch name",6591218.0,34,0,,2011-07-06 03:20:36.830000+00:00,1331,2020-11-14 05:31:29.183000+00:00,2019-11-17 01:31:07.230000+00:00,,1084174.0,,338204,,1,9162,git|version-control|git-branch,3268287
8318911,Why does HTML think “chucknorris” is a color?,"How come certain random strings produce colors when entered as background colors in HTML? For example:
...produces a document with a red background across all browsers and platforms.
Interestingly, while  produces a red background as well,  produces a yellow background.
What’s going on here?",8333464.0,10,4,,2011-11-29 22:54:22.833000+00:00,1833,2021-02-18 10:34:40.607000+00:00,2020-09-30 05:59:41.243000+00:00,,254635.0,,456584,,1,7935,html|browser|background-color,624946
6841333,Why Is Subtracting These Two Times (in 1927) Giving A Strange Result?,"If I run the following program, which parses two date strings referencing times 1 second apart and compares them:
The output is:
Why is , not  (as I would expect from the one-second difference in the times), but ?
If I change the dates to times 1 second later:
Then  will be .
Java version:",6841479.0,10,5,,2011-07-27 08:15:58.380000+00:00,1652,2021-02-03 07:35:43.023000+00:00,2021-01-27 06:20:48.467000+00:00,,2051142.0,,342235,,1,7095,java|date|timezone,721443
14220321,How do I return the response from an asynchronous call?,"I have a function  which makes an asynchronous request. How can I return the response/result from ?
I tried returning the value from the callback, as well as assigning the result to a local variable inside the function and returning that one, but none of those ways actually return the response (they all return  or whatever the initial value of the variable  is).
Example using jQuery's  function:
Example using node.js:
Example using the  block of a promise:",14220323.0,42,0,,2013-01-08 17:06:14.013000+00:00,2639,2021-01-18 16:04:29.197000+00:00,2020-09-11 00:03:33.933000+00:00,,1175966.0,,218196,,1,5844,javascript|jquery|ajax|asynchronous,1630220
16956810,How do I find all files containing specific text on Linux?,"I'm trying to find a way to scan my entire Linux system for all files containing a specific string of text. Just to clarify, I'm looking for text within the file, not in the file name.
When I was looking up how to do this, I came across this solution twice:
However, it doesn't work. It seems to display every single file in the system.
Is this close to the proper way to do it? If not, how should I? This ability to find text strings in files would be extraordinarily useful for some programming projects I'm doing.",16957078.0,51,10,,2013-06-06 08:06:45.533000+00:00,2842,2021-02-22 00:14:52.173000+00:00,2017-05-21 11:40:16.553000+00:00,,63550.0,,954986,,1,5788,linux|text|grep|directory|find,7422188
9329446,For-each over an array in JavaScript,"How can I loop through all the entries in an array using JavaScript?
I thought it was something like this:
Where  is my array, but this seems to be incorrect.",9329476.0,40,1,,2012-02-17 13:51:48.683000+00:00,1489,2021-02-09 16:04:50.947000+00:00,2020-03-08 14:47:59.150000+00:00,,63550.0,,1140876,,1,4945,javascript|arrays|loops|foreach|iteration,4383219
14994391,"""Thinking in AngularJS"" if I have a jQuery background?","Suppose I'm familiar with developing client-side applications in jQuery, but now I'd like to start using AngularJS. Can you describe the paradigm shift that is necessary? Here are a few questions that might help you frame an answer:
How do I architect and design client-side web applications differently? What is the biggest difference?
What should I stop doing/using; What should I start doing/using instead?
Are there any server-side considerations/restrictions?
I'm not looking for a detailed comparison between  and .",15012542.0,15,0,,2013-02-21 04:09:56.063000+00:00,5972,2018-11-02 23:22:39.963000+00:00,2018-11-02 23:22:39.963000+00:00,user3956566,,,215945,,1,4512,javascript|jquery|angularjs,841005
11828270,How do I exit the Vim editor?,"I'm stuck and cannot escape. It says:
But when I type that it simply appears in the object body.",11828573.0,11,10,,2012-08-06 12:25:47.927000+00:00,978,2021-01-07 06:08:50.897000+00:00,2019-05-14 22:49:39.253000+00:00,,63550.0,,1268117,,1,4163,vim|vi,2297592
7244321,How do I update a GitHub forked repository?,"I recently forked a project and applied several fixes. I then created a pull request which was then accepted.
A few days later another change was made by another contributor. So my fork doesn't contain that change. 
How can I get that change into my fork? Do I need to delete and re-create my fork when I have further changes to contribute? Or is there an update button?",7244456.0,28,6,,2011-08-30 13:53:00.447000+00:00,2103,2021-02-18 16:31:02.160000+00:00,2021-02-05 14:51:16.610000+00:00,,7109869.0,,656172,,1,4073,git|github|updates|pull-request|git-fork,888153
14415881,How can I pair socks from a pile efficiently?,"Yesterday I was pairing the socks from the clean laundry and figured out the way I was doing it is not very efficient. I was doing a naive search&nbsp;— picking one sock and ""iterating"" the pile in order to find its pair. This requires iterating over n/2 * n/4 = n2/8 socks on average.
As a computer scientist I was thinking what I could do? Sorting (according to size/color/...) of course came to mind to achieve an O(NlogN) solution.
Hashing or other not-in-place solutions are not an option, because I am not able to duplicate my socks (though it could be nice if I could).
So, the question is basically:
Given a pile of  pairs of socks, containing  elements (assume each sock has exactly one matching pair), what is the best way to pair them up efficiently with up to logarithmic extra space? (I believe I can remember that amount of info if needed.)
I will appreciate an answer that addresses the following aspects:
A general theoretical solution for a huge number of socks.
The actual number of socks is not that large, I don't believe my spouse and I have more than 30 pairs. (And it is fairly easy to distinguish between my socks and hers; can this be used as well?)
Is it equivalent to the element distinctness problem?",14419556.0,36,37,,2013-01-19 15:34:35.667000+00:00,1668,2020-04-23 19:22:07.280000+00:00,2020-04-23 19:19:00.623000+00:00,,63550.0,,572670,,1,3985,algorithm|sorting|language-agnostic|matching,418258
16047306,How is Docker different from a virtual machine?,"I keep rereading the Docker documentation to try to understand the difference between Docker and a full VM. How does it manage to provide a full filesystem, isolated networking environment, etc. without being as heavy?
Why is deploying software to a Docker image (if that's the right term) easier than simply deploying to a consistent production environment?",16048358.0,21,9,,2013-04-16 21:19:47.263000+00:00,1844,2020-11-26 15:53:35.600000+00:00,2018-08-28 20:04:57.970000+00:00,,63550.0,,109549,,1,3875,docker|containers|virtual-machine|virtualization,778581
22343224,What's the difference between tilde(~) and caret(^) in package.json?,"After I upgraded to the latest stable  and , I tried . It saves the entry in the  with the caret  prefix. Previously, it was a tilde  prefix.
Why are these changes made in ?
What is the difference between tilde  and caret ?
What are the advantages over others?",22345808.0,19,4,,2014-03-12 06:02:21.987000+00:00,1030,2021-01-11 07:13:08.920000+00:00,2021-01-11 07:13:08.920000+00:00,,74089.0,,1154350,,1,3807,node.js|npm|package.json|semantic-versioning,916709
13375357,Proper use cases for Android UserManager.isUserAGoat()?,"I was looking at the new APIs introduced in Android 4.2.
While looking at the  class I came across the following method:
  
  Used to determine whether the user making this call is subject to teleportations.
  
  Returns whether the user making this call is a goat.
How and when should this be used?",13375461.0,11,5,,2012-11-14 08:34:01.523000+00:00,633,2020-12-17 16:56:08.903000+00:00,2018-09-07 08:21:54.287000+00:00,,6634591.0,,542091,,1,3730,java|android|usermanager,321275
8710619,"Why don't Java's +=, -=, *=, /= compound assignment operators require casting?","Until today, I thought that for example:
Was just a shortcut for:
But if we try this:
Then  will not compile but  will compile fine.
Does it mean that in fact  is a shortcut for something like this
?",8710685.0,11,12,,2012-01-03 10:10:32.037000+00:00,735,2020-04-09 10:54:12.593000+00:00,2018-09-11 07:37:37.800000+00:00,,9012424.0,,1127571,,1,3712,java|casting|operators|variable-assignment|assignment-operator,301326
8881291,Why is char[] preferred over String for passwords?,"In Swing, the password field has a  (returns ) method instead of the usual  (returns ) method. Similarly, I have come across a suggestion not to use  to handle passwords.
Why does  pose a threat to security when it comes to passwords?
It feels inconvenient to use .",8881376.0,17,0,,2012-01-16 14:20:42.473000+00:00,963,2020-04-24 12:23:57.890000+00:00,2017-01-13 11:48:09.313000+00:00,,3980929.0,,953140,,1,3546,java|string|security|passwords|char,424635
6470651,How can I create a memory leak in Java?,"I just had an interview, and I was asked to create a memory leak with Java.
Needless to say, I felt pretty dumb having no clue on how to even start creating one.
What would an example be?",6471947.0,59,0,2011-07-22 10:24:44.267000+00:00,2011-06-24 16:11:52.227000+00:00,1932,2021-02-25 22:52:48.100000+00:00,2020-11-21 06:08:32.197000+00:00,,63550.0,,465179,,1,3378,java|memory|memory-leaks,668789
15666048,AngularJS: Service vs provider vs factory,"What are the differences between a ,  and  in AngularJS?",15666049.0,30,6,,2013-03-27 17:59:46.853000+00:00,1961,2018-09-03 07:12:04.010000+00:00,2016-11-25 12:46:29.270000+00:00,,2322920.0,,146636,,1,3347,angularjs|dependency-injection|angularjs-service|angularjs-factory|angularjs-provider,769567
7172784,How do I POST JSON data with cURL?,"I use Ubuntu and installed cURL on it. I want to test my Spring REST application with cURL. I wrote my POST code at the Java side. However, I want to test it with cURL. I am trying to post a JSON data. Example data is like this:
I use this command:
It returns this error:
The error description is this:
  The server refused this request because the request entity is in a format not supported by the requested resource for the requested method ().
Tomcat log:
    ""POST /ui/webapp/conf/clear HTTP/1.1"" 415 1051
What is the right format of the cURL command?
This is my Java side  code (I have tested GET and DELETE and they work):",7173011.0,25,3,,2011-08-24 08:51:11.793000+00:00,752,2021-01-17 02:25:11.640000+00:00,2020-01-14 00:25:00.933000+00:00,,5780109.0,,453596,,1,3138,json|rest|spring-mvc|curl|http-headers,3296965
11832914,Round to at most 2 decimal places (only if necessary),"I'd like to round at most 2 decimal places, but only if necessary.
Input:
Output:
How can I do this in JavaScript? ",11832950.0,80,1,,2012-08-06 17:17:48.293000+00:00,524,2021-02-26 19:43:16.053000+00:00,2020-01-08 23:41:01.343000+00:00,,860099.0,,360705,,1,3118,javascript|rounding|decimal-point,2827397
6470428,Catch multiple exceptions in one line (except block),"I know that I can do:
I can also do this:
But if I want to do the same thing inside two different exceptions, the best I can think of right now is to do this:
Is there any way that I can do something like this (since the action to take in both exceptions is to ):
Now this really won't work, as it matches the syntax for:
So, my effort to catch the two distinct exceptions doesn't exactly come through.
Is there a way to do this?",6470452.0,5,1,,2011-06-24 15:55:08.617000+00:00,414,2021-02-02 05:32:20.110000+00:00,2020-05-26 23:27:43.630000+00:00,,198633.0,,198633,,1,3048,python|exception|exception-handling,965053
23569441,Is it possible to apply CSS to half of a character?,"What I am looking for:
A way to style one HALF of a character. (In this case, half the letter being transparent)
What I have currently searched for and tried (With no luck):
Methods for styling half of a character/letter
Styling part of a character with CSS or JavaScript
Apply CSS to 50% of a character
Below is an example of what I am trying to obtain.
Does a CSS or JavaScript solution exist for this, or am I going to have to resort to images? I would prefer not to go the image route as this text will end up being generated dynamically.
UPDATE:
Since many have asked why I would ever want to style half of a character, this is why. My city had recently spent $250,000 to define a new ""brand"" for itself. This logo is what they came up with. Many people have complained about the simplicity and lack of creativity and continue to do so. My goal was to come up with this website as a joke. Type in 'Halifax' and you will see what I mean.",23569891.0,20,4,,2014-05-09 16:16:57.337000+00:00,1139,2021-02-21 16:34:58.270000+00:00,2018-12-16 05:11:13.083000+00:00,,2756409.0,,3009513,,1,2916,javascript|html|css,268161
11304895,How do I copy a folder from remote to local using scp?,"How do I copy a folder from remote to local host using ?
I use  to log in my server.
Then, I would like to copy the remote folder  to local .
How do I achieve this?",11304926.0,11,3,,2012-07-03 05:17:58.003000+00:00,726,2021-02-11 14:08:08.757000+00:00,2019-12-13 04:52:56.767000+00:00,,764312.0,,1469282,,1,2869,shell|command-line|copy|scp,2520417
21947452,"Why is printing ""B"" dramatically slower than printing ""#""?","I generated two matrices of  x :
First Matrix:  and .
Second Matrix:  and .
Using the following code, the first matrix took 8.52 seconds to complete:
With this code, the second matrix took 259.152 seconds to complete:
What is the reason behind the dramatically different run times?
As suggested in the comments, printing only  takes  seconds, whereas  gives .
As others who pointed out that it works for them normally, I tried Ideone.com for instance, and both pieces of code execute at the same speed.
Test Conditions:
I ran this test from Netbeans 7.2, with the output into its console
I used  for measurements",21947627.0,3,10,,2014-02-21 23:45:43.777000+00:00,477,2020-03-03 06:14:58.743000+00:00,2018-04-06 08:01:23.887000+00:00,,3669624.0,,1732709,,1,2806,java|performance|loops|for-loop|system.out,240762
20035101,"Why does my JavaScript code receive a ""No 'Access-Control-Allow-Origin' header is present on the requested resource"" error, while Postman does not?","  Mod note: This question is about why Postman is not subject to CORS restrictions in the same way an XMLHttpRequest is. This question is not about how to fix a ""No 'Access-Control-Allow-Origin'..."" error.
  
  Please stop posting:
  
  
  CORS configurations for every language/framework under the sun. Instead find your relevant language/framework's question.
  3rd party services that allow a request to circumvent CORS
  Command line options for turning off CORS for various browsers
  
I am trying to do authorization using JavaScript by connecting to the RESTful API built-in Flask. However, when I make the request, I get the following error:
  XMLHttpRequest cannot load http://myApiUrl/login. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.
I know that the API or remote resource must set the header, but why did it work when I made the request via the Chrome extension Postman?
This is the request code:",20035319.0,11,14,,2013-11-17 19:29:06.337000+00:00,726,2021-01-09 21:37:06.437000+00:00,2020-08-13 15:11:33.047000+00:00,,70345.0,,2140160,,1,2703,javascript|jquery|cors|same-origin-policy|flask-restless,4687423
8467424,Echo newline in Bash prints literal \n,"In Bash, tried this:
But it doesn't print a newline, only . How can I make it print the newline?
I'm using Ubuntu 11.04.",8467449.0,22,8,,2011-12-11 21:01:54.900000+00:00,363,2020-05-11 14:52:42.467000+00:00,2016-03-27 09:46:03.117000+00:00,,4694621.0,,187644,,1,2685,bash|echo|newline,2415084
9339429,What does cherry-picking a commit with Git mean?,"Recently, I have been asked to  a commit. 
So what does cherry-picking a commit in git mean? How do you do it? ",9339460.0,12,1,,2012-02-18 07:20:47.677000+00:00,479,2021-02-11 13:35:54.940000+00:00,2020-03-22 18:08:13.980000+00:00,,826610.0,,826610,,1,2598,git|cherry-pick|git-cherry-pick,1338835
12859942,Why shouldn't I use mysql_* functions in PHP?,"What are the technical reasons for why one shouldn't use  functions? (e.g. ,  or )?
Why should I use something else even if they work on my site?
If they don't work on my site, why do I get errors like 
  Warning: mysql_connect(): No such file or directory",12860046.0,12,2,,2012-10-12 13:18:39.307000+00:00,533,2020-02-29 23:30:12.460000+00:00,2020-02-29 23:30:12.460000+00:00,,1839439.0,,871050,,1,2562,php|mysql,231714
16476924,How to iterate over rows in a DataFrame in Pandas,"I have a  from Pandas:
Output:
Now I want to iterate over the rows of this frame. For every row I want to be able to access its elements (values in cells) by the name of the columns. For example:
Is it possible to do that in Pandas?
I found this similar question. But it does not give me the answer I need. For example, it is suggested there to use:
or
But I do not understand what the  object is and how I can work with it.",16476974.0,25,6,,2013-05-10 07:04:49.897000+00:00,759,2021-01-21 11:06:29.923000+00:00,2021-01-21 11:06:29.923000+00:00,,4909087.0,,245549,,1,2553,python|pandas|dataframe,3420182
9537392,Git fetch remote branch,"My colleague and I are working on the same repository. We've branched it into two branches, each technically for different projects, but they have similarities, so we'll sometimes want to commit back to the * from the .
However, I have the . How can my colleague pull that branch specifically?
A  of the repository does not seem to create the branches locally for him, though I can see them live on unfuddle after a push on my end.
Also, when I originally made the branch, I did . Does that make much difference?
These are the commands I ran. But it definitely is not working.
I want to be able to check out that branch and then push and commit back just the branches changes from various collaborators or workstations.",9537923.0,31,8,,2012-03-02 17:06:56.660000+00:00,845,2021-02-22 17:10:27.397000+00:00,2019-12-16 14:08:47.330000+00:00,,63550.0,,846381,,1,2473,git|branch|git-branch|git-fetch,2905983
6677035,jQuery scroll to element,"I have this  element:
Then I have some other elements, like other text inputs, textareas, etc.
When the user clicks on that  with , the page should scroll to the last element of the page with a nice animation. It should be a scroll to bottom and not to top.
The last item of the page is a  button with :
The animation should not be too fast and should be fluid.
I am running the latest jQuery version. I prefer to not install any plugin but to use the default jQuery features to achieve this.",6677069.0,32,2,,2011-07-13 09:49:44.753000+00:00,618,2020-08-26 07:38:15.700000+00:00,2020-01-08 11:48:03.880000+00:00,,860099.0,,735997,,1,2459,javascript|jquery|scroll,2700460
9834689,Comparing two branches in Git?,"I have two branches,  and .
How can I see the differences between the two branches in Git?",,1,8,,2012-03-23 05:47:48.177000+00:00,444,2020-10-02 15:21:10.300000+00:00,2020-10-02 15:21:10.300000+00:00,,3739391.0,,1287588,,1,2458,git|git-diff,1650725
6996603,How to delete a file or folder?,How do I delete a file or folder in Python?,6996628.0,13,0,,2011-08-09 13:05:42.343000+00:00,333,2020-11-23 19:31:19.860000+00:00,2020-08-30 13:21:11.407000+00:00,,7954504.0,,854002,,1,2423,python|file-io|directory|delete-file,2257422
10972176,Find the version of an installed npm package,"How to find the version of an installed node.js/npm package?
This prints the version of npm itself:
This prints a cryptic error:
This prints the package version on the registry (i.e. the latest version available):
How do I get the installed version?",10986132.0,28,3,,2012-06-10 20:36:27.693000+00:00,403,2021-02-04 10:42:48.440000+00:00,2014-08-13 12:31:29.630000+00:00,,1005455.0,,1005455,,1,2414,node.js|package|npm,1359878
8865458,How do I vertically center text with CSS?,"I have a  element which contains text and I want to align the contents of this  vertically center.
Here is my  style:
What is the best way to achieve this goal?",8865463.0,38,2,,2012-01-14 21:25:10.070000+00:00,622,2020-09-23 03:53:39.333000+00:00,2020-09-16 07:13:30.257000+00:00,,14152908.0,,508284,,1,2412,html|css|vertical-alignment,3478923
24958140,What is the difference between the 'COPY' and 'ADD' commands in a Dockerfile?,"What is the difference between the  and  commands in a Dockerfile, and when would I use one over the other?
  The COPY instruction will copy new files from  and add them to the container's filesystem at path 
  The ADD instruction will copy new files from  and add them to the container's filesystem at path .",24958548.0,15,4,,2014-07-25 14:31:20.337000+00:00,337,2021-02-24 06:17:18.823000+00:00,2019-09-16 05:12:49.187000+00:00,,7911776.0,,131640,,1,2405,docker|dockerfile,769686
17071871,How to select rows from a DataFrame based on column values,"How can I select rows from a  based on values in some column in Pandas?
In SQL, I would use:
I tried to look at Pandas' documentation, but I did not immediately find the answer.",17071908.0,11,2,,2013-06-12 17:42:05.903000+00:00,1322,2021-02-08 15:58:43.080000+00:00,2020-10-05 18:23:57.880000+00:00,,63550.0,,458429,,1,2390,python|pandas|dataframe,3581772
19578796,What is the --save option for npm install?,"I saw some tutorial where the command was:
What does the  option mean?
Not able to find the answer on Google.",19578808.0,13,9,,2013-10-24 23:54:11.843000+00:00,399,2020-12-07 04:17:26.540000+00:00,2016-08-02 22:23:58.940000+00:00,,1259510.0,,2232662,,1,2357,node.js|npm,785985
30081275,"Why is ""1000000000000000 in range(1000000000000001)"" so fast in Python 3?","It is my understanding that the  function, which is actually an object type in Python 3, generates its contents on the fly, similar to a generator. 
This being the case, I would have expected the following line to take an inordinate amount of time, because in order to determine whether 1 quadrillion is in the range, a quadrillion values would have to be generated: 
Furthermore: it seems that no matter how many zeroes I add on, the calculation more or less takes the same amount of time (basically instantaneous). 
I have also tried things like this, but the calculation is still almost instant: 
If I try to implement my own range function, the result is not so nice!! 
What is the  object doing under the hood that makes it so fast? 
Martijn Pieters' answer was chosen for its completeness, but also see abarnert's first answer for a good discussion of what it means for  to be a full-fledged sequence in Python 3, and some information/warning regarding potential inconsistency for  function optimization across Python implementations. abarnert's other answer goes into some more detail and provides links for those interested in the history behind the optimization in Python 3 (and lack of optimization of  in Python 2). Answers by poke and by wim provide the relevant C source code and explanations for those who are interested. ",30081318.0,11,13,,2015-05-06 15:32:43.060000+00:00,455,2020-12-18 20:05:35.830000+00:00,2018-02-22 19:43:05.983000+00:00,,2437514.0,,2437514,,1,2336,python|performance|python-3.x|range|python-internals,232928
9270734,"ssh ""permissions are too open"" error","I had a problem with my mac where I couldn't save any kind of file on the disk anymore.
I had to reboot OSX lion and reset the permissions on files and acls.
But now when I want to commit a repository I get the following error from ssh:
What permissions levels should i give to the id_rsa file?",9270753.0,29,2,,2012-02-14 02:02:31.860000+00:00,432,2021-02-19 19:06:28.113000+00:00,2014-05-26 23:48:02.053000+00:00,,187954.0,,960956,,1,2316,permissions|ssh,1615739
8547778,Why are elementwise additions much faster in separate loops than in a combined loop?,"Suppose , , , and  point to heap memory, and my numerical code has the following core loop.
This loop is executed 10,000 times via another outer  loop. To speed it up, I changed the code to:
Compiled on MS Visual C++ 10.0 with full optimization and SSE2 enabled for 32-bit on a Intel Core 2 Duo (x64), the first example takes 5.5 seconds and the double-loop example takes only 1.9 seconds. My question is: (Please refer to my rephrased question at the bottom)
PS: I am not sure if this helps:
Disassembly for the first loop basically looks like this (this block is repeated about five times in the full program):
Each loop of the double loop example produces this code (the following block is repeated about three times):
The question turned out to be of no relevance, as the behavior severely depends on the sizes of the arrays (n) and the CPU cache. So if there is further interest, I rephrase the question:
Could you provide some solid insight into the details that lead to the different cache behaviors as illustrated by the five regions on the following graph?
It might also be interesting to point out the differences between CPU/cache architectures, by providing a similar graph for these CPUs.
PPS: Here is the full code. It uses TBB  for higher resolution timing, which can be disabled by not defining the  Macro:
(It shows FLOP/s for different values of .)",8547993.0,10,16,,2011-12-17 20:40:52.030000+00:00,937,2020-12-05 02:42:55.440000+00:00,2020-12-05 02:42:55.440000+00:00,,11301220.0,,578832,,1,2301,c++|performance|x86|vectorization|compiler-optimization,243063
17666249,How do I import an SQL file using the command line in MySQL?,"I have a  file with an export from . I want to import it into a different server using the command line.
I have a Windows Server 2008 R2 installation. I placed the  file on the C drive, and I tried this command
It is not working. I get syntax errors.
How can I import this file without a problem?
Do I need to create a database first?",17666279.0,52,6,,2013-07-16 00:43:48.420000+00:00,688,2021-02-09 02:26:21.560000+00:00,2019-07-10 14:46:55.193000+00:00,,63550.0,,1915046,,1,2245,mysql|sql|command-line|import,3727194
14494747,How to add images to README.md on GitHub?,"Recently I joined GitHub. I hosted some projects there.
I need to include some images in my README File. I don't know how to do that.
I searched about this, but all I got was some links which tell me to ""host images on web and specify the image path in README.md file"".
Is there any way to do this without hosting the images on any third-party web hosting services?",14494775.0,32,4,,2013-01-24 05:44:06.837000+00:00,383,2020-12-03 19:58:51.397000+00:00,2020-09-16 13:49:33.653000+00:00,,3257186.0,,1104384,,1,2242,github|markdown|github-flavored-markdown|readme,1116490
18875674,"What's the difference between dependencies, devDependencies and peerDependencies in npm package.json file?","This documentation answers my question very poorly. I didn't understand those explanations. Can someone say in simpler words? Maybe with examples if it's hard to choose simple words?
EDIT also added , which is closely related and might cause confusion.",22004559.0,14,3,,2013-09-18 14:57:06.917000+00:00,736,2021-01-06 22:28:28.013000+00:00,2020-08-06 09:36:53.103000+00:00,,3454786.0,,1146469,,1,2236,node.js|npm|dependencies|package.json,600739
6827752,"What's the difference between @Component, @Repository & @Service annotations in Spring?","Can ,  and  annotations be used interchangeably in Spring or do they provide any particular functionality besides acting as a notation device?
In other words, if I have a Service class and I change the annotation from  to , will it still behave the same way? 
Or does the annotation also influence the behavior and functionality of the class?",,29,3,,2011-07-26 09:10:46.560000+00:00,893,2021-02-04 05:35:36.003000+00:00,2020-02-17 13:10:21.400000+00:00,,4825845.0,,863084,,1,2228,java|spring|spring-mvc|annotations,948482
6797984,How do I lowercase a string in Python?,"Is there a way to convert a string from uppercase, or even part uppercase to lowercase? 
For example, ""Kilometers"" → ""kilometers"".",6797990.0,5,0,,2011-07-23 03:08:53.153000+00:00,176,2020-10-22 09:51:05.733000+00:00,2019-05-31 16:06:08.157000+00:00,,10669875.0,,858922,,1,2224,python|string|uppercase|lowercase,2604122
8312459,Iterate through object properties,How does the variable  represent the properties of the object? It's not a built-in method or property. Why does it come up with every property in the object?,,30,8,,2011-11-29 14:30:26.123000+00:00,365,2021-02-18 22:02:34.257000+00:00,2019-03-13 10:58:10.257000+00:00,user663031,3745677.0,,1048252,,1,2153,javascript|loops|object,1405990
16073603,How to update each dependency in package.json to the latest version?,"I copied  from another project and now want to bump all of the dependencies to their latest versions since this is a fresh project and I don't mind fixing something if it breaks.
What's the easiest way to do this?
The best way I know is to run  then update each dependency in  manually. There must be a better way.
For Yarn specific solutions refer to this SO thread.",16074029.0,34,9,,2013-04-18 02:39:04.573000+00:00,745,2020-12-22 21:58:42.843000+00:00,2020-12-22 21:57:02.260000+00:00,,480608.0,,480608,,1,2150,node.js|npm,953984
7229885,What are the differences between .gitignore and .gitkeep?,"What are the differences between  and ? Are they the same thing with a different name, or do they both serve a different function?
I don't seem to be able to find much documentation on .",7229996.0,5,0,,2011-08-29 12:11:05.037000+00:00,283,2020-11-21 14:10:50.877000+00:00,2019-10-06 14:06:07.980000+00:00,user456814,63550.0,,509271,,1,2135,git|gitignore,421618
11346283,Renaming columns in Pandas,"I have a DataFrame using Pandas and column labels that I need to edit to replace the original column labels.
I'd like to change the column names in a DataFrame  where the original column names are:
to
I have the edited column names stored it in a list, but I don't know how to replace the column names.",11346337.0,27,2,,2012-07-05 14:21:15.090000+00:00,563,2021-02-13 06:01:40.403000+00:00,2021-02-13 05:17:36.957000+00:00,,63550.0,,1504276,,1,2124,python|pandas|replace|dataframe|rename,3395396
11227902,,"You are a victim of branch prediction fail.
What is Branch Prediction?
Consider a railroad junction:
Image by Mecanismo, via Wikimedia Commons. Used under the CC-By-SA 3.0 license.
Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.
You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.
Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.
Is there a better way? You guess which direction the train will go!
If you guessed right, it continues on.
If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.
If you guess right every time, the train will never have to stop.
If you guess wrong too often, the train will spend a lot of time stopping, backing up, and restarting.
Consider an if-statement: At the processor level, it is a branch instruction:
You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.
Modern processors are complicated and have long pipelines. So they take forever to &quot;warm up&quot; and &quot;slow down&quot;.
Is there a better way? You guess which direction the branch will go!
If you guessed right, you continue executing.
If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.
If you guess right every time, the execution will never have to stop.
If you guess wrong too often, you spend a lot of time stalling, rolling back, and restarting.
This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.
So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...
In other words, you try to identify a pattern and follow it. This is more or less how branch predictors work.
Most applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.
Further reading: &quot;Branch predictor&quot; article on Wikipedia.
As hinted from above, the culprit is this if-statement:
Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.
This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.
Quick visualization:
However, when the data is completely random, the branch predictor is rendered useless, because it can't predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).
So what can be done?
If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.
Replace:
with:
This eliminates the branch and replaces it with some bitwise operations.
(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of .)
Benchmarks: Core i7 920 @ 3.5 GHz
C++ - Visual Studio 2010 - x64 Release
Scenario
Time (seconds)
Branching - Random data
11.777
Branching - Sorted data
2.352
Branchless - Random data
2.564
Branchless - Sorted data
2.587
Java - NetBeans 7.1.1 JDK 7 - x64
Scenario
Time (seconds)
Branching - Random data
10.93293813
Branching - Sorted data
5.643797077
Branchless - Random data
3.113581453
Branchless - Sorted data
3.186068823
Observations:
With the Branch: There is a huge difference between the sorted and unsorted data.
With the Hack: There is no difference between sorted and unsorted data.
In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.
A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).
Update:
GCC 4.6.1 with  or  on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.
(Or somewhat fast: for the already-sorted case,  can be slower especially if GCC puts it on the critical path instead of just , especially on Intel before Broadwell where  has 2 cycle latency: gcc optimization flag -O3 makes code slower than -O2)
VC++ 2010 is unable to generate conditional moves for this branch even under .
Intel C++ Compiler (ICC) 11 does something miraculous. It interchanges the two loops, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune to the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...
If you give the Intel compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).
This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...",,,10,,2012-06-27 13:56:42.820000+00:00,,2021-01-10 15:35:52.317000+00:00,2021-01-10 15:35:52.317000+00:00,,3204551.0,,922184,11227809,2,32802,,
6591218,,"If you want to rename a branch while pointed to any branch, do:
If you want to rename the current branch, you can do:
A way to remember this is  is for ""move"" (or ), which is how you rename files. Adding an alias could also help. To do so, run the following:
If you are on Windows or another case-insensitive filesystem, and there are only capitalization changes in the name, you need to use , otherwise, git will throw branch already exists error:",,,16,,2011-07-06 03:21:42.917000+00:00,,2020-04-23 16:24:13.017000+00:00,2020-04-23 16:24:13.017000+00:00,,4449035.0,,394487,6591213,2,14816,,
6841479,,"It's a time zone change on December 31st in Shanghai.
See this page for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So ""1927-12-31 23:54:08"" actually happened twice, and it looks like Java is parsing it as the later possible instant for that local date/time - hence the difference.
Just another episode in the often weird and wonderful world of time zones.
EDIT: Stop press! History changes...
The original question would no longer demonstrate quite the same behaviour, if rebuilt with version 2013a of TZDB. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.
I only noticed this because I'm collecting questions like this in Noda Time, in the form of unit tests... The test has now been changed, but it just goes to show - not even historical data is safe.
EDIT: History has changed again...
In TZDB 2014f, the time of the change has moved to 1900-12-31, and it's now a mere 343 second change (so the time between  and  is 344 seconds, if you see what I mean).
EDIT: To answer a question around a transition at 1900... it looks like the Java timezone implementation treats all time zones as simply being in their standard time for any instant before the start of 1900 UTC:
The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn't rely on any idea of a ""fixed"" standard time (which is what  assumes to be a valid concept) so other libraries needn't introduce this artificial transition.",,,0,,2011-07-27 08:31:10.090000+00:00,,2019-02-07 09:29:50.330000+00:00,2019-02-07 09:29:50.330000+00:00,,22656.0,,22656,6841333,2,11291,,
6866485,,"Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand. I'll show you the 4 different ways you can undo a commit.
option 1: 
Say you have this, where C is your HEAD and (F) is the state of your files.
You want to nuke commit C and never see it again and lose all the changes in locally modified files.  You do this:
The result is:
Now B is the HEAD.  Because you used , your files are reset to their state at commit B.
option 2: 
Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to undo the commit but keep your changes for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:
You can do this, leaving off the :
In this case the result is:
In both cases, HEAD is just a pointer to the latest commit.  When you do a , you tell Git to move the HEAD pointer back one commit.  But (unless you use ) you leave your files as they were.  So now  shows the changes you had checked into C.  You haven't lost a thing!
option 3: 
For the lightest touch, you can even undo your commit but leave your files and your index:
This not only leaves your files alone, it even leaves your index alone.  When you do , you'll see that the same files are in the index as before.  In fact, right after this command, you could do  and you'd be redoing the same commit you just had.
option 4: you did  and need to get that code back
One more thing: Suppose you destroy a commit as in the first example, but then discover you needed it after all?  Tough luck, right?
Nope, there's still a way to get it back.  Type  and you'll see a list of (partial) commit shas (that is, hashes) that you've moved around in.  Find the commit you destroyed, and do this:
You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of.",,,32,,2011-07-28 22:22:20.757000+00:00,,2020-10-09 17:53:06.207000+00:00,2020-10-09 17:53:06.207000+00:00,,52074.0,,5486,927358,2,11177,,
8888015,,"⚠ Important: If you have any local changes, they will be lost. With or without  option, any local commits that haven't been pushed will be lost.[*]
If you have any files that are not tracked by Git (e.g. uploaded user content), these files will not be affected.
First, run a fetch to update all  refs to latest:
Backup your current branch:
Then, you have two options:
OR If you are on some other branch:
Explanation:
 downloads the latest from remote without trying to merge or rebase anything.
Then the  resets the master branch to what you just fetched. The  option changes all the files in your working tree to match the files in 
Maintain current local commits
[*]: It's worth noting that it is possible to maintain current local commits by creating a branch from  before resetting:
After this, all of the old commits will be kept in .
Uncommitted changes
Uncommitted changes, however (even staged), will be lost. Make sure to stash and commit anything you need. For that you can run the following:
And then to reapply these uncommitted changes:",,,33,,2012-01-17 00:02:58.813000+00:00,,2020-09-28 03:44:45.357000+00:00,2020-09-28 03:44:45.357000+00:00,,565877.0,,489564,1125968,2,10973,,
16957078,,"Do the following:
 or  is recursive,
 is line number, and
 stands for match the whole word.
 (lower-case L) can be added to just give the file name of matching files.
 is the pattern used during the search
Along with these, , ,  flags could be used for efficient searching:
This will only search through those files which have .c or .h extensions:
This will exclude searching all the files ending with .o extension:
For directories it's possible to exclude one or more directories using the  parameter. For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:
This works very well for me, to achieve almost the same purpose like yours.
For more options check .",,,41,,2013-06-06 08:21:35.803000+00:00,,2021-01-26 21:27:47.913000+00:00,2021-01-26 21:27:47.913000+00:00,,11163122.0,,2231815,16956810,2,10591,,
8333464,,"It’s a holdover from the Netscape days:
Missing digits are treated as 0[...]. An incorrect digit is simply interpreted as 0. For example the values #F0F0F0, F0F0F0, F0F0F, #FxFxFx and FxFxFx are all the same.
It is from the blog post A little rant about Microsoft Internet Explorer's color parsing which covers it in great detail, including varying lengths of color values, etc.
If we apply the rules in turn from the blog post, we get the following:
Replace all nonvalid hexadecimal characters with 0’s:
Pad out to the next total number of characters divisible by 3 (11 → 12):
Split into three equal groups, with each component representing the corresponding colour component of an RGB colour:
Truncate each of the arguments from the right down to two characters.
Which, finally, gives the following result:
Here’s an example demonstrating the  attribute in action, to produce this “amazing” colour swatch:
This also answers the other part of the question: Why does  produce a yellow colour? Well, if we apply the rules, the string is:
Which gives a light yellow gold colour. As the string starts off as 9 characters, we keep the second ‘C’ this time around, hence it ends up in the final colour value.
I originally encountered this when someone pointed out that you could do  and, well, it comes out brown.",,,0,,2011-11-30 21:53:38.350000+00:00,,2020-09-30 06:03:44.873000+00:00,2020-09-30 06:03:44.873000+00:00,,254635.0,,1073107,8318911,2,7397,,
9329476,,"TL;DR
Your best bets are usually
a  loop (ES2015+ only)
 ( | ) (or its relatives  and such) (ES5+ only)
a simple old-fashioned  loop
(rarely)  with safeguards
Don't use  unless you use it with safeguards or are at least aware of why it might bite you.
Don't use  ( | ) if you're not using the return value of .(there's sadly someone out there teaching  as though it were  — 's job is to create a new array from the values of the original passed through your mapping function, don't use it just for iteration)
But there's lots more to explore, read on...
JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-like, such as the  object, other iterable objects (ES2015+), DOM collections, and so on.
I'll quickly note that you can use the ES2015 options now, even on ES5 engines, by transpiling ES2015 to ES5. Search for &quot;ES2015 transpiling&quot; / &quot;ES6 transpiling&quot; for more...
Okay, let's look at our options:
For Actual Arrays
You have three options in ECMAScript 5 (&quot;ES5&quot;), the version most broadly supported at the moment, and two more added in ECMAScript 2015 (&quot;ES2015&quot;, &quot;ES6&quot;):
Use  and related (ES5+)
Use a simple  loop
Use  correctly
Use  (use an iterator implicitly) (ES2015+)
Use an iterator explicitly (ES2015+)
Details:
1. Use  and related
In any vaguely-modern environment (so, not IE8) where you have access to the  features added by ES5 (directly or using polyfills), you can use  ( | ):
 accepts a callback function and, optionally, a value to use as  when calling that callback (not used above). The callback is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the callback is called with three: The value of each entry, the index of that entry, and a reference to the array you're iterating over (in case your function doesn't already have it handy).
Unless you're supporting obsolete browsers like IE8 (which NetApps shows at just over 4% market share as of this writing in September 2016), you can happily use  in a general-purpose web page without a shim. If you do need to support obsolete browsers, shimming/polyfilling  is easily done (search for &quot;es5 shim&quot; for several options).
 has the benefit that you don't have to declare indexing and value variables in the containing scope, as they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.
If you're worried about the runtime cost of making a function call for each array entry, don't be; details.
Additionally,  is the &quot;loop through them all&quot; function, but ES5 defined several other useful &quot;work your way through the array and do things&quot; functions, including:
 (stops looping the first time the callback returns  or something falsey)
 (stops looping the first time the callback returns  or something truthy)
 (creates a new array including elements where the filter function returns  and omitting the ones where it returns )
 (creates a new array from the values returned by the callback)
 (builds up a value by repeatedly calling the callback, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)
 (like , but works in descending rather than ascending order)
2. Use a simple  loop
Sometimes the old ways are the best:
If the length of the array won't change during the loop, and it's in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a tiny bit faster:
And/or counting backward:
But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.
In ES2015 and higher, you can make your index and value variables local to the  loop:
And when you do that, not just  but also  is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the  (and ) created for that specific iteration:
If you had five divs, you'd get &quot;Index is: 0&quot; if you clicked the first and &quot;Index is: 4&quot; if you clicked the last. This does not work if you use  instead of .
3. Use  correctly
You'll get people telling you to use , but that's not what  is for.  loops through the enumerable properties of an object, not the indexes of an array. The order is not guaranteed, not even in ES2015 (ES6). ES2015+ does define an order to object properties (via , , and things that use them like ), but it didn't define that  would follow that order; ES2020 did, though. (Details in this other answer.)
The only real use cases for  on an array are:
It's a sparse arrays with massive gaps in it, or
You're using non-element properties and you want to include them in the loop
Looking only at that first example: You can use  to visit those sparse array elements if you use appropriate safeguards:
Note the three checks:
That the object has its own property by that name (not one it inherits from its prototype), and
That the key is all decimal digits (e.g., normal string form, not scientific notation), and
That the key's value when coerced to a number is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index in the specification. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - 2 is that that makes the greatest index value one lower than 2^32 - 1, which is the maximum value an array's  can have. (E.g., an array's length fits in a 32-bit unsigned integer.) (Props to RobG for pointing out in a comment on my blog post that my previous test wasn't quite right.)
You wouldn't do that in inline code, of course. You'd write a utility function. Perhaps:
4. Use  (use an iterator implicitly) (ES2015+)
ES2015 added iterators to JavaScript. The easiest way to use iterators is the new  statement. It looks like this:
Under the covers, that gets an iterator from the array and loops through it, getting the values from it. This doesn't have the issue that using  has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their entries (not their properties). Unlike  in ES5, the order in which the entries are visited is the numeric order of their indexes.
5. Use an iterator explicitly (ES2015+)
Sometimes, you might want to use an iterator explicitly. You can do that, too, although it's a lot clunkier than . It looks like this:
The iterator is an object matching the Iterator definition in the specification. Its  method returns a new result object each time you call it. The result object has a property, , telling us whether it's done, and a property  with the value for that iteration. ( is optional if it would be ,  is optional if it would be .)
The meaning of  varies depending on the iterator; arrays support (at least) three functions that return iterators:
: This is the one I used above. It returns an iterator where each  is the array entry for that iteration (, , and  in the example earlier).
: Returns an iterator where each  is the key for that iteration (so for our  above, that would be , then , then ).
: Returns an iterator where each  is an array in the form  for that iteration.
For Array-Like Objects
Aside from true arrays, there are also array-like objects that have a  property and properties with numeric names:  instances, the  object, etc. How do we loop through their contents?
Use any of the options above for arrays
At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:
Use  and related (ES5+)
The various functions on  are &quot;intentionally generic&quot; and can usually be used on array-like objects via  or . (See the Caveat for host-provided objects at the end of this answer, but it's a rare issue.)
Suppose you wanted to use  on a 's  property. You'd do this:
If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:
Use a simple  loop
Obviously, a simple  loop applies to array-like objects.
Use  correctly
 with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.
Use  (use an iterator implicitly) (ES2015+)
 uses the iterator provided by the object (if any). That includes host-provided objects. For instance, the specification for the  from  was updated to support iteration. The spec for the  from  was not.
Use an iterator explicitly (ES2015+)
See #4.
Create a true array
Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:
Use the  method of arrays
We can use the  method of arrays, which like the other methods mentioned above is &quot;intentionally generic&quot; and so can be used with array-like objects, like this:
So for instance, if we want to convert a  into a true array, we could do this:
See the Caveat for host-provided objects below. In particular, note that this will fail in IE8 and earlier, which don't let you use host-provided objects as  like that.
Use spread syntax ()
It's also possible to use ES2015's spread syntax with JavaScript engines that support this feature. Like , this uses the iterator provided by the object (see #4 in the previous section):
So for instance, if we want to convert a  into a true array, with spread syntax this becomes quite succinct:
Use 
 (spec) | (MDN) (ES2015+, but easily polyfilled) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:
Or if you wanted to get an array of the tag names of the elements with a given class, you'd use the mapping function:
Caveat for host-provided objects
If you use  functions with host-provided array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. Most do behave properly (now), but it's important to test. The reason is that most of the  methods you're likely to want to use rely on the host-provided object giving an honest answer to the abstract  operation. As of this writing, browsers do a very good job of this, but the 5.1 spec did allow for the possibility a host-provided object may not be honest. It's in §8.6.2, several paragraphs below the big table near the beginning of that section), where it says:
Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that  and  for a particular host object indeed fetch and store property values but  always generates false.
(I couldn't find the equivalent verbiage in the ES2015 spec, but it's bound to still be the case.) Again, as of this writing the common host-provided array-like objects in modern browsers [ instances, for instance] do handle  correctly, but it's important to test.)",,,2,,2012-02-17 13:53:44.857000+00:00,,2021-02-09 16:04:50.947000+00:00,2021-02-09 16:04:50.947000+00:00,,157247.0,,157247,9329446,2,7334,,
15012542,,"1. Don't design your page, and then change it with DOM manipulations
In jQuery, you design a page, and then you make it dynamic. This is because jQuery was designed for augmentation and has grown incredibly from that simple premise.
But in AngularJS, you must start from the ground up with your architecture in mind. Instead of starting by thinking ""I have this piece of the DOM and I want to make it do X"", you have to start with what you want to accomplish, then go about designing your application, and then finally go about designing your view.
2. Don't augment jQuery with AngularJS
Similarly, don't start with the idea that jQuery does X, Y, and Z, so I'll just add AngularJS on top of that for models and controllers. This is really tempting when you're just starting out, which is why I always recommend that new AngularJS developers don't use jQuery at all, at least until they get used to doing things the ""Angular Way"".
I've seen many developers here and on the mailing list create these elaborate solutions with jQuery plugins of 150 or 200 lines of code that they then glue into AngularJS with a collection of callbacks and s that are confusing and convoluted; but they eventually get it working! The problem is that in most cases that jQuery plugin could be rewritten in AngularJS in a fraction of the code, where suddenly everything becomes comprehensible and straightforward.
The bottom line is this: when solutioning, first ""think in AngularJS""; if you can't think of a solution, ask the community; if after all of that there is no easy solution, then feel free to reach for the jQuery. But don't let jQuery become a crutch or you'll never master AngularJS.
3. Always think in terms of architecture
First know that single-page applications are applications. They're not webpages. So we need to think like a server-side developer in addition to thinking like a client-side developer. We have to think about how to divide our application into individual, extensible, testable components.
So then how do you do that? How do you ""think in AngularJS""? Here are some general principles, contrasted with jQuery.
The view is the ""official record""
In jQuery, we programmatically change the view. We could have a dropdown menu defined as a  like so:
In jQuery, in our application logic, we would activate it with something like:
When we just look at the view, it's not immediately obvious that there is any functionality here. For small applications, that's fine. But for non-trivial applications, things quickly get confusing and hard to maintain.
In AngularJS, though, the view is the official record of view-based functionality. Our  declaration would look like this instead:
These two do the same thing, but in the AngularJS version anyone looking at the template knows what's supposed to happen. Whenever a new member of the development team comes on board, she can look at this and then know that there is a directive called  operating on it; she doesn't need to intuit the right answer or sift through any code. The view told us what was supposed to happen. Much cleaner.
Developers new to AngularJS often ask a question like: how do I find all links of a specific kind and add a directive onto them. The developer is always flabbergasted when we reply: you don't. But the reason you don't do that is that this is like half-jQuery, half-AngularJS, and no good. The problem here is that the developer is trying to ""do jQuery"" in the context of AngularJS. That's never going to work well. The view is the official record. Outside of a directive (more on this below), you never, ever, never change the DOM. And directives are applied in the view, so intent is clear.
Remember: don't design, and then mark up. You must architect, and then design.
Data binding
This is by far one of the most awesome features of AngularJS and cuts out a lot of the need to do the kinds of DOM manipulations I mentioned in the previous section. AngularJS will automatically update your view so you don't have to! In jQuery, we respond to events and then update content. Something like:
For a view that looks like this:
Apart from mixing concerns, we also have the same problems of signifying intent that I mentioned before. But more importantly, we had to manually reference and update a DOM node. And if we want to delete a log entry, we have to code against the DOM for that too. How do we test the logic apart from the DOM? And what if we want to change the presentation?
This a little messy and a trifle frail. But in AngularJS, we can do this:
And our view can look like this:
But for that matter, our view could look like this:
And now instead of using an unordered list, we're using Bootstrap alert boxes. And we never had to change the controller code! But more importantly, no matter where or how the log gets updated, the view will change too. Automatically. Neat!
Though I didn't show it here, the data binding is two-way. So those log messages could also be editable in the view just by doing this: . And there was much rejoicing.
Distinct model layer
In jQuery, the DOM is kind of like the model. But in AngularJS, we have a separate model layer that we can manage in any way we want, completely independently from the view. This helps for the above data binding, maintains separation of concerns, and introduces far greater testability. Other answers mentioned this point, so I'll just leave it at that.
Separation of concerns
And all of the above tie into this over-arching theme: keep your concerns separate. Your view acts as the official record of what is supposed to happen (for the most part); your model represents your data; you have a service layer to perform reusable tasks; you do DOM manipulation and augment your view with directives; and you glue it all together with controllers. This was also mentioned in other answers, and the only thing I would add pertains to testability, which I discuss in another section below.
Dependency injection
To help us out with separation of concerns is dependency injection (DI). If you come from a server-side language (from Java to PHP) you're probably familiar with this concept already, but if you're a client-side guy coming from jQuery, this concept can seem anything from silly to superfluous to hipster. But it's not. :-)
From a broad perspective, DI means that you can declare components very freely and then from any other component, just ask for an instance of it and it will be granted. You don't have to know about loading order, or file locations, or anything like that. The power may not immediately be visible, but I'll provide just one (common) example: testing.
Let's say in our application, we require a service that implements server-side storage through a REST API and, depending on application state, local storage as well. When running tests on our controllers, we don't want to have to communicate with the server - we're testing the controller, after all. We can just add a mock service of the same name as our original component, and the injector will ensure that our controller gets the fake one automatically - our controller doesn't and needn't know the difference.
Speaking of testing...
4. Test-driven development - always
This is really part of section 3 on architecture, but it's so important that I'm putting it as its own top-level section.
Out of all of the many jQuery plugins you've seen, used, or written, how many of them had an accompanying test suite? Not very many because jQuery isn't very amenable to that. But AngularJS is.
In jQuery, the only way to test is often to create the component independently with a sample/demo page against which our tests can perform DOM manipulation. So then we have to develop a component separately and then integrate it into our application. How inconvenient! So much of the time, when developing with jQuery, we opt for iterative instead of test-driven development. And who could blame us?
But because we have separation of concerns, we can do test-driven development iteratively in AngularJS! For example, let's say we want a super-simple directive to indicate in our menu what our current route is. We can declare what we want in the view of our application:
Okay, now we can write a test for the non-existent  directive:
And when we run our test, we can confirm that it fails. Only now should we create our directive:
Our test now passes and our menu performs as requested. Our development is both iterative and test-driven. Wicked-cool.
5. Conceptually, directives are not packaged jQuery
You'll often hear ""only do DOM manipulation in a directive"". This is a necessity. Treat it with due deference!
But let's dive a little deeper...
Some directives just decorate what's already in the view (think ) and therefore sometimes do DOM manipulation straight away and then are basically done. But if a directive is like a ""widget"" and has a template, it should also respect separation of concerns. That is, the template too should remain largely independent from its implementation in the link and controller functions.
AngularJS comes with an entire set of tools to make this very easy; with  we can dynamically update the class;  allows two-way data binding;  and  programmatically show or hide an element; and many more - including the ones we write ourselves. In other words, we can do all kinds of awesomeness without DOM manipulation. The less DOM manipulation, the easier directives are to test, the easier they are to style, the easier they are to change in the future, and the more re-usable and distributable they are.
I see lots of developers new to AngularJS using directives as the place to throw a bunch of jQuery. In other words, they think ""since I can't do DOM manipulation in the controller, I'll take that code put it in a directive"". While that certainly is much better, it's often still wrong.
Think of the logger we programmed in section 3. Even if we put that in a directive, we still want to do it the ""Angular Way"". It still doesn't take any DOM manipulation! There are lots of times when DOM manipulation is necessary, but it's a lot rarer than you think! Before doing DOM manipulation anywhere in your application, ask yourself if you really need to. There might be a better way.
Here's a quick example that shows the pattern I see most frequently. We want a toggleable button. (Note: this example is a little contrived and a skosh verbose to represent more complicated cases that are solved in exactly the same way.)
There are a few things wrong with this:
First, jQuery was never necessary. There's nothing we did here that needed jQuery at all!
Second, even if we already have jQuery on our page, there's no reason to use it here; we can simply use  and our component will still work when dropped into a project that doesn't have jQuery.
Third, even assuming jQuery was required for this directive to work, jqLite () will always use jQuery if it was loaded! So we needn't use the  - we can just use .
Fourth, closely related to the third, is that jqLite elements needn't be wrapped in  - the  that is passed to the  function would already be a jQuery element! 
And fifth, which we've mentioned in previous sections, why are we mixing template stuff into our logic?
This directive can be rewritten (even for very complicated cases!) much more simply like so:
Again, the template stuff is in the template, so you (or your users) can easily swap it out for one that meets any style necessary, and the logic never had to be touched. Reusability - boom!
And there are still all those other benefits, like testing - it's easy! No matter what's in the template, the directive's internal API is never touched, so refactoring is easy. You can change the template as much as you want without touching the directive. And no matter what you change, your tests still pass.
w00t!
So if directives aren't just collections of jQuery-like functions, what are they? Directives are actually extensions of HTML. If HTML doesn't do something you need it to do, you write a directive to do it for you, and then use it just as if it was part of HTML.
Put another way, if AngularJS doesn't do something out of the box, think how the team would accomplish it to fit right in with , , et al.
Summary
Don't even use jQuery. Don't even include it. It will hold you back. And when you come to a problem that you think you know how to solve in jQuery already, before you reach for the , try to think about how to do it within the confines the AngularJS. If you don't know, ask! 19 times out of 20, the best way to do it doesn't need jQuery and to try to solve it with jQuery results in more work for you.",,,0,,2013-02-21 21:26:42.770000+00:00,,2015-04-17 20:38:02.487000+00:00,2015-04-17 20:38:02.487000+00:00,,259038.0,,259038,14994391,2,7176,,
6581949,,"Classes as objects
Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.
In most languages, classes are just pieces of code that describe how to produce an object. That's kinda true in Python too:
But classes are more than that in Python. Classes are objects too.
Yes, objects.
As soon as you use the keyword , Python executes it and creates
an OBJECT. The instruction
creates in memory an object with the name &quot;ObjectCreator&quot;.
This object (the class) is itself capable of creating objects (the instances),
and this is why it's a class.
But still, it's an object, and therefore:
you can assign it to a variable
you can copy it
you can add attributes to it
you can pass it as a function parameter
e.g.:
Creating classes dynamically
Since classes are objects, you can create them on the fly, like any object.
First, you can create a class in a function using :
But it's not so dynamic, since you still have to write the whole class yourself.
Since classes are objects, they must be generated by something.
When you use the  keyword, Python creates this object automatically. But as
with most things in Python, it gives you a way to do it manually.
Remember the function ? The good old function that lets you know what
type an object is:
Well,  has a completely different ability, it can also create classes on the fly.  can take the description of a class as parameters,
and return a class.
(I  know, it's silly that the same function can have two completely different uses according to the parameters you pass to it. It's an issue due to backward
compatibility in Python)
 works this way:
Where:
: name of the class
: tuple of the parent class (for inheritance, can be empty)
: dictionary containing attributes names and values
e.g.:
can be created manually this way:
You'll notice that we use &quot;MyShinyClass&quot; as the name of the class
and as the variable to hold the class reference. They can be different,
but there is no reason to complicate things.
 accepts a dictionary to define the attributes of the class. So:
Can be translated to:
And used as a normal class:
And of course, you can inherit from it, so:
would be:
Eventually, you'll want to add methods to your class. Just define a function
with the proper signature and assign it as an attribute.
And you can add even more methods after you dynamically create the class, just like adding methods to a normally created class object.
You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.
This is what Python does when you use the keyword , and it does so by using a metaclass.
What are metaclasses (finally)
Metaclasses are the 'stuff' that creates classes.
You define classes in order to create objects, right?
But we learned that Python classes are objects.
Well, metaclasses are what create these objects. They are the classes' classes,
you can picture them this way:
You've seen that  lets you do something like this:
It's because the function  is in fact a metaclass.  is the
metaclass Python uses to create all classes behind the scenes.
Now you wonder why the heck is it written in lowercase, and not ?
Well, I guess it's a matter of consistency with , the class that creates
strings objects, and  the class that creates integer objects.  is
just the class that creates class objects.
You see that by checking the  attribute.
Everything, and I mean everything, is an object in Python. That includes ints,
strings, functions and classes. All of them are objects. And all of them have
been created from a class:
Now, what is the  of any  ?
So, a metaclass is just the stuff that creates class objects.
You can call it a 'class factory' if you wish.
 is the built-in metaclass Python uses, but of course, you can create your
own metaclass.
The  attribute
In Python 2, you can add a  attribute when you write a class (see next section for the Python 3 syntax):
If you do so, Python will use the metaclass to create the class .
Careful, it's tricky.
You write  first, but the class object  is not created
in memory yet.
Python will look for  in the class definition. If it finds it,
it will use it to create the object class . If it doesn't, it will use
 to create the class.
Read that several times.
When you do:
Python does the following:
Is there a  attribute in ?
If yes, create in-memory a class object (I said a class object, stay with me here), with the name  by using what is in .
If Python can't find , it will look for a  at the MODULE level, and try to do the same (but only for classes that don't inherit anything, basically old-style classes).
Then if it can't find any  at all, it will use the 's (the first parent) own metaclass (which might be the default ) to create the class object.
Be careful here that the  attribute will not be inherited, the metaclass of the parent () will be. If  used a  attribute that created  with  (and not ), the subclasses will not inherit that behavior.
Now the big question is, what can you put in ?
The answer is something that can create a class.
And what can create a class? , or anything that subclasses or uses it.
Metaclasses in Python 3
The syntax to set the metaclass has been changed in Python 3:
i.e. the  attribute is no longer used, in favor of a keyword argument in the list of base classes.
The behavior of metaclasses however stays largely the same.
One thing added to metaclasses in Python 3 is that you can also pass attributes as keyword-arguments into a metaclass, like so:
Read the section below for how python handles this.
Custom metaclasses
The main purpose of a metaclass is to change the class automatically,
when it's created.
You usually do this for APIs, where you want to create classes matching the
current context.
Imagine a stupid example, where you decide that all classes in your module
should have their attributes written in uppercase. There are several ways to
do this, but one way is to set  at the module level.
This way, all classes of this module will be created using this metaclass,
and we just have to tell the metaclass to turn all attributes to uppercase.
Luckily,  can actually be any callable, it doesn't need to be a
formal class (I know, something with 'class' in its name doesn't need to be
a class, go figure... but it's helpful).
So we will start with a simple example, by using a function.
Let's check:
Now, let's do exactly the same, but using a real class for a metaclass:
Let's rewrite the above, but with shorter and more realistic variable names now that we know what they mean:
You may have noticed the extra argument . There is
nothing special about it:  always receives the class it's defined in, as the first parameter. Just like you have  for ordinary methods which receive the instance as the first parameter, or the defining class for class methods.
But this is not proper OOP. We are calling  directly and we aren't overriding or calling the parent's . Let's do that instead:
We can make it even cleaner by using , which will ease inheritance (because yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):
Oh, and in python 3 if you do this call with keyword arguments, like this:
It translates to this in the metaclass to use it:
That's it. There is really nothing more about metaclasses.
The reason behind the complexity of the code using metaclasses is not because
of metaclasses, it's because you usually use metaclasses to do twisted stuff
relying on introspection, manipulating inheritance, vars such as , etc.
Indeed, metaclasses are especially useful to do black magic, and therefore
complicated stuff. But by themselves, they are simple:
intercept a class creation
modify the class
return the modified class
Why would you use metaclasses classes instead of functions?
Since  can accept any callable, why would you use a class
since it's obviously more complicated?
There are several reasons to do so:
The intention is clear. When you read , you know
what's going to follow
You can use OOP. Metaclass can inherit from metaclass, override parent methods. Metaclasses can even use metaclasses.
Subclasses of a class will be instances of its metaclass if you specified a metaclass-class, but not with a metaclass-function.
You can structure your code better. You never use metaclasses for something as trivial as the above example. It's usually for something complicated. Having the ability to make several methods and group them in one class is very useful to make the code easier to read.
You can hook on ,  and . Which will allow you to do different stuff, Even if usually you can do it all in ,
some people are just more comfortable using .
These are called metaclasses, damn it! It must mean something!
Why would you use metaclasses?
Now the big question. Why would you use some obscure error-prone feature?
Well, usually you don't:
Metaclasses are deeper magic that
99% of users should never worry about it.
If you wonder whether you need them,
you don't (the people who actually
need them to know with certainty that
they need them and don't need an
explanation about why).
Python Guru Tim Peters
The main use case for a metaclass is creating an API. A typical example of this is the Django ORM. It allows you to define something like this:
But if you do this:
It won't return an  object. It will return an , and can even take it directly from the database.
This is possible because  defines  and
it uses some magic that will turn the  you just defined with simple statements
into a complex hook to a database field.
Django makes something complex look simple by exposing a simple API
and using metaclasses, recreating code from this API to do the real job
behind the scenes.
The last word
First, you know that classes are objects that can create instances.
Well, in fact, classes are themselves instances. Of metaclasses.
Everything is an object in Python, and they are all either instance of classes
or instances of metaclasses.
Except for .
 is actually its own metaclass. This is not something you could
reproduce in pure Python, and is done by cheating a little bit at the implementation
level.
Secondly, metaclasses are complicated. You may not want to use them for
very simple class alterations. You can change classes by using two different techniques:
monkey patching
class decorators
99% of the time you need class alteration, you are better off using these.
But 98% of the time, you don't need class alteration at all.",,,17,2011-08-09 09:41:17.500000+00:00,2011-07-05 11:29:50.927000+00:00,,2020-09-18 14:00:53.010000+00:00,2020-09-18 14:00:53.010000+00:00,,7735255.0,,9951,100003,2,7170,,
26853961,,"How can I merge two Python dictionaries in a single expression?
For dictionaries  and ,  becomes a shallowly merged dictionary with values from  replacing those from .
In Python 3.9.0 or greater (released 17 October 2020): PEP-584, discussed here, was implemented and provides the simplest method:
In Python 3.5 or greater:
In Python 2, (or 3.4 or lower) write a function:
and now:
Explanation
Say you have two dictionaries and you want to merge them into a new dict without altering the original dictionaries:
The desired result is to get a new dictionary () with the values merged, and the second dictionary's values overwriting those from the first.
A new syntax for this, proposed in PEP 448 and available as of Python 3.5, is
And it is indeed a single expression.
Note that we can merge in with literal notation as well:
and now:
It is now showing as implemented in the release schedule for 3.5, PEP 478, and it has now made its way into What's New in Python 3.5 document.
However, since many organizations are still on Python 2, you may wish to do this in a backward-compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:
In both approaches,  will come second and its values will replace 's values, thus  will point to  in our final result.
Not yet on Python 3.5, but want a single expression
If you are not yet on Python 3.5 or need to write backward-compatible code, and you want this in a single expression, the most performant while the correct approach is to put it in a function:
and then you have a single expression:
You can also make a function to merge an undefined number of dictionaries, from zero to a very large number:
This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries  to :
and key-value pairs in  will take precedence over dictionaries  to , and so on.
Critiques of Other Answers
Don't use what you see in the formerly accepted answer:
In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. In Python 3, this will fail because you're adding two  objects together, not two lists -
and you would have to explicitly create them as lists, e.g. . This is a waste of resources and computation power.
Similarly, taking the union of  in Python 3 ( in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:
This example demonstrates what happens when values are unhashable:
Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:
Another hack you should not use:
This uses the  constructor and is very fast and memory-efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic.
Here's an example of the usage being remediated in django.
Dictionaries are intended to take hashable keys (e.g. frozensets or tuples), but this method fails in Python 3 when keys are not strings.
From the mailing list, Guido van Rossum, the creator of the language, wrote:
I am fine with
declaring dict({}, **{1:3}) illegal, since after all it is abuse of
the ** mechanism.
and
Apparently dict(x, **y) is going around as &quot;cool hack&quot; for &quot;call
x.update(y) and return x&quot;. Personally, I find it more despicable than
cool.
It is my understanding (as well as the understanding of the creator of the language) that the intended usage for  is for creating dictionaries for readability purposes, e.g.:
instead of
Response to comments
Despite what Guido says,  is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-coming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact, ** was designed precisely to pass dictionaries as keywords.
Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it.  broke this consistency in Python 2:
This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.
I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.
More comments:
 is still the most readable solution for Python 2. Readability counts.
My response:  actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.
 does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word &quot;merging&quot; these answers describe &quot;updating one dict with another&quot;, and not merging.
Yes. I must refer you back to the question, which is asking for a shallow merge of two dictionaries, with the first's values being overwritten by the second's - in a single expression.
Assuming two dictionaries of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:
Usage:
Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at my answer to the canonical question on a &quot;Dictionaries of dictionaries merge&quot;.
Less Performant But Correct Ad-hocs
These approaches are less performant, but they will provide correct behavior.
They will be much less performant than  and  or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they do respect the order of precedence (latter dictionaries have precedence)
You can also chain the dictionaries manually inside a dict comprehension:
or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):
 will chain the iterators over the key-value pairs in the correct order:
Performance Analysis
I'm only going to do the performance analysis of the usages known to behave correctly. (Self-contained so you can copy and paste yourself.)
In Python 3.8.1, NixOS:
Resources on Dictionaries
My explanation of Python's dictionary implementation, updated for 3.6.
Answer on how to add new keys to a dictionary
Mapping two lists into a dictionary
The official Python docs on dictionaries
The Dictionary Even Mightier - talk by Brandon Rhodes at Pycon 2017
Modern Python Dictionaries, A Confluence of Great Ideas - talk by Raymond Hettinger at Pycon 2017",,,21,,2014-11-10 22:11:48.750000+00:00,,2020-12-18 13:57:26.437000+00:00,2020-12-18 13:57:26.437000+00:00,,541136.0,,541136,38987,2,6838,,
11444416,,"Scoping rules
Main difference is scoping rules. Variables declared by  keyword are scoped to the immediate function body (hence the function scope) while  variables are scoped to the immediate enclosing block denoted by  (hence the block scope).
The reason why  keyword was introduced to the language was function scope is confusing and was one of the main sources of bugs in JavaScript.
Take a look at this example from another stackoverflow question:
 was output to console each time  was invoked since anonymous functions were bound to the same variable.
People had to create immediately invoked functions to capture correct value from the loops but that was also hairy.
Hoisting
While variables declared with  keyword are hoisted (initialized with  before the code is run) which means they are accessible in their enclosing scope even before they are declared:
 variables are not initialized until their definition is evaluated. Accessing them before the initialization results in a . Variable said to be in &quot;temporal dead zone&quot; from the start of the block until the initialization is processed.
Creating global object property
At the top level, , unlike , does not create a property on the global object:
Redeclaration
In strict mode,  will let you re-declare the same variable in the same scope while  raises a SyntaxError.",,,20,2016-11-23 23:42:06.707000+00:00,2012-07-12 02:53:34.897000+00:00,,2021-02-13 04:48:41.743000+00:00,2021-02-13 04:48:41.743000+00:00,,128511.0,,918414,762011,2,6570,,
32108184,,"ECMA 5+:
Note, though, that this creates an unnecessary array (the return value of ).
Pre-ECMA 5:
jQuery:
lodash:
Underscore:
Hoek
ExtJS
AngularJS (version 1)
Ramda",,,28,2015-08-20 01:32:52.957000+00:00,2015-08-20 01:32:52.957000+00:00,,2021-02-06 17:48:42.300000+00:00,2021-02-06 17:48:42.300000+00:00,,8592918.0,,1927876,679915,2,6162,,
14220323,,"→ For a more general explanation of async behaviour with different examples, please see Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference
→ If you already understand the problem, skip to the possible solutions below.
The problem
The A in Ajax stands for asynchronous . That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example,  returns immediately and the next statement, , is executed before the function you passed as  callback was even called.
Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer:
Synchronous
Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer that you needed.
The same is happening when you make a function call containing &quot;normal&quot; code:
Even though  might take a long time to execute, any code coming after  has to wait until the function returns the result.
Asynchronous
You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should call you back on your mobile phone. You hang up, leave the house, and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.
That's exactly what's happening when you do an Ajax request.
Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a callback (notice something? call back ?). Any statement coming after that call is executed before the callback is called.
Solution(s)
Embrace the asynchronous nature of JavaScript! While certain asynchronous operations provide synchronous counterparts (so does &quot;Ajax&quot;), it's generally discouraged to use them, especially in a browser context.
Why is it bad do you ask?
JavaScript runs in the UI thread of the browser and any long-running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not.
All of this is a really bad user experience. The user won't be able to tell whether everything is working fine or not. Furthermore, the effect will be worse for users with a slow connection.
In the following we will look at three different solutions that are all building on top of each other:
Promises with  (ES2017+, available in older browsers if you use a transpiler or regenerator)
Callbacks (popular in node)
Promises with  (ES2015+, available in older browsers if you use one of the many promise libraries)
All three are available in current browsers, and node 7+.
ES2017+: Promises with 
The ECMAScript version released in 2017 introduced syntax-level support for asynchronous functions. With the help of  and , you can write asynchronous in a &quot;synchronous style&quot;. The code is still asynchronous, but it's easier to read/understand.
 builds on top of promises: an  function always returns a promise.  &quot;unwraps&quot; a promise and either result in the value the promise was resolved with or throws an error if the promise was rejected.
Important: You can only use  inside an  function. Right now, top-level  isn't yet supported, so you might have to make an async IIFE (Immediately Invoked Function Expression) to start an  context.
You can read more about  and  on MDN.
Here is an example that builds on top of delay above:
Current browser and node versions support . You can also support older environments by transforming your code to ES5 with the help of regenerator (or tools that use regenerator, such as Babel).
Let functions accept callbacks
A callback is when function 1 is passed to function 2. Function 2 can call function 1 whenever it is ready. In the context of an asynchronous process, the callback will be called whenever the asynchronous process is done. Usually, the result is passed to the callback.
In the example of the question, you can make  accept a callback and use it as  callback. So this
becomes
Here we defined the function &quot;inline&quot; but you can pass any function reference:
 itself is defined as follows:
 will refer to the function we pass to  when we call it and we pass it on to . I.e. once the Ajax request is successful,  will call  and pass the response to the callback (which can be referred to with , since this is how we defined the callback).
You can also process the response before passing it to the callback:
It's easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event-driven (DOM events). Receiving the Ajax response is nothing else but an event.
Difficulties could arise when you have to work with third-party code, but most problems can be solved by just thinking through the application flow.
ES2015+: Promises with then()
The Promise API is a new feature of ECMAScript 6 (ES2015), but it has good browser support already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g. bluebird).
Promises are containers for future values. When the promise receives the value (it is resolved) or when it is canceled (rejected), it notifies all of its &quot;listeners&quot; who want to access this value.
The advantage over plain callbacks is that they allow you to decouple your code and they are easier to compose.
Here is an example of using a promise:
Applied to our Ajax call we could use promises like this:
Describing all the advantages that promise offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.
More information about promises: HTML5 rocks - JavaScript Promises
Side note: jQuery's deferred objects
Deferred objects are jQuery's custom implementation of promises (before the Promise API was standardized). They behave almost like promises but expose a slightly different API.
Every Ajax method of jQuery already returns a &quot;deferred object&quot; (actually a promise of a deferred object) which you can just return from your function:
Side note: Promise gotchas
Keep in mind that promises and deferred objects are just containers for a future value, they are not the value itself. For example, suppose you had the following:
This code misunderstands the above asynchrony issues. Specifically,  doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, it immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the  statement is going to always get this Deferred object, treat it as , and proceed as though the user is logged in. Not good.
But the fix is easy:
Not recommended: Synchronous &quot;Ajax&quot; calls
As I mentioned, some(!) asynchronous operations have synchronous counterparts. I don't advocate their use, but for completeness' sake, here is how you would perform a synchronous call:
Without jQuery
If you directly use a  object, pass  as third argument to .
jQuery
If you use jQuery, you can set the  option to . Note that this option is deprecated since jQuery 1.8.
You can then either still use a  callback or access the  property of the jqXHR object:
If you use any other jQuery Ajax method, such as , , etc., you have to change it to  (since you can only pass configuration parameters to ).
Heads up! It is not possible to make a synchronous JSONP request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).",,,38,,2013-01-08 17:06:14.013000+00:00,,2020-10-06 10:05:01.160000+00:00,2020-10-06 10:05:01.160000+00:00,,897266.0,,218196,14220321,2,5987,,
7220510,,"Pretty-printing is implemented natively in . The third argument enables pretty printing and sets the spacing to use:
If you need syntax highlighting, you might use some regex magic like so:
See in action here: jsfiddle
Or a full snippet provided below:",,,19,,2011-08-28 10:56:51.043000+00:00,,2017-05-31 10:48:56.040000+00:00,2017-05-31 10:48:56.040000+00:00,,2359679.0,,27862,4810841,2,5547,,
11828573,,"Hit the Esc key to enter ""Normal mode"". Then you can type  to enter ""Command-line mode"". A colon () will appear at the bottom of the screen and you can type in one of the following commands. To execute a command, press the Enter key.
  to quit (short for )
 to quit without saving (short for )
 to write and quit
 to write and quit even if file has only read permission (if file does not have write permission: force write)
  to write and quit (similar to , but only write if there are changes)
 to write and exit (same as )
 to quit all (short for )
 to quit without saving and make Vim return non-zero error (i.e. exit with error)
You can also exit Vim directly from ""Normal mode"" by typing  to save and quit (same as ) or  to just quit (same as ). (Note that case is important here.  and  do not mean the same thing.)
Vim has extensive help - that you can access with the  command - where you can find answers to all your questions and a tutorial for beginners.",,,18,,2012-08-06 12:46:16.327000+00:00,,2019-04-02 01:22:09.027000+00:00,2019-04-02 01:22:09.027000+00:00,,1083697.0,,1445334,11828270,2,5299,,
11304926,,"By not including the trailing '/' at the end of foo, you will copy the directory itself (including contents), rather than only the contents of the directory.
From  (See online manual)
-r Recursively copy entire directories",,,12,,2012-07-03 05:21:39.313000+00:00,,2020-10-15 01:21:14.003000+00:00,2020-10-15 01:21:14.003000+00:00,,187883.0,,774116,11304895,2,5263,,
10335943,,"You can find the DMGs or XIPs for Xcode and other development tools on https://developer.apple.com/download/more/ (requires Apple ID to login).
You must login to have a valid session before downloading anything below.
*(Newest on top. For each minor version (6.3, 5.1, etc.) only the latest revision is kept in the list.)
*With Xcode 12.2, Apple introduces the term “Release Candidate” (RC) which replaces “GM seed” and indicates this version is near final.
Xcode 12
12.4 (requires a Mac with Apple silicon running macOS Big Sur 11 or later, or an Intel-based Mac running macOS Catalina 10.15.4 or later) (Latest as of 27-Jan-2021)
12.3 (requires a Mac with Apple silicon running macOS Big Sur 11 or later, or an Intel-based Mac running macOS Catalina 10.15.4 or later)
12.2
12.1
12.0.1 (Requires macOS 10.15.4 or later)  (Latest as of 24-Sept-2020)
Xcode 11
11.7 (Latest as of Sept 02 2020)
11.6
11.5
11.4.1 (Requires macOS 10.15.2 or later)
11.3.1
11.2.1
11.1
11 (Requires macOS 10.14.4 or later)
Xcode 10 (unsupported for iTunes Connect)
10.3 (Requires macOS 10.14.3 or later)
10.2.1 (Requires macOS 10.14.3 or later)
10.1 (Last version supporting macOS 10.13.6 High Sierra)
10 (Subsequent versions were unsupported for iTunes Connect from March 2019)
Xcode 9
9.4.1
9.3.1
9.2 (Last version supporting macOS 10.12.6 Sierra)
9.1
9.0.1
Xcode 8
8.3.3
8.2.1 (Last version supporting OS X 10.11.5 El Capitan)
8.1
8.0
Xcode 7
7.3.1
7.2.1 (Last version supporting OS X 10.10 Yosemite)
7.1.1
7.0.1
Xcode 6
6.4
6.3.2
6.2 (Last version supporting OS X 10.9.5 Mavericks)
6.1.1
6.0.1
Even Older Versions (unsupported for iTunes Connect)
5.1.1 (Latest version supporting OS X 10.8 Mountain Lion)
5.0.2
4.6.3
4.5.2
4.4.1
4.3.2
4.2
4.1
4.0.2
3.2.6
3.1.4
3.0
2.5
2.4.1
2.3
2.2.1
1.5
1.0",,,4,2018-02-08 18:05:47.503000+00:00,2012-04-26 14:52:40.777000+00:00,,2021-01-28 00:21:13.380000+00:00,2021-01-28 00:21:13.380000+00:00,,3772393.0,,1241690,10335747,2,5153,,
7173011,,"You need to set your content-type to application/json. But  (or ) sends the Content-Type , which is not accepted on Spring's side.
Looking at the curl man page, I think you can use  (or ):
Full example:
( is short for ,  for )
Note that  is optional if you use , as the  flag implies a POST request.
On Windows, things are slightly different. See the comment thread.",,,25,,2011-08-24 09:12:29.297000+00:00,,2021-01-17 02:25:11.640000+00:00,2021-01-17 02:25:11.640000+00:00,,179850.0,,342852,7172784,2,4793,,
12142066,,"To display the current branch you're on, without the other branches listed, you can do the following:
Reference:
Show just the current branch in Git (Sep 2009)",,,25,,2012-08-27 12:33:46.397000+00:00,,2018-10-16 06:13:10.630000+00:00,2018-10-16 06:13:10.630000+00:00,,5728089.0,,1426193,6245570,2,4728,,
7244456,,"In your local clone of your forked repository, you can add the original GitHub repository as a &quot;remote&quot;.  (&quot;Remotes&quot; are like nicknames for the URLs of repositories -  is one, for example.)  Then you can fetch all the branches from that upstream repository, and rebase your work to continue working on the upstream version.  In terms of commands that might look like:
If you don't want to rewrite the history of your master branch, (for example because other people may have cloned it) then you should replace the last command with .  However, for making further pull requests that are as clean as possible, it's probably better to rebase.
If you've rebased your branch onto  you may need to force the push in order to push it to your own forked repository on GitHub.  You'd do that with:
You only need to use the  the first time after you've rebased.",,,26,,2011-08-30 14:01:26.267000+00:00,,2020-11-24 10:50:01.767000+00:00,2020-11-24 10:50:01.767000+00:00,,-1.0,,223092,7244321,2,4607,,
17071908,,"To select rows whose column value equals a scalar, , use :
To select rows whose column value is in an iterable, , use :
Combine multiple conditions with : 
Note the parentheses. Due to Python's operator precedence rules,  binds more tightly than  and . Thus, the parentheses in the last example are necessary. Without the parentheses 
is parsed as 
which results in a Truth value of a Series is ambiguous error.
To select rows whose column value does not equal , use :
 returns a boolean Series, so to select rows whose value is not in , negate the boolean Series using :
For example,
yields
If you have multiple values you want to include, put them in a
list (or more generally, any iterable) and use :
yields
Note, however, that if you wish to do this many times, it is more efficient to
make an index first, and then use :
yields
or, to include multiple values from the index use :
yields",,,29,,2013-06-12 17:44:20.483000+00:00,,2019-01-18 02:47:47.650000+00:00,2019-01-18 02:47:47.650000+00:00,,190597.0,,190597,17071871,2,4584,,
7572252,,"Maybe you just need to commit. I ran into this when I did:
Oops! Never committed!
All I had to do was:
Success!",,,23,,2011-09-27 16:07:11.757000+00:00,,2017-05-24 16:14:38.930000+00:00,2017-05-24 16:14:38.930000+00:00,user456814,1621821.0,,581625,4181861,2,4546,,
8881376,,"Strings are immutable. That means once you've created the , if another process can dump memory, there's no way (aside from reflection) you can get rid of the data before garbage collection kicks in.
With an array, you can explicitly wipe the data after you're done with it. You can overwrite the array with anything you like, and the password won't be present anywhere in the system, even before garbage collection.
So yes, this is a security concern - but even using  only reduces the window of opportunity for an attacker, and it's only for this specific type of attack.
As noted in the comments, it's possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the garbage collector may clear all memory as it goes, to avoid this sort of thing. Even if it does, there's still the time during which the  contains the actual characters as an attack window.",,,6,,2012-01-16 14:26:16.390000+00:00,,2018-04-20 17:50:27.583000+00:00,2018-04-20 17:50:27.583000+00:00,,4298200.0,,22656,8881291,2,4450,,
6937030,,"A clear explanation from Daniel Irvine:
  There's a problem with 401 Unauthorized, the HTTP status code for authentication errors. And that’s just it: it’s for authentication, not authorization.
  Receiving a 401 response is the server telling you, “you aren’t
  authenticated–either not authenticated at all or authenticated
  incorrectly–but please reauthenticate and try again.” To help you out,
  it will always include a WWW-Authenticate header that describes how
  to authenticate.
  
  This is a response generally returned by your web server, not your web
  application.
  
  It’s also something very temporary; the server is asking you to try
  again.
  
  So, for authorization I use the 403 Forbidden response. It’s
  permanent, it’s tied to my application logic, and it’s a more concrete
  response than a 401.
  
  Receiving a 403 response is the server telling you, “I’m sorry. I know
  who you are–I believe who you say you are–but you just don’t have
  permission to access this resource. Maybe if you ask the system
  administrator nicely, you’ll get permission. But please don’t bother
  me again until your predicament changes.”
  
  In summary, a 401 Unauthorized response should be used for missing
  or bad authentication, and a 403 Forbidden response should be used
  afterwards, when the user is authenticated but isn’t authorized to
  perform the requested operation on the given resource.
Another nice pictorial format of how http status codes should be used.",,,28,,2011-08-04 06:24:41.817000+00:00,,2019-06-19 17:45:39.597000+00:00,2019-06-19 17:45:39.597000+00:00,,2704032.0,,305818,3297048,2,4436,,
29973358,,"The code formatting is available in Visual Studio Code through the following shortcuts:
On Windows Shift + Alt + F
On Mac Shift + Option + F
On Linux Ctrl + Shift + I
Alternatively, you can find the shortcut, as well as other shortcuts, through the 'Command Palette' provided in the editor with Ctrl +Shift+ P (or Command + Shift + P on Mac), and then searching for format document.
For unsaved snippets
Open command palette (Win: F1 or Ctrt+Shift+P)
Find 'Change Language Model'
Select language e.g. . By now syntax should be highlighted.
Format document (e.g. Open Command Palette -&gt; 'Format Document')
Unformat
Select text
Command Palette -&gt; Join Lines
'Show the pics'",,,22,,2015-04-30 16:43:35.850000+00:00,,2020-08-20 03:38:00.453000+00:00,2020-08-20 03:38:00.453000+00:00,,581076.0,,1730061,29973357,2,4371,,
22345808,,"See the NPM docs and semver docs:
 “Approximately equivalent to version”, will update you to all future patch versions, without incrementing the minor version.  will use releases from 1.2.3 to &lt;1.3.0.
 “Compatible with version”, will update you to all future minor/patch versions, without incrementing the major version.  will use releases from 2.3.4 to &lt;3.0.0.
See Comments below for exceptions, in particular for pre-one versions, such as ^0.2.3",,,22,,2014-03-12 08:28:07.070000+00:00,,2020-07-23 20:29:01.447000+00:00,2020-07-23 20:29:01.447000+00:00,,183704.0,,941764,22343224,2,4329,,
11227877,,"Branch prediction.
With a sorted array, the condition  is first  for a streak of values, then becomes  for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.",,,10,,2012-06-27 13:54:45.240000+00:00,,2016-08-05 07:53:10.730000+00:00,2020-06-20 09:12:55.060000+00:00,,-1.0,,1011995,11227809,2,4256,,
9229821,,"TL;DR
Using the Set constructor and the spread syntax:
""Smart"" but naïve way
Basically, we iterate over the array and, for each element, check if the first position of this element in the array is equal to the current position. Obviously, these two positions are different for duplicate elements.
Using the 3rd (""this array"") parameter of the filter callback we can avoid a closure of the array variable:
Although concise, this algorithm is not particularly efficient for large arrays (quadratic time).
Hashtables to the rescue
This is how it's usually done. The idea is to place each element in a hashtable and then check for its presence instantly. This gives us linear time, but has at least two drawbacks:
since hash keys can only be strings or symbols in JavaScript, this code doesn't distinguish numbers and ""numeric strings"". That is,  will return just 
for the same reason, all objects will be considered equal:  will return just .
That said, if your arrays contain only primitives and you don't care about types (e.g. it's always numbers), this solution is optimal.
The best from two worlds
A universal solution combines both approaches: it uses hash lookups for primitives and linear search for objects.
sort | uniq
Another option is to sort the array first, and then remove each element equal to the preceding one:
Again, this doesn't work with objects (because all objects are equal for ). Additionally, we silently change the original array as a side effect - not good! However, if your input is already sorted, this is the way to go (just remove  from the above).
Unique by...
Sometimes it's desired to uniquify a list based on some criteria other than just equality, for example, to filter out objects that are different, but share some property. This can be done elegantly by passing a callback. This ""key"" callback is applied to each element, and elements with equal ""keys"" are removed. Since  is expected to return a primitive, hash table will work fine here:
A particularly useful  is  which will remove objects that are physically different, but ""look"" the same:
If the  is not primitive, you have to resort to the linear search:
In ES6 you can use a :
or a :
which both also work with non-primitive keys.
First or last?
When removing objects by a key, you might to want to keep the first of ""equal"" objects or the last one.
Use the  variant above to keep the first, and the  to keep the last:
Libraries
Both underscore and Lo-Dash provide  methods. Their algorithms are basically similar to the first snippet above and boil down to this:
This is quadratic, but there are nice additional goodies, like wrapping native , ability to uniqify by a key ( in their parlance), and optimizations for already sorted arrays.
If you're using jQuery and can't stand anything without a dollar before it, it goes like this:
which is, again, a variation of the first snippet.
Performance
Function calls are expensive in JavaScript, therefore the above solutions, as concise as they are, are not particularly efficient. For maximal performance, replace  with a loop and get rid of other function calls:
This chunk of ugly code does the same as the snippet #3 above, but an order of magnitude faster (as of 2017 it's only twice as fast - JS core folks are doing a great job!)
ES6
ES6 provides the Set object, which makes things a whole lot easier:
or
Note that, unlike in python, ES6 sets are iterated in insertion order, so this code preserves the order of the original array.
However, if you need an array with unique elements, why not use sets right from the beginning?
Generators
A ""lazy"", generator-based version of  can be built on the same basis:
take the next value from the argument
if it's been seen already, skip it
otherwise, yield it and add it to the set of already seen values",,,42,2019-10-15 15:09:20.257000+00:00,2012-02-10 15:05:41.883000+00:00,,2020-06-08 13:42:35.670000+00:00,2020-06-08 13:42:35.670000+00:00,,893857.0,,989121,9229645,2,4204,,
6677069,,"Assuming you have a button with the id , try this example:
I got the code from the article Smoothly scroll to an element without a jQuery plugin. And I have tested it on the example below.",,,24,,2011-07-13 09:52:36.840000+00:00,,2018-07-08 14:48:17.303000+00:00,2018-07-08 14:48:17.303000+00:00,,2415293.0,,343088,6677035,2,4189,,
17666279,,"Try:
Check MySQL Options.
Note-1: It is better to use the full path of the SQL file .
Note-2: Use  and  to keep the routines and triggers of original database. They are not copied by default.
Note-3 You may have to create the (empty) database from mysql if it doesn't exist already and the exported SQL don't contain  (exported with  or  option), before you can import it.",,,25,,2013-07-16 00:48:01.723000+00:00,,2018-11-28 06:31:32.570000+00:00,2018-11-28 06:31:32.570000+00:00,,2522554.0,,2522554,17666249,2,4153,,
21947627,,"Pure speculation is that you're using a terminal that attempts to do word-wrapping rather than character-wrapping, and treats  as a word character but  as a non-word character. So when it reaches the end of a line and searches for a place to break the line, it sees a  almost immediately and happily breaks there; whereas with the , it has to keep searching for longer, and may have more text to wrap (which may be expensive on some terminals, e.g., outputting backspaces, then outputting spaces to overwrite the letters being wrapped).
But that's pure speculation.",,,13,2014-02-22 00:02:01.013000+00:00,2014-02-22 00:02:01.013000+00:00,,2017-03-13 07:16:29.520000+00:00,2017-03-13 07:16:29.520000+00:00,,157247.0,,157247,21947452,2,4135,,
6470452,,"From Python Documentation:
  An except clause may name multiple exceptions as a parenthesized tuple, for example
Or, for Python 2 only:
Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using .",,,9,,2011-06-24 15:56:34.030000+00:00,,2018-03-22 13:56:48.093000+00:00,2018-03-22 13:56:48.093000+00:00,,3160466.0,,42346,6470428,2,4121,,
11832950,,"Use Math.round() :
Or to be more specific and to ensure things like 1.005 round correctly, use Number.EPSILON  :",,,3,,2012-08-06 17:20:31.017000+00:00,,2021-02-26 19:43:16.053000+00:00,2021-02-26 19:43:16.053000+00:00,,10094877.0,,1575238,11832914,2,3993,,
9270753,,"Keys need to be only readable by you:
If Keys need to be read-writable by you:
600 appears to be fine as well (in fact better in most cases, because you don't need to change file permissions later to edit it).
The relevant portion from the manpage ()",,,14,,2012-02-14 02:05:01.030000+00:00,,2019-11-07 04:58:57.447000+00:00,2019-11-07 04:58:57.447000+00:00,,984471.0,,680920,9270734,2,3917,,
17239853,,"Here's a correct table of percentages to hex values. E.g. for 50% white you'd use #80FFFFFF.
100% — FF
95% — F2
90% — E6
85% — D9
80% — CC
75% — BF
70% — B3
65% — A6
60% — 99
55% — 8C
50% — 80
45% — 73
40% — 66
35% — 59
30% — 4D
25% — 40
20% — 33
15% — 26
10% — 1A
5% — 0D
0% — 00
(source)",,,6,,2013-06-21 16:15:35.430000+00:00,,2014-08-11 15:02:11.150000+00:00,2017-05-23 12:18:27.583000+00:00,,-1.0,,228109,15852122,2,3819,,
7229996,," isn’t documented, because it’s not a feature of Git.
Git cannot add a completely empty directory. People who want to track empty directories in Git have created the convention of putting files called  in these directories. The file could be called anything; Git assigns no special significance to this name.
There is a competing convention of adding a  file to the empty directories to get them tracked, but some people see this as confusing since the goal is to keep the empty directories, not ignore them;  is also used to list files that should be ignored by Git when looking for untracked files.",,,21,,2011-08-29 12:20:54.923000+00:00,,2017-11-14 14:44:08.140000+00:00,2017-11-14 14:44:08.140000+00:00,,206720.0,,110707,7229885,2,3778,,
21699210,,"There are 5 6 NINE (or 63*, depending how you count) different ways to write multi-line strings in YAML.
TL;DR
Use  most of the time: interior line breaks are stripped out, although you get one at the end:
Use  if you want those linebreaks to be preserved as  (for instance, embedded markdown with paragraphs).
Use  or  instead if you don't want a linebreak appended at the end.
Use  if you need to split lines in the middle of words or want to literally type linebreaks as :
YAML is crazy.
Block scalar styles (, )
These allow characters such as  and  without escaping, and add a new line () to the end of your string.
 Folded style removes single newlines within the string (but adds one at the end, and converts double newlines to singles):
→ 
 Literal style turns every newline within the string into a literal newline, and adds one at the end:
→ 
Here's the official definition from the YAML Spec 1.2
  Scalar content can be written in block notation, using a literal style (indicated by “|”) where all line breaks are significant. Alternatively, they can be written with the folded style (denoted by “>”) where each line break is folded to a space unless it ends an empty or a more-indented line.
Block styles with block chomping indicator (, , , )
You can control the handling of the final new line in the string, and any trailing blank lines () by adding a block chomping indicator character:
, : ""clip"": keep the line feed, remove the trailing blank lines.
, : ""strip"": remove the line feed, remove the trailing blank lines.
, : ""keep"": keep the line feed, keep trailing blank lines.
""Flow"" scalar styles (, , )
These have limited escaping, and construct a single-line string with no new line characters. They can begin on the same line as the key, or with additional newlines first.
plain style (no escaping, no  or  combinations, limits on first character):
double-quoted style ( and  must be escaped by , newlines can be inserted with a literal  sequence, lines can be concatenated without spaces with trailing ):
&rarr; 
single-quoted style (literal  must be doubled, no special characters, possibly useful for expressing strings starting with double quotes):
&rarr; 
Summary
In this table,  means .  means ""newline character"" ( in JavaScript), except for the ""in-line newlines"" row, where it means literally a backslash and an n).
Examples
Note the trailing spaces on the line before ""spaces.""
Block styles with indentation indicators
Just in case the above isn't enough for you, you can add a ""block indentation indicator"" (after your block chomping indicator, if you have one):
Addendum
If you insert extra spaces at the start of not-the-first lines in Folded style, they will be kept, with a bonus newline. This doesn't happen with flow styles:
→ 
I can't even.
2 block styles, each with 2 possible block chomping indicators (or none), and with 9 possible indentation indicators (or none), 1 plain style and 2 quoted styles: 2 x (2 + 1) x (9 + 1) + 1 + 2 = 63
Some of this information has also been summarised here.",,,20,,2014-02-11 10:27:28.157000+00:00,,2020-06-10 06:37:03.063000+00:00,2020-06-10 06:37:03.063000+00:00,,263268.0,,263268,3790454,2,3744,,
6996628,," removes a file.
 removes an empty directory.
 deletes a directory and all its contents.
 objects from the Python 3.4+  module also expose these instance methods:
 removes a file or symbolic link.
 removes an empty directory.",,,8,,2011-08-09 13:07:39.090000+00:00,,2020-01-29 13:10:58.517000+00:00,2020-01-29 13:10:58.517000+00:00,,913098.0,,21886,6996603,2,3734,,
16048358,,"Docker originally used LinuX Containers (LXC), but later switched to runC (formerly known as libcontainer), which runs in the same operating system as its host. This allows it to share a lot of the host operating system resources. Also, it uses a layered filesystem (AuFS) and manages networking.
AuFS is a layered file system, so you can have a read only part and a write part which are merged together. One could have the common parts of the operating system as read only (and shared amongst all of your containers) and then give each container its own mount for writing.
So, let's say you have a 1&nbsp;GB container image; if you wanted to use a full VM, you would need to have 1&nbsp;GB x number of VMs you want. With Docker and AuFS you can share the bulk of the 1&nbsp;GB between all the containers and if you have 1000 containers you still might only have a little over 1&nbsp;GB of space for the containers OS (assuming they are all running the same OS image).
A full virtualized system gets its own set of resources allocated to it, and does minimal sharing. You get more isolation, but it is much heavier (requires more resources). With Docker you get less isolation, but the containers are lightweight (require fewer resources). So you could easily run thousands of containers on a host, and it won't even blink. Try doing that with Xen, and unless you have a really big host, I don't think it is possible.
A full virtualized system usually takes minutes to start, whereas Docker/LXC/runC containers take seconds, and often even less than a second.
There are pros and cons for each type of virtualized system. If you want full isolation with guaranteed resources, a full VM is the way to go. If you just want to isolate processes from each other and want to run a ton of them on a reasonably sized host, then Docker/LXC/runC seems to be the way to go.
For more information, check out this set of blog posts which do a good job of explaining how LXC works.
  Why is deploying software to a docker image (if that's the right term) easier than simply deploying to a consistent production environment?
Deploying a consistent production environment is easier said than done. Even if you use tools like Chef and Puppet, there are always OS updates and other things that change between hosts and environments.
Docker gives you the ability to snapshot the OS into a shared image, and makes it easy to deploy on other Docker hosts. Locally, dev, qa, prod, etc.: all the same image. Sure you can do this with other tools, but not nearly as easily or fast.
This is great for testing; let's say you have thousands of tests that need to connect to a database, and each test needs a pristine copy of the database and will make changes to the data. The classic approach to this is to reset the database after every test either with custom code or with tools like Flyway - this can be very time-consuming and means that tests must be run serially. However, with Docker you could create an image of your database and run up one instance per test, and then run all the tests in parallel since you know they will all be running against the same snapshot of the database. Since the tests are running in parallel and in Docker containers they could run all on the same box at the same time and should finish much faster. Try doing that with a full VM.
From comments...
  Interesting! I suppose I'm still confused by the notion of ""snapshot[ting] the OS"". How does one do that without, well, making an image of the OS?
Well, let's see if I can explain. You start with a base image, and then make your changes, and commit those changes using docker, and it creates an image. This image contains only the differences from the base. When you want to run your image, you also need the base, and it layers your image on top of the base using a layered file system: as mentioned above, Docker uses AuFS. AuFS merges the different layers together and you get what you want; you just need to run it. You can keep adding more and more images (layers) and it will continue to only save the diffs. Since Docker typically builds on top of ready-made images from a registry, you rarely have to ""snapshot"" the whole OS yourself.",,,38,,2013-04-16 22:35:27.317000+00:00,,2019-11-19 19:29:30.650000+00:00,2019-11-19 19:29:30.650000+00:00,,4217352.0,,356788,16047306,2,3579,,
12867753,,"I had the same problem. Don't remember where I found it on the web, but here is what I did:
Click &quot;Start button&quot;
in the search box, enter &quot;Turn windows features on or off&quot;
in the features window, Click: &quot;Internet Information Services&quot;
Click: &quot;World Wide Web Services&quot;
Click: &quot;Application Development Features&quot;
Check (enable) the features. I checked all but CGI.
btw, I'm using Windows 7. Many comments over the years have certified this works all the way up to Windows 10 and Server 2019, as well.",,,5,,2012-10-12 22:06:11.817000+00:00,,2020-07-29 20:05:20.723000+00:00,2020-07-29 20:05:20.723000+00:00,,2756409.0,,543858,9794985,2,3463,,
11237235,,"The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in Mysticial's answer.
Now, if we look at the code
we can find that the meaning of this particular  branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a conditional move statement, which would be compiled into a conditional move instruction: , in an  system. The branch and thus the potential branch prediction penalty is removed.
In , thus , the statement, which would compile directly (without any optimization) into the conditional move instruction in , is the ternary operator . So we rewrite the above statement into an equivalent one:
While maintaining readability, we can check the speedup factor.
On an Intel Core i7-2600K @ 3.4 GHz and Visual Studio 2010 Release Mode, the benchmark is:
x86
Scenario
Time (seconds)
Branching - Random data
8.885
Branching - Sorted data
1.528
Branchless - Random data
3.716
Branchless - Sorted data
3.71
x64
Scenario
Time (seconds)
Branching - Random data
11.302
Branching - Sorted data
1.830
Branchless - Random data
2.736
Branchless - Sorted data
2.737
The result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.
Now let's look more closely by investigating the  assembly they generate. For simplicity, we use two functions  and .
 uses the conditional branch :
 uses the ternary operator :
On a x86-64 machine,  generates the assembly below.
 uses much less code due to the usage of instruction . But the real gain is that  does not involve branch jumps, , which would have a significant performance penalty if the predicted result is not right.
So why does a conditional move perform better?
In a typical  processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called pipelining.
In a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.
In a conditional move case, the execution conditional move instruction is divided into several stages, but the earlier stages like  and  do not depend on the result of the previous instruction; only latter stages need the result. Thus, we wait a fraction of one instruction's execution time. This is why the conditional move version is slower than the branch when the prediction is easy.
The book Computer Systems: A Programmer's Perspective, second edition explains this in detail. You can check Section 3.6.6 for Conditional Move Instructions, entire Chapter 4 for Processor Architecture, and Section 5.11.2 for special treatment for Branch Prediction and Misprediction Penalties.
Sometimes, some modern compilers can optimize our code to assembly with better performance, sometimes some compilers can't (the code in question is using Visual Studio's native compiler). Knowing the performance difference between a branch and a conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.",,,2,,2012-06-28 02:14:03.600000+00:00,,2021-01-10 17:22:20.290000+00:00,2021-01-10 17:22:20.290000+00:00,,3204551.0,,866732,11227809,2,3451,,
22050116,,"In order to copy a file from a container to the host, you can use the command
Here's an example:
Here goofy_roentgen is the container name I got from the following command:
You can also use (part of) the Container ID. The following command is equivalent to the first",,,12,,2014-02-26 18:31:40.647000+00:00,,2019-11-07 15:25:50.183000+00:00,2019-11-07 15:25:50.183000+00:00,,9468261.0,,884978,22049212,2,3424,,
10999165,,"Matthew's answer is great for removing remote branches and I also appreciate the explanation, but to make a simple distinction between the two commands:
To remove a local branch from your machine:
 (use  instead to force deleting the branch without checking merged status)
To remove a remote branch from the server:
Reference: Git: Delete a branch (local or remote)",,,9,,2012-06-12 14:51:43.717000+00:00,,2020-04-11 11:08:11.433000+00:00,2020-04-11 11:08:11.433000+00:00,,63550.0,,385559,2003505,2,3422,,
16476974,, is a generator which yields both the index and row (as a Series):,,,16,,2013-05-10 07:07:58.523000+00:00,,2020-12-11 08:38:28.693000+00:00,2020-12-11 08:38:28.693000+00:00,,10667412.0,,1426056,16476924,2,3394,,
15321456,,"I think other answers here are wrong, because this is a question of moving the mistakenly committed files back to the staging area from the previous commit, without cancelling the changes done to them. This can be done like Paritosh Singh suggested:
or
Then reset the unwanted files in order to leave them out from the commit:
Now commit again, you can even re-use the same commit message:",,,30,,2013-03-10 10:56:37.877000+00:00,,2016-01-04 09:36:14.670000+00:00,2016-01-04 09:36:14.670000+00:00,,136285.0,,2153571,12481639,2,3391,,
11277439,,"To delete a key regardless of whether it is in the dictionary, use the two-argument form of :
This will return  if  exists in the dictionary, and  otherwise. If the second parameter is not specified (ie. ) and  does not exist, a  is raised.
To delete a key that is guaranteed to exist, you can also use
This will raise a  if the key is not in the dictionary.",,,12,,2012-06-30 20:29:18.237000+00:00,,2020-03-15 20:20:40.933000+00:00,2020-03-15 20:20:40.933000+00:00,,10908375.0,,279627,11277432,2,3371,,
12830454,,"If the value is a text type:
If the value is a number:
There is a downside that values like 1.5 will give &quot;1.50&quot; as the output. A fix suggested by @minitech:
It seems like  is a better solution. But it is not! In some cases it will NOT round correctly:
toFixed() will also NOT round correctly in some cases (tested in Chrome v.55.0.2883.87)!
Examples:
I guess, this is because 1.555 is actually something like float 1.55499994 behind the scenes.
Solution 1 is to use a script with required rounding algorithm, for example:
https://plnkr.co/edit/uau8BlS1cqbvWPCHJeOy?p=preview
NOTE: This is not a universal solution for everyone. There are several different rounding algorithms, your implementation can be different, depends on your requirements. https://en.wikipedia.org/wiki/Rounding
Solution 2 is to avoid front end calculations and pull rounded values from the backend server.
Edit: Another possible solution, which is not a bullet proof also.
In some cases, when you round number like 1.3549999999999998 it will return incorrect result. Should be 1.35 but result is 1.36.",,,1,,2012-10-11 00:27:24.237000+00:00,,2020-07-02 00:35:25.343000+00:00,2020-07-02 00:35:25.343000+00:00,,1736537.0,,1736537,11832914,2,3359,,
8909176,,"Or for something completely different...  slides to .
Not so mathematical, but... every picture paints a thousand words...",,,0,2012-01-18 11:18:08.440000+00:00,2012-01-18 11:18:08.440000+00:00,,2020-01-08 22:51:59.873000+00:00,2020-01-08 22:51:59.873000+00:00,,11279879.0,,830899,1642028,2,3353,,
9834872,,"That will produce the diff between the tips of the two branches. If you'd prefer to find the diff from their common ancestor to test, you can use three dots instead of two:",,,28,,2012-03-23 06:11:26.743000+00:00,,2012-03-23 06:11:26.743000+00:00,,,,,960558,9834689,2,3353,,
